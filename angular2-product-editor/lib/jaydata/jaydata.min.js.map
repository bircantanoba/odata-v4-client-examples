{"version":3,"sources":["jaydata.js","node_modules/acorn/dist/acorn.js","node_modules/browserify/node_modules/process/browser.js","node_modules/jaydata-dynamic-metadata/lib/metadata.js","node_modules/jaydata-dynamic-metadata/lib/metadataHandler.js","node_modules/jaydata-dynamic-metadata/lib/service.js","node_modules/jaydata-dynamic-metadata/node_modules/extend/index.js","node_modules/jaydata-error-handler/lib/errorHandler.js","node_modules/jaydata-promise-handler/lib/promise.js","node_modules/jaydata-promise-handler/lib/promiseHandlerBase.js","node_modules/odata-metadata/lib/edm.js","node_modules/odata-metadata/lib/metacode.js","node_modules/odata-metadata/node_modules/reflect-metadata/Reflect.js","package.json","src/JaySvcUtil/index.js","src/TypeSystem/Container.js","src/TypeSystem/Extensions.js","src/TypeSystem/Trace/Logger.js","src/TypeSystem/Trace/Trace.js","src/TypeSystem/src/TypeSystem/TypeSystem.js","src/TypeSystem/Types/src/TypeSystem/Types/Blob.js","src/TypeSystem/Types/Converter.js","src/TypeSystem/Types/EdmTypes.js","src/TypeSystem/Types/Geography.js","src/TypeSystem/Types/Geometry.js","src/TypeSystem/Types/Geospatial.js","src/TypeSystem/Types/Guid.js","src/TypeSystem/Types/SimpleBase.js","src/TypeSystem/Types/Types.js","src/TypeSystem/index.js","src/TypeSystem/initializeJayData.js","src/TypeSystem/initializeJayDataClient.js","src/Types/Access.js","src/Types/Ajax/AjaxStub.js","src/Types/Ajax/ExtJSAjaxWrapper.js","src/Types/Ajax/WinJSAjaxWrapper.js","src/Types/Ajax/jQueryAjaxWrapper.js","src/Types/Authentication/Anonymous.js","src/Types/Authentication/AuthenticationBase.js","src/Types/Authentication/BasicAuth.js","src/Types/Authentication/FacebookAuth.js","src/Types/Entity.js","src/Types/EntityAttachModes.js","src/Types/EntityContext.js","src/Types/EntitySet.js","src/Types/EntityState.js","src/Types/EntityStateManager.js","src/Types/EntityWrapper.js","src/Types/Enum.js","src/Types/Expressions/ArrayLiteralExpression.js","src/Types/Expressions/CallExpression.js","src/Types/Expressions/CodeParser.js","src/Types/Expressions/ConstantExpression.js","src/Types/Expressions/ContinuationExpressionBuilder.js","src/Types/Expressions/EntityExpressions/AssociationInfoExpression.js","src/Types/Expressions/EntityExpressions/CodeExpression.js","src/Types/Expressions/EntityExpressions/CodeToEntityConverter.js","src/Types/Expressions/EntityExpressions/ComplexTypeExpression.js","src/Types/Expressions/EntityExpressions/EntityContextExpression.js","src/Types/Expressions/EntityExpressions/EntityExpression.js","src/Types/Expressions/EntityExpressions/EntityExpressionVisitor.js","src/Types/Expressions/EntityExpressions/EntityFieldExpression.js","src/Types/Expressions/EntityExpressions/EntityFieldOperationExpression.js","src/Types/Expressions/EntityExpressions/EntitySetExpression.js","src/Types/Expressions/EntityExpressions/ExpressionMonitor.js","src/Types/Expressions/EntityExpressions/FilterExpression.js","src/Types/Expressions/EntityExpressions/FrameOperationExpression.js","src/Types/Expressions/EntityExpressions/IncludeExpression.js","src/Types/Expressions/EntityExpressions/MemberInfoExpression.js","src/Types/Expressions/EntityExpressions/OrderExpression.js","src/Types/Expressions/EntityExpressions/ParametricQueryExpression.js","src/Types/Expressions/EntityExpressions/ProjectionExpression.js","src/Types/Expressions/EntityExpressions/QueryExpressionCreator.js","src/Types/Expressions/EntityExpressions/QueryParameterExpression.js","src/Types/Expressions/EntityExpressions/RepresentationExpression.js","src/Types/Expressions/EntityExpressions/ServiceOperationExpression.js","src/Types/Expressions/ExpressionBuilder.js","src/Types/Expressions/ExpressionNode2.js","src/Types/Expressions/FunctionExpression.js","src/Types/Expressions/ObjectFieldExpression.js","src/Types/Expressions/ObjectLiteralExpression.js","src/Types/Expressions/PagingExpression.js","src/Types/Expressions/ParameterExpression.js","src/Types/Expressions/PropertyExpression.js","src/Types/Expressions/SimpleBinaryExpression.js","src/Types/Expressions/ThisExpression.js","src/Types/Expressions/Visitors/ExecutorVisitor.js","src/Types/Expressions/Visitors/ExpTreeVisitor.js","src/Types/Expressions/Visitors/ExpressionVisitor.js","src/Types/Expressions/Visitors/GlobalContextProcessor.js","src/Types/Expressions/Visitors/LambdaParameterProcessor.js","src/Types/Expressions/Visitors/LocalContextProcessor.js","src/Types/Expressions/Visitors/LogicalSchemaBinderVisitor.js","src/Types/Expressions/Visitors/ParameterProcessor.js","src/Types/Expressions/Visitors/ParameterResolverVisitor.js","src/Types/Expressions/Visitors/SetExecutableVisitor.js","src/Types/Expressions/index.js","src/Types/ItemStore.js","src/Types/ModelBinder.js","src/Types/Notifications/ChangeCollector.js","src/Types/Notifications/ChangeCollectorBase.js","src/Types/Notifications/ChangeDistributor.js","src/Types/Notifications/ChangeDistributorBase.js","src/Types/Query.js","src/Types/QueryBuilder.js","src/Types/QueryProvider.js","src/Types/Queryable.js","src/Types/RelatedEntityProxy.js","src/Types/ServiceOperation.js","src/Types/StorageProviderBase.js","src/Types/src/Types/StorageProviderLoader.js","src/Types/StorageProviders/modelBinderConfigCompiler.js","src/Types/Transaction.js","src/Types/Validation/EntityValidation.js","src/Types/Validation/EntityValidationBase.js","src/Types/index.js","src/index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","global","define","amd","g","window","self","this","acorn","_dereq_","_tokentype","_state","pp","Parser","prototype","checkPropClash","prop","propHash","options","ecmaVersion","computed","method","shorthand","key","name","undefined","type","String","value","kind","proto","raiseRecoverable","start","other","isGetSet","strict","init","get","set","parseExpression","noIn","refDestructuringErrors","startPos","startLoc","expr","parseMaybeAssign","types","comma","node","startNodeAt","expressions","eat","push","finishNode","afterLeftParse","inGenerator","isContextual","parseYield","validateDestructuring","shorthandAssign","trailingComma","parenL","potentialArrowAt","left","parseMaybeConditional","isAssign","checkPatternErrors","operator","eq","toAssignable","checkLVal","next","right","checkExpressionErrors","parseExprOps","question","test","consequent","expect","colon","alternate","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","prec","binop","_in","logical","logicalOR","logicalAND","op","buildBinary","sawUnary","prefix","startNode","update","incDec","argument","parseExprSubscripts","postfix","canInsertSemicolon","starstar","parseExprAtom","skipArrowSubscripts","input","slice","lastTokStart","lastTokEnd","parseSubscripts","base","noCalls","dot","object","property","parseIdent","bracketL","bracketR","callee","arguments","parseExprList","parenR","backQuote","tag","quasi","parseTemplate","canBeArrow","_super","inFunction","raise","_this","id","arrow","parseArrowExpression","regexp","parseLiteral","regex","pattern","flags","num","string","_null","_true","_false","raw","keyword","parseParenAndDistinguishExpression","elements","braceL","parseObj","_function","parseFunction","_class","parseClass","_new","parseNew","unexpected","end","parseParenExpression","val","innerStartPos","innerStartLoc","exprList","first","spreadStart","innerParenStart","ellipsis","parseParenItem","parseRest","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","preserveParens","par","expression","item","empty","meta","parseTemplateElement","elem","replace","cooked","tail","curElt","quasis","dollarBraceL","braceR","isPattern","properties","afterTrailingComma","isGenerator","star","parsePropertyName","parsePropertyValue","parseMaybeDefault","parseMethod","paramCount","params","keywords","reservedWordsStrictBind","reservedWords","initFunction","generator","oldInGen","parseBindingList","parseFunctionBody","toAssignableList","isArrowFunction","isExpression","body","oldInFunc","oldLabels","labels","parseBlock","isUseStrict","oldStrict","checkParams","nameHash","close","allowTrailingComma","allowEmpty","elts","elt","parseSpread","liberal","allowReserved","reservedWordsStrict","indexOf","semi","startsExpr","delegate","./state","./tokentype",2,"isInAstralSet","pos","isIdentifierStart","astral","nonASCIIidentifierStart","fromCharCode","astralIdentifierStartCodes","isIdentifierChar","nonASCIIidentifier","astralIdentifierCodes","__esModule",3,5,6,7,"strictBind","ecma5AndLessKeywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","RegExp","parse","parseExpressionAt","p","nextToken","tokenizer","plugins","_options","defaultOptions","_locutil","Position","SourceLocation","getLineInfo","_node","Node","TokenType","tokTypes","_tokencontext","TokContext","tokContexts","_identifier","_tokenize","Token","_whitespace","isNewLine","lineBreak","lineBreakG","version","./expression","./identifier","./location","./locutil","./lval","./node","./options","./parseutil","./statement","./tokencontext","./tokenize","./whitespace",4,"message","loc","line","column","err","SyntaxError","raisedAt","curPosition","locations","curLine","lineStart","_classCallCheck","instance","Constructor","TypeError","offset","cur","lastIndex","match","exec","index","col","sourceFile","source","_util","isBinding","last","arg","allowNonIdent","parseBindingAtom","rest","parseBindingListItem","param","checkClashes","has","./util","ranges","range","parser","directSourceFile","lastTokEndLoc",8,"getOptions","opts","opt","isArray","onToken","tokens","token","onComment","pushComment","array","block","text","endLoc","comment","sourceType","onInsertedSemicolon","onTrailingComma","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","program",9,"stmt","eatContextual","expectContextual","eof","insertSemicolon","semicolon","tokType","lastTokStartLoc","andThrow",10,"keywordRegexp","words","reserved","reservedStrict","containsEsc","loadPlugins","Math","max","lastIndexOf","split","context","initialContext","exprAllowed","inModule","skipLineComment","isKeyword","word","isReservedWord","extend","pluginConfigs","_name","plugin","parseTopLevel",11,"parseStatement","setStrict","loopLabel","switchLabel","isLet","skipWhiteSpace","skip","nextCh","charCodeAt","ident","declaration","topLevel","starttype","_var","_break","_continue","parseBreakContinueStatement","_debugger","parseDebuggerStatement","_do","parseDoStatement","_for","parseForStatement","parseFunctionStatement","_if","parseIfStatement","_return","parseReturnStatement","_switch","parseSwitchStatement","_throw","parseThrowStatement","_try","parseTryStatement","_const","parseVarStatement","_while","parseWhileStatement","_with","parseWithStatement","parseEmptyStatement","_export","_import","parseImport","parseExport","maybeName","parseLabeledStatement","parseExpressionStatement","isBreak","label","lab","pop","parseFor","_init","parseVar","declarations","parseForIn","_else","discriminant","cases","sawDefault","_case","_default","isCase","handler","_catch","clause","finalizer","_finally","isLoop","statementStart","allowStrict","isFor","decl","parseVarId","isStatement","allowExpressionBody","parseFunctionParams","parseClassId","parseClassSuper","classBody","hadConstructor","isMaybeStatic","parseClassMethod","superClass","_extends","parens","needsSemi","shouldParseExportStatement","specifiers","parseExportSpecifiers","local","nodes","exported","parseImportSpecifiers","imported",12,"isExpr","preserveSpace","override","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","braceIsBlock","prevType","_parent","curContext","updateContext","beforeExpr","out","statementParens",13,"tryCreateRegexp","src","throwErrorAt","codePointToString","isRhino","Packages","Object","toString","getToken","Symbol","iterator","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","ch","loop","nonASCIIwhitespace","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","assign","slash","readToken_mult_modulo_exp","size","tokentype","modulo","readToken_pipe_amp","bitwiseOR","bitwiseAND","readToken_caret","bitwiseXOR","readToken_plus_min","plusMin","readToken_lt_gt","bitShift","relational","readToken_eq_excl","equality","readRadixNumber","readString","str","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","validFlags","_match","Number","readInt","radix","len","total","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","template","inTemplate","octalStr","substr","escStart","esc",14,"kw","conf",15,"obj","propName","hasOwnProperty",16,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","noop","process","nextTick","args","Array","apply","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","containsField","field","cb","parsebool","b","d","_collectionRegex","Metadata","$data","metadata","container","Container","_getMaxValue","maxValue","MAX_VALUE","createTypeDefinition","propertySchema","definition","v","collectionBaseType","elementType","createReturnTypeDefinition","returnType","createProperty","entitySchema","nullable","required","maxLength","keys","propertyRefs","some","pr","concurrencyMode","ConcurrencyMode","createNavigationProperty","inverseProperty","createEntityDefinition","props","map","bind","navigationProps","navigationProperties","result","reduce","c","createEntityType","namespace","baseType","Entity","entityFullName","staticDefinition","openType","typeName","createEnumOption","isNaN","createEnumDefinition","enumSchema","members","createEnumType","enumFullName","Enum","underlyingType","createEntitySetProperty","entitySetSchema","contextSchema","entityType","entitySetType","indexBy","fieldName","pick","createContextDefinition","entitySets","es","createContextType","contextType","EntityContext","contextImportMethods","actionImports","functionImports","createMethodParameter","parameter","paramDef","applyBoundMethod","actionInfo","ns","typeDefinitions","parameters","forEach","isBound","bindingParameter","shift","filteredContextDefinitions","filter","ctx","setName","actions","filteredTypeDefinitions","methodFullName","methodImportInfo","action","processMetadata","createdTypes","serviceMethods","dataServices","schemas","schema","enumTypes","ct","complexTypes","entityTypes","et","m","defs","functions","entityContainer","contexts","srcPart","dp","JSON","stringify","join","resolveName","debug","console","log","resolveType","url","withCredentials","maxDataServiceVersion","autoCreateContext","contextName","odata_metadata_1","metadata_1","odatajs","MetadataHandler","prepareRequest","oData","error","edmMetadata","Edm","Edmx","metadataParser","isAssignableTo","factory","_createFactoryFunc","load","Promise","resolve","reject","serviceUrl","metadataUrl","serivceUri","requestData","requestUri","headers","data","metadataHandler","_appendBasicAuth","user","password","request","ctxType","config","cfg","oDataServiceHost","Authorization","__encodeBase64","chr1","chr2","chr3","enc1","enc2","enc3","enc4","b64array","base64","./metadata","odata-metadata","metadataHandler_1","jaydata_error_handler_1","jaydata_promise_handler_1","metadataHandler_2","ServiceParams","DynamicMetadata","service","serviceUri","callback","getParam","pHandler","PromiseHandler","_callback","createCallback","then","storeAlias","serviceName","addStore","isDefault","success","getPromise","initService","onReady","Exception","use","dynamicMetadata","paramValue","./metadataHandler","jaydata-error-handler","jaydata-promise-handler","hasOwn","toStr","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","copy","copyIsArray","clone","target","deep","__extends","__","create","captureStackTrace","_getStackTrace","Guard","requireValue","requireType","typeOrTypes","exception","intellisense","isNullOrUndefined","promiseHandlerBase_1","promise","deferred","settings","PromiseHandlerBase","createCallbackSettings","CallbackSettings","notify","compatibilityMode","onReject","reason","onResolveOrReject","PromiseNotImplemented","./promiseHandlerBase","always","fail","isRejected","isResolved","pipe","progress","state","defaultSuccessCallback","defaultNotifyCallback","defaultErrorCallback","defaultSettings","wrapCode","fn","dup","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","k","metacode","PrimitiveType","className","Binary","Boolean","Byte","Date","DateTimeOffset","Decimal","Double","Duration","Guid","Int16","Int32","Int64","SByte","Single","Stream","TimeOfDay","Geography","GeographyPoint","GeographyLineString","GeographyPolygon","GeographyMultiPoint","GeographyMultiLineString","GeographyMultiPolygon","GeographyCollection","Geometry","GeometryPoint","GeometryLineString","GeometryPolygon","GeometryMultiPoint","GeometryMultiLineString","GeometryMultiPolygon","GeometryCollection","MemberAttribute","defaultValue","parseAs","AttributeFunctionChain","mapArray","sourceField","EdmItemBase","parent","loadFrom","getPrototypeOf","getMembers","membername","getAttributeValue","invoke","Property","NavigationProperty","ReferentialConstraint","PropertyRef","Key","EntityType","ComplexType","Parameter","ReturnType","Invokable","Action","rt","Function","Member","EnumType","EntitySet","ActionImport","FunctionImport","EntityContainer","Schema","DataServices","edm","./metacode","isFunction","isUndefined","attributeName","registerMember","md","getMetadata","defineMetadata","getDecoratorValue","presentedValue","descriptor","decoratorValue","enumerable","configurable","isApplied","memberName","getMetadataKeys","getAttributeNames","steps","_i","ParseAttribute","defaultValueAttribute","parseAttribute","decorator","typeArgument","reflect-metadata","targetKey","targetDescriptor","IsUndefined","IsArray","IsConstructor","DecorateConstructor","IsObject","ToPropertyKey","DecoratePropertyWithoutDescriptor","DecoratePropertyWithDescriptor","metadataKey","metadataValue","OrdinaryDefineOwnMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","targetMetadata","__Metadata__","decorated","propertyKey","_Map","keyMetadata","MetadataKey","O","P","GetPrototypeOf","MetadataValue","ownKeys","parentKeys","_Set","hasKey","add","_a","_","x","IsSymbol","functionPrototype","prototypeProto","CreateMapPolyfill","Map","_keys","_values","_cache","cacheSentinel","_find","delete","splice","clear","thisArg","CreateSetPolyfill","Set","_map","CreateWeakMapPolyfill","WeakMap","_key","CreateUniqueKey","FillRandomBytes","buffer","random","GenRandomBytes","nodeCrypto","randomBytes","Uint8Array","crypto","getRandomValues","msCrypto","CreateUUID","UUID_SIZE","byte","toLowerCase","GetOrCreateWeakMapTable","rootKey","isNode","table","_WeakMap","__global","WorkerGlobalScope","description","homepage","author","dependencies","atob","btoa","jaydata-dynamic-metadata","jaydata-odatajs","xmldom","contributors","repository","engines","license","devDependencies","babel","babel-eslint","babel-plugin-add-module-exports","babel-preset-es2015","babel-register","babelify","browserify","browserify-derequire","browserify-shim","chai","del","google-closure-compiler","gulp","gulp-babel","gulp-browserify","gulp-closure-compiler","gulp-concat","gulp-derequire","gulp-eslint","gulp-footer","gulp-header","gulp-nightwatch","gulp-nuget-pack","gulp-rename","gulp-replace","gulp-sourcemaps","gulp-uglify","gulp-vinyl-zip","gulp-webserver","istanbul","jaguarjs-jsdoc","jsdoc","minimist","nightwatch","npm","selenium-standalone","vinyl-buffer","vinyl-source-stream","yargs","jquery","angular","Handlebars","kendo","ko","q","Ext","scripts","_interopRequireDefault","default","_index","_index2","_jaydataDynamicMetadata","../TypeSystem/index.js",17,"ContainerCtor","parentContainer","addPendingResolution","onResolved","pendingResolutions","addChildContainer","classNames","consolidatedClassNames","classTypes","mappedTo","IoC","inst","createInstance","mapType","aliasTypeOrName","realTypeOrName","_jaydataErrorHandler","aliasT","getType","realT","aliasPos","realPos","isPrimitiveType","_initializeJayData2","Integer","Float","Time","Day","SimpleBase","Geospatial","GeographyBase","GeometryBase","tPos","typeOrName","posT","doNotThrow","tp","getName","getTypes","ret","getTypeName","_typeof","fullName","toHexString","isTypeRegistered","unregisterType","getDefault","getIndex","resolveByIndex","registerType","nameOrNamesArray","factoryFunc","namesArray","parts","shortName","creatorFnc","annotate","typePos","pending","_converters","from","to","converters","convertTo","tType","eType","sourceTypeName","targetType","targetTypeName","registerConverter","sourceOrToConverters","toConverterOrFromConverters","fromConverter","targetName","sourceName","typeSystem","createOrGetNamespace","root","part","__namespace","ContainerInstance","_initializeJayData","./Extensions.js","./initializeJayData.js",18,"StringFunctions","startsWith","valueOf","endsWith","contains",19,"_TypeSystem","_TypeSystem2","Class","TraceBase","unshift","getDateFormat","warn","date","getHours","getMinutes","getSeconds","getMilliseconds","../TypeSystem.js",20,"Trace",21,"MemberDefinition","$C","_Extensions","_Container","_modelHolder","setModelContainer","modelHolder","defaults","openTypeDefaultPropertyName","openTypeDefaultType","openTypeDefaultValue","setGlobal","memberDefinitionData","definedClass","MemberTypes","writable","asFunction","dataType","originalType","originalElementType","MemberDefinitionCollection","ClassEngineBase","createPropertyDescriptor","classFunction","pd","storeProperty","retrieveProperty","createStorePropertyDescriptor","createGetMethod","tran","getProperty","createSetMethod","_value","setProperty","translateDefinition","memDef","addChildThunk","referencedType","childResolverThunks","resolveForwardDeclarations","memberDefinition","holder","resolverThunks","thunk","toJSON","memberDefinitionPrefix","clearCache","arrayCache","pubMapPropsCache","keyPropsCache","propByTypeCache","pubMapMethodsCache","pubMapPropNamesCache","asArray","getPublicMappedProperties","notMapped","getPublicMappedPropertyNames","getKeyProperties","getPublicMappedMethods","getPropertyByType","getMember","setMember","__enum","navProperty","complexProperty","baseClass","instanceDefinition","classDefinition","defineEx","baseClasses","Base","classNameParts","shortClassName","models","classFunctionBuilder","buildType","_classNameParts","_root","innerNS","baseCount","baseTypes","inheritedTypeProcessor","bodyBuilder","bases","mixin","propagation","propagateTo","memberDefinitions","$constructor","inheritsFrom","staticDefs","staticDefinitions","buildMember","openTypeDefinition","buildStaticMembers","classConstructor","openTypePropertyName","definedOpenTypeMember","getMemberDefinition","memberType","buildInstanceMembers","mixins","buildInstanceMixins","__class","addMethod","addProperty","propertyDescriptor","origGet","origSet","addField","buildMethod","classMember","buildProperty","__setPropertyfunctions","withoutGetSetMethod","pdGetMethod","pdSetMethod","memberCollectionName","memberListDefinition","copyMembers","il","msg","logMessage","mixinList","propagations","buildInstancePropagation","buildInstanceMixin","typeObj","memberDefs","itemName","ContainerClass","createContainer","backingFieldName","getterOrType","setterOrGetter","setter","_type","_getter","_setter","propDef","storeOnObject","addMember","isClassMember","describeField","from$data.Object","ConstructorParameter","paramIndex","createCallbackSetting","callBack","defaultSetting","setting","createCtorParams","indexes","thisObj","paramArray","writePropertyValues","writeProperties","prototypeProperty","defines","defineProperties","writeProperty","member","debugWith","cArgs","fdebug","./Container.js","_process",22,"_btoa","_btoa2","bufferOrArray","eval","Blob","createFromHexString","j","toBase64","toArray","toUpperCase","toDataURL","$data.String","blob","$data.Array","$data.Number","packIEEE754","reverse","$data.Boolean","req","XMLHttpRequest","open","URL","createObjectURL","send","response","ArrayBuffer",23,"POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_VALUE","$data.Date","parseFromString","matches","time","metrics","ms","parseFromDate","getFullYear","getMonth","getDate","day","ebits","fbits","ln","bits","bytes","bias","pow","abs","min","floor","LN2","round","substring","unpackIEEE754","NaN","IEEE754","toISOString","$data.ObjectID","$data.Function","proxyConverter","defaultConverter",24,"Edm_Boolean","Edm_Binary","Edm_DateTime","Edm_DateTimeOffset","Edm_Time","Edm_TimeOfDay","Edm_Date","Edm_Duration","Edm_Decimal","Edm_Float","Edm_Single","Edm_Double","Edm_Guid","Edm_Int16","Edm_Int32","Edm_Int64","Edm_Byte","Edm_SByte","Edm_String","Edm_GeographyPoint","Edm_GeographyLineString","Edm_GeographyPolygon","Edm_GeographyMultiPoint","Edm_GeographyMultiLineString","Edm_GeographyMultiPolygon","Edm_GeographyCollection","Edm_GeometryPoint","Edm_GeometryLineString","Edm_GeometryPolygon","Edm_GeometryMultiPoint","Edm_GeometryMultiLineString","Edm_GeometryMultiPolygon","Edm_GeometryCollection","oDataEdmMapping","$data.Byte","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.DateTimeOffset","$data.Time","$data.Day","$data.Duration","$data.Blob","$data.Integer","$data.Int32","$data.GeographyPoint","$data.GeographyLineString","$data.GeographyPolygon","$data.GeographyMultiPoint","$data.GeographyMultiLineString","$data.GeographyMultiPolygon","$data.GeographyCollection","$data.GeometryPoint","$data.GeometryLineString","$data.GeometryPolygon","$data.GeometryMultiPoint","$data.GeometryMultiLineString","$data.GeometryMultiPolygon","$data.GeometryCollection","$data.Guid",25,"crs","defaultCrs","validateGeoJSON","disableSRID","strData","lparenIdx","registered","stringifyToUrl","geoData","validMembers","_ret","getSRID","buildArray","coordinates","geoType","isValid","lon","lat","longitude","latitude","lng","values","point","tl","tr","bl","br","topLeft","bottomRight","topRight","bottomLeft","polygon","rings","polyPoints","pairs","polygons","geometries","geometry",26,"y",27,28,"parseGuid","NewGuid","createGuid","guid","CHARS","guidString","chars","uuid",29,30,"ObjectID","mongoDBDriver",31,"_Types","_Trace","_Logger","_SimpleBase","_Geospatial","_Geography","_Geometry","_Guid","_Blob","_EdmTypes","_Converter","./Trace/Logger.js","./Trace/Trace.js","./TypeSystem.js","./Types/Blob.js","./Types/Converter.js","./Types/EdmTypes.js","./Types/Geography.js","./Types/Geometry.js","./Types/Geospatial.js","./Types/Guid.js","./Types/SimpleBase.js","./Types/Types.js",32,"_interopRequireWildcard","newObj","_initializeJayDataClient","_initializeJayDataClient2","_acorn","_package","pkg","timeEnd","versionNumber","Acorn","../../package.json","./initializeJayDataClient.js",33,"_data_handler",34,"isAuthorized","access","sets","clbWrapper","pHandlerResult","getAccessBitmaskFromPermission","Access","None","Create","Read","Update","Delete","DeleteBatch","Execute",35,"ajax","clb","../../TypeSystem/index.js",36,"Ajax",37,"WinJS","xhr","dataTypes","json","accept","convert","html","xml","dataTypeContext","Accept","successClb","errorClb","progressClb","responseText",38,"jQuery",39,"Authentication","AuthenticationBase","configuration","Authenticated","Login","callbacks","Logout","CreateRequest",40,41,"Username","Password","origBeforeSend","beforeSend","setRequestHeader",42,"Url_code","type_code","scope","Url_token","type_token","access_token","app_id","provider","stateCallbacks","_processRequestToken","andChar","verification_data","abort",43,"Event","EventSubscriber","sender","detachHandler","list","subscriberList","attach","detach","fire","eventData","snder","snd","subscriber","ex","fireCancelAble","EventData","eventName","PropertyChangeEventData","propertyName","oldValue","newValue","PropertyValidationEventData","errors","cancel","initData","newInstanceOptions","thisType","__copyPropertiesToInstance","setDefaultValues","typeMemDefs","memDefNames","memberDef","Fixed","converter","entityBuilder","changedProperties","entityState","Id","Name","equals","entity","entityPk","propertyChanging","monitorChanges","_propertyChanging","propertyChanged","_propertyChanged","propertyValidationError","_propertyValidationError","origValue","Validation","ValidateEntityField","errorEventData","isValidated","EntityState","Unchanged","Modified","_setPropertyChanged","Transaction","loadItemProperty","that","storeToken","ValidationErrors","ValidateEntity","ValidationError","resetChanges","_changedProperties","remove","ItemStore","EntityInstanceRemove","save","EntityInstanceSave","refresh","EntityInstanceRefresh","getFieldUrl","_getContextPromise","EntityInheritedTypeProcessor","defaultValues","dv","addEventListener","delegateName","removeEventListener","raiseEvent","getFieldNames","_def","keyFields","keyProp","implementation",44,"defaultMode","AllChanged","memDefs","KeepChanges","Default",45,"defaultDatabaseName","enableRelatedEntityReadMethods","relatedEntityReadMethodPrefix","relatedEntityProxyPrefix","ComplexTypes","Enums","Associations","LogicalType","LogicalTypeName","PhysicalType","PhysicalTypeName","EventHandlers","TableName","TableOptions","ContextType","Roles","initParam","From","FromType","FromMultiplicity","FromPropertyName","To","ToType","ToMultiplicity","ToPropertyName","Association","storageProviderCfg","ContextRegister","queryCache","databaseName","lazyLoad","trackChanges","_entitySetReferences","_storageModel","_isOK","origSuccessInitProvider","_successInitProvider","errorOrContext","getStorageModel","providerList","_initStorageModelSync","_initializeEntitySets","StorageProviderLoader","providerType","storageProvider","setContext","stateManager","EntityStateManager","_storageModelCache","_applyRelatedEntityMethodsToTypes","_initializeStorageModel","_applyRelatedEntityMethodsToContext","checkPermission","_initializeStore","ready","beginTransaction","readParam","isWrite","tables","_beginTran","_isReturnTransaction","transaction","_applyTransaction","isReturnTransaction","getDataType","memDef_dataType","ctor","storageModel","ItemName","sm","tableName","tableOptions","eventHandlers","_initializeActions","initializeStore","_memDefArray","itemResolvedDataType","StorageModel","_convertLogicalTypeNameToPhysical","roles","indices","beforeCreate","beforeRead","beforeUpdate","beforeDelete","afterCreate","afterRead","afterUpdate","afterDelete","dbEntityInstanceDefinition","memDefResolvedDataType","supportedDataTypes","_build_EnumDefinition","_buildDbType_navigationPropertyComplite","_buildDbType_Collection_OneManyDefinition","_buildDbType_ElementType_OneManyDefinition","fields","referealResolvedType","_buildDbType_ElementType_OneOneDefinition","_buildDbType_addComplexTypePropertyDefinition","_buildDbType_modifyInstanceDefinition","dbEntityClassDefinition","_buildDbType_generateConvertToFunction","_buildDbType_modifyClassDefinition","esDef","actionKeys","actionName","actionDef","refStorageModel","refMemDefs","pubDefs","refMemDef","_addNavigationPropertyDefinition","complexType","_createComplexElement","refereedType","refereedStorageModel","associationType","association","_addAssociationElement","refereedMemberDefinition","associationName","fromType","fromMultiplicity","fromPropName","toType","toMultiplicity","toPropName","converterGroups","fieldConverter","createEnumConverter","converterGroup","onReadyFunction","getEntitySetFromElementType","executeQuery","queryable","query","Query","defaultType","returnTransaction","executeQuerySuccess","executeQueryError","getEntitySets","authorizedFn","readyFn","QueryCache","isInCache","rawDataList","callbackFn","nodeType","Expressions","ExpressionType","BatchDelete","isCacheable","addToCache","buildResultSet","QueryResultModifier","successResult","Find","Count","Some","Every","First","__count","totalCount","_buildContinuationFunction","batchExecuteQuery","queryableOptions","cbWrapper","methodOperationMappings","count","single","every","removeAll","methodFrameMappings","returnFunc","qOptions","queryOption","Queryable","entityContext","_checkOperation","executableQueries","frameExpressionName","FrameOperator","queryExpression","preparator","createQueryExpressionCreator","Visit","event","createQueryable","queryResults","supportedContextOperation","batchExecuteQueryExpression","createBatchExecuteQueryExpression","results","batchResult","hasError","errorValue","readIterator","queries","iteratorCallback","itTransaction","lastTran","saveChanges","reset","changedEntities","trackedEntities","skipItems","additionalEntities","entityCachedItem","sModel","skipSave","changeStoredProperty","pMemDef","multiplicity","processEntityTypeBeforeEventHandler","smPhyMemDefs","ism","navProp","navPropertyName","connectedDataList","dependentOn","discoverDependentItemEntityState","entitySet","temp","additionalDependentOn","Added","memDefType","isDependentProperty","it","createAll","modifyAll","Deleted","deleteAll","cancelEvent","innerCallback","_postProcessSavedItems","ies","getOwnPropertyNames","cmd","cmdAll","ed","all","im","ix","onbeforeCreate","onbeforeUpdate","onbeforeDelete","processEntityTypeAfterEventHandler","onafterCreate","onafterUpdate","onafterDelete","bulkInsert","datas","currentEntitySet","entitySetName","actualEntitySet","ChangeCollector","Notifications","ChangeCollectorBase","processChangedData","oes","physicalData","forEachEntitySet","isSingleSide","associations","assoc","filterFunc","filterParams","memDefKey","getTraceString","logInfo","resolveBinaryOperator","frameType","resolveUnaryOperator","resolveFieldOperation","operation","resolveSetOperations","resolveTypeOperations","resolveContextOperations","_generateServiceOperationQueryable","functionName","returnEntitySet","tempOperation","generateServiceOperation","mode","EntityWrapper","getEntity","attachOrGet","addMany","entities","collection","keyDef","esName","newMemberName","_relatedEntityGetMethod","memberElementType","_createRelatedEntityProxyClass","proxyClassName","RelatedEntityProxy","navigation","keyValue","proxyClass","keyV","serviceMethod","lastParam","boundItem","virtualEntitySet","paramConstExpression","createConstantExpression","ec","createEntityContextExpression","memberdef","createServiceOperationExpression","createMemberInfoExpression","isTerminated","_runQuery","__storageModelCache",46,"EntitySchemaConfig","entitySetState","created","defined","active","collectionName","createNew","addNew","_item","on_ready","_trackEntity","current","EntityAttachMode","attachMode","existsItem","trackedEnt","idx","Detached","getter","_expression","createEntitySetExpression",47,48,49,50,"createEnum","enumType","enumDefinition","__enumType","getEnumDef","enumMember","isValueCalculation","hasIndex","enumDef","enumValA","enumName","enumValO","sort","enumOptions","enumVal","enumClass",51,"ExpressionNode","items","ArrayLiteral",52,"Call",53,"scopeContext","lambdaParams","resolver","errorMessage","errorDetails","ParserBuild","Esprima","AST","ASTParser","parseCode","Build2","tree","createExpression","ParserExpressionStatement","ParserBlockStatement","ParserReturnStatement","ParserMemberExpression","PropertyExpression","ConstantExpression","ParserIdentifier","ParserParameter","LambdaParameterReference","ParameterReference","ParserObjectExpression","ParserProperty","ObjectLiteralExpression","ParserArrayExpression","ArrayLiteralExpression","ObjectFieldExpression","ParserArrowFunctionExpression","ParserFunctionExpression","parameterResolutionCompatibility","LambdaParameter","owningFunction","FunctionExpression","ParameterExpression","ParserLogicalExpression","ParserBinaryExpression","ParserOperators","==","expressionType","Equal","===","EqualTyped","!=","NotEqual","!==","NotEqualTyped",">","GreaterThen",">=","GreaterThenOrEqual","<=","LessThenOrEqual","<","LessThen","&&","And","||","Or","&","AndBitwise","|","OrBitwise","+","Add","-","Subtract","/","Divide","%","Modulo","*","Multiply","[","ArrayIndex","in","In","ParserUnaryOperators","arity","Positive","operand","Negative","++true","Increment","--true","Decrement","++false","!","Not","--false","ParserUnaryExpression","UnaryExpression","ParserUpdateExpression","SimpleBinaryExpression","ParserThisExpression","ThisExpression","ParserLiteral","ParserCallExpression","CallExpression",54,"Constant",55,"EntityExpressionVisitor","compile","findContext","skipExists","skipSize","take","pageSize","append","VisitPagingExpression","Take","amount","Skip","constExp","createPagingExpression",56,"associationInfo","AssociationInfo","../../../TypeSystem/index.js",57,"Code",58,"ExpressionVisitor","VisitBinary","refExpression","constExpr","memInfo","selector","MemberInfoExpression","fieldType","constExprType","resultExp","operatorResolution","createSimpleBinaryExpression","VisitUnary","createUnaryExpression","VisitParameter","createEntityExpression","lambdaParameters","lambda","VisitThis","createQueryParameterExpression","queryParameters","VisitFunction","VisitCall","exp","EntitySetExpression","FrameOperationExpression","getJSON","setExpr","res","frameTypeFactory","QueryParameterExpression","argValues","EntityFieldExpression","EntityFieldOperationExpression","createEntityFieldOperationExpression","_resolveFunctionArguments","createFrameOperationExpression","EntityExpression","createEntityFunctionOperationExpression","EntityContextExpression","createContextFunctionOperationExpression","VisitProperty","memberDefinitionExp","storageField","createEntityFieldExpression","assocInfo","setExpression","createAssociationInfoExpression","ee","createComplexTypeExpression","ComplexTypeExpression","memDefExp",59,"dt","Com",60,61,"ServiceOperationExpression","memdef",62,"lambdaTypes","canVisit","visitorName","VisitToArrayExpression","createToArrayExpression","VisitForEachExpression","createForEachExpression","VisitMemberInfoExpression","VisitSingleExpression","createSingleExpression","VisitFirstExpression","createFirstExpression","VisitSomeExpression","createSomeExpression","VisitFindExpression","createFindExpression","VisitEveryExpression","createEveryExpression","VisitCountExpression","createCountExpression","VisitBatchDeleteExpression","createBatchDeleteExpression","VisitBatchExecuteQueryExpression","newQueries","equal","VisitObjectLiteralExpression","newValues","ofe","createObjectLiteralExpression","VisitObjectFieldExpression","newExpression","createObjectFieldExpression","VisitIncludeExpression","createIncludeExpression","VisitUnaryExpression","resolution","VisitSimpleBinaryExpression","VisitEntityContextExpression","VisitCodeExpression","VisitComplexTypeExpression","VisitEntityExpression","VisitEntityFieldExpression","VisitEntityFieldOperationExpression","VisitParametricQueryExpression","createParametricQueryExpression","VisitEntitySetExpression","VisitInlineCountExpression","createInlineCountExpression","VisitFilterExpression","createFilterExpression","VisitProjectionExpression","createProjectionExpression","projectionAs","VisitOrderExpression","createOrderExpression",63,"EntityField",64,"EntityFieldOperation",65,"CodeExpression","ParametricQueryExpression","storage_type","AssociationInfoExpression",66,"monitorDefinition","methodName","VisitExpressionNode","expressionTypeName","MonitorExpressionNode","MutateExpressionNode",67,"resultType","Filter","InlineCount","BatchExecuteQuery","subMember","ForEach","ToArray",68,"FrameOperation","EntityFunctionOperation","ContextFunctionOperation",69,"Include",70,"MemberInfo",71,"nType","OrderBy",72,"ParametricQuery",73,"Projection",74,"VisitServiceOperationExpression","jsCodeTree","createCodeParser","constantResolver","createConstantValueResolver","parameterProcessor","createParameterResolverVisitor","code2entity","createCodeToEntityConverter","entityExpression",75,"QueryParameter",76,77,"ServiceOperation",78,"_isLambdaParam","_isParam","paramContext","_isParamRoot","paramsName","Build","expNode","BuildMethodCall","BuildMember","BuildEquality","BuildBinary","BuildArrayAccess","BuildUnary","BuildIncDec","BuildNewExpression","BuildLiteral","BuildDecision","BuildVariable","BuildBoolLiteral","ExpressionNodeTypes","NewExpressionNode","LiteralExpressionNode","MEMBERACCESS","subType","operationName","missingParameterName","VariableExpressionNode","jsonAssign","JsonAssignExpressionNode","JSONASSIGN","MemberAccessExpressionNode","second","UnaryExpressionNode","IncDecExpressionNode","BinaryExpressionNode","EqualityExpressionNode","DecisionExpressionNode","third","MethodcallExpressionNode","argNodes","ArrayAccessExpressionNode",79,"jsonify","Variable","MemberAccess","New","This","ObjectLiteral","ObjectField","Unknown","EntityMember","EntityBinary","ComplexEntityField","OrderByDescending","IndexedPhysicalAnd","IndexedLogicalAnd","IndexedLogicalOr","IndexedLogicalIn","BinaryOperator","binaryOperators","getOperator","unaryOperators","timeIt","iterations","OperatorTypes","UNARY","INCDEC","DECISION","METHODCALL","NEW","ARRAYACCESS","UNKNOWN","executable","_expressionType",80,"paramStrings","bodyString",81,82,"namesAndValues",83,84,85,86,87,88,"ExpTreeVisitor","VisitVariable","eNode","VisitMember","chain","GetMemberChain","operandValue","valueType","VisitIncDec","suffix","leftValue","rightValue","VisitEquality","VisitDecision","VisitMethodCall","VisitArray","VisitArrayAccess","arrayNode","indexNode",89,"_deep","LITERAL","VisitLiteral","VARIABLE","BINARY","EQUALITY","VisitNew","VisitJsonAssign","eNodes","ok","memberAccess",90,"VisitConstant","VisitObjectLiteral","VisitObjectField","VisitArrayLiteral","VisitEntityContext","createArrayLiteralExpression",91,"ParameterProcessor","canResolve","paramExpression","resultValue","paramsObject","globalResolver","createGlobalContextProcessor","paramResolver",92,"lambdaParameterTypeInfos","paramIndices","fnParams","lambdaParamType","createParameterExpression",93,"GlobalContextProcessor","evalMethod",94,"binder","mem","memberResolver","createPropertyExpression",95,96,"lambdaParamCache","paramCache","allLocal","paramNode","lambdaParam","isExecutable","convertToValue","visitors",97,"firstMember","isLambdaParam","isLocalParam",98,"_ExpressionNode","_ArrayLiteralExpression","_CallExpression","_CodeParser","_ConstantExpression","_FunctionExpression","_ObjectFieldExpression","_ObjectLiteralExpression","_PagingExpression","_ParameterExpression","_PropertyExpression","_SimpleBinaryExpression","_ThisExpression","_ExpressionVisitor","_ParameterProcessor","_GlobalContextProcessor","_LocalContextProcessor","_LambdaParameterProcessor","_ParameterResolverVisitor","_LogicalSchemaBinderVisitor","_ExpTreeVisitor","_SetExecutableVisitor","_ExecutorVisitor","_ExpressionBuilder","_AssociationInfoExpression","_CodeExpression","_CodeToEntityConverter","_ComplexTypeExpression","_EntityContextExpression","_EntityExpression","_EntityExpressionVisitor","_ExpressionMonitor","_EntityFieldExpression","_EntityFieldOperationExpression","_EntitySetExpression","_FrameOperationExpression","_FilterExpression","_IncludeExpression","_MemberInfoExpression","_OrderExpression","_ParametricQueryExpression","_ProjectionExpression","_QueryExpressionCreator","_QueryParameterExpression","_RepresentationExpression","_ServiceOperationExpression","_ContinuationExpressionBuilder","./ArrayLiteralExpression.js","./CallExpression.js","./CodeParser.js","./ConstantExpression.js","./ContinuationExpressionBuilder.js","./EntityExpressions/AssociationInfoExpression.js","./EntityExpressions/CodeExpression.js","./EntityExpressions/CodeToEntityConverter.js","./EntityExpressions/ComplexTypeExpression.js","./EntityExpressions/EntityContextExpression.js","./EntityExpressions/EntityExpression.js","./EntityExpressions/EntityExpressionVisitor.js","./EntityExpressions/EntityFieldExpression.js","./EntityExpressions/EntityFieldOperationExpression.js","./EntityExpressions/EntitySetExpression.js","./EntityExpressions/ExpressionMonitor.js","./EntityExpressions/FilterExpression.js","./EntityExpressions/FrameOperationExpression.js","./EntityExpressions/IncludeExpression.js","./EntityExpressions/MemberInfoExpression.js","./EntityExpressions/OrderExpression.js","./EntityExpressions/ParametricQueryExpression.js","./EntityExpressions/ProjectionExpression.js","./EntityExpressions/QueryExpressionCreator.js","./EntityExpressions/QueryParameterExpression.js","./EntityExpressions/RepresentationExpression.js","./EntityExpressions/ServiceOperationExpression.js","./ExpressionBuilder.js","./ExpressionNode2.js","./FunctionExpression.js","./ObjectFieldExpression.js","./ObjectLiteralExpression.js","./PagingExpression.js","./ParameterExpression.js","./PropertyExpression.js","./SimpleBinaryExpression.js","./ThisExpression.js","./Visitors/ExecutorVisitor.js","./Visitors/ExpTreeVisitor.js","./Visitors/ExpressionVisitor.js","./Visitors/GlobalContextProcessor.js","./Visitors/LambdaParameterProcessor.js","./Visitors/LocalContextProcessor.js","./Visitors/LogicalSchemaBinderVisitor.js","./Visitors/ParameterProcessor.js","./Visitors/ParameterResolverVisitor.js","./Visitors/SetExecutableVisitor.js",99,"itemStoreConfig","aliases","contextTypes","resetStoreToDefault","addItemStoreAlias","storeConfigs","stores","_setTypeStoreConfig","contextFactoryOrToken","contextPromise","preContext","_getDefaultItemStoreFactory","_setStoreAlias","_getStoreAlias","alias","_getStoreContext","aliasOrToken","nullIfInvalid","_getStoreEntitySet","instanceOrType","initStoreConfig","storeConfig","contextDef","inMemoryType","_storeToken","contextOrAlias","_resolveFromContext","hint","_getSaveMode","keepStore","_getKeyObjectFromEntity","read","loadedEntity","readAll","EntityTypeReadAll","EntityTypeRead","EntityTypeRemoveAll","EntityTypeRemove","EntityTypeGet","EntityTypeSave","EntityTypeAddMany","itemCount","EntityTypeItemCount","EntityTypeQuery","takeFirst","EntityTypeTakeFirst","setStore","EntityTypeSetStore","singleParam","_findByIdQueryable","predicate","thisArgs","initDatas","defStoreConfig","dataSource","ds","parsedApiUrl","apiUrl","keysProps","keyDefs","modelBinderConfig","$type","$item","navProps","ItemStoreClass","def","definedBy","MemberWrapper","setKey","setComputed","setRequired","setNullable","changeDefinition","attr",100,"providerName","references","providerConfiguration","modelBinderOptimization","RegisteredStorageProviders","_deepExtend","_finalize","_buildSelector","$selector","path","iter","_buildKey","typeIndex","$source","build","$value","fromDb","$keys","keycacheName","itemForKey","resolvedType","isEntityType","isPrimitive","openTypeProperty","entityTypeIndex",101,"buildData","element","resObj","enumerableMemDefCollection",102,"entityContextData","entityData","Distrbutor","distributeData","ChangeDistributorBase",103,"broadcastUrl","succes",104,"collectorData",105,"ModelBinder",106,"_fragments","selectedFragment","_binderConfig","_binderConfigPropertyStack","selectTextPart","getTextPart","addText","textParticle","addParameter","selectModelBinderProperty","popModelBinderProperty","resetModelBinderProperty","addKeyField",107,"requiresExpressions","resultHandler",108,"rootExpression","createCodeExpression","expressionSource","FilterExpression","where","projection","codeExpression","select","onResult","countExpression","iteratorFunc","forEachExpression","onResult_items","toArrayExpression","toLiveArray","doAction","successFunc","prev","filterPredicate","singleExpression","someExpression","everyExpression","takeExp","order","orderString","orderByDescending","orderBy","firstExpression","find","supportedSetOperations","findExpression","include","include2","includeExp","withInlineCount","inlineCountExp","withCount","batchDeleteExpression","toTraceString","invokable",109,"entityKeyObject","navigationProperty","_entityKeyObject","_navigationProperty","_context","_ctxFactory","proxyChains","_chainToArray","firstProxy",110,"propertyDef","argObj","paramConfig",111,"storageProviders","DbCreationType","Merge","DropTableIfChanged","DropTableIfChange","DropAllExistingTables","ErrorIfChange","DropDbIfChange","schemaConfiguration","providers","loadRawData","buildIndependentBlocks","changedItems","edgesTo","edgesFrom","currentDependency","ixDependendOn","referredBy","independentBlocks","currentBlock","cbix","dependentNodes","_buildPagingMethod","continuation","ContinuationExpressionBuilder","continuationResult","buildDbType_modifyInstanceDefinition","buildDbType_copyPropertyDefinition","propertyDefinition","refProp","cPropertyDef","buildDbType_createConstrain","foreignType","keyPropertyName","constrain","addToEntityDef","foreignPropName","keyProperties","constraint","dependentMemDef","navigationPropertyName","buildDbType_generateConvertToFunction","logicalEntity","dbInstance","complexInstance","cmpType","supportedFieldOperations","allowedIn","allowedType","supportedBinaryOperators","mapTo","supportedUnaryOperators","not","makePhysicalTypeDefinition","entityDefinition","supportedAutoincrementKeys","onRegisterProvider","registerProvider","getProvider","isSupported",112,"supported","indexedDB","webkitIndexedDB","mozIndexedDB","msIndexedDB","location","href","localStorage","scriptLoadTimeout","scriptLoadInterval","npmModules","indexedDb","InMemory","LocalStore","mongoDB","webApi","sqLite","webSql","storm","ProviderNames","cacheKey","_fallbackCache","selectedProvider","currentProvider","getVirtual","loadProvider","loadNpmModule","mappedName","getUrl","loader","loadScript","document","createElement","loadScriptElement","successful","jaydataScriptMin","querySelector","jaydataScript","getHttpRequest","ActiveXObject","oXmlHttp","onreadystatechange","readyState","status","watcher","iteration","loadInterval","head","getElementsByTagName","documentElement","script","appendChild","ceil","virtualProviders","fallbacks","StorageProviderLoaderBase",113,"includes","_includes","projectionExpression","selectorContext","hasIncludeProjectionExpression","includePath","includeProjectionExpression","VisitFrameOperationExpression","opDef","ProjectionExpression","paramCounter","visitor","modelBinder","FindProjectionVisitor","_inculdes","visitorContext","VisitAssociationInfoExpression","oDataProvider","_query","_isoDataProvider","depth","_defaultModelBinder","builder","createqueryBuilder","VisitExpression","VisitConstantExpression","projVisitor","createFindProjectionVisitor","projContext","DefaultSelection","_addPropertyToModelBinderConfig","arrayElementType","_addComplexTypeProperties","allIncludes","custom","excludeDeepInclude","incName","tmpStorageModel","hasProjection","VisitEntityAsProjection","mapping","currentInclude","inc","tmpIncludes","tmpDepth","of",114,"_objectId","getTime","oncomplete","onerror",115,"validators","definedValue","customValidator","minValue","minLength","_getGroupValidations","validations","validator","EntityValidationBase","valueNotSet","fieldValidate","getValidationValue","validationName","convertableValidation","typeToConvert","getValidationMessage","defaultMessage","eMessage","createValidationError","supportedValidations","Defaults","$data.Object","validationTypeName","validatonGroup","validation","EntityValidation",116,"Message","PropertyDefinition","Type",117,"_index3","_EntityValidationBase","_EntityValidation","_ChangeDistributorBase","_ChangeCollectorBase","_ChangeDistributor","_ChangeCollector","_Transaction","_Access","_Entity","_Enum","_RelatedEntityProxy","_EntityContext","_QueryProvider","_ModelBinder","_QueryBuilder","_Query","_Queryable","_EntitySet","_EntityState","_EntityAttachModes","_EntityStateManager","_ItemStore","_StorageProviderLoader","_StorageProviderBase","_ServiceOperation","_EntityWrapper","_jQueryAjaxWrapper","_WinJSAjaxWrapper","_ExtJSAjaxWrapper","_AjaxStub","_modelBinderConfigCompiler","_AuthenticationBase","_Anonymous","_FacebookAuth","_BasicAuth","_jaydataPromiseHandler","./Access.js","./Ajax/AjaxStub.js","./Ajax/ExtJSAjaxWrapper.js","./Ajax/WinJSAjaxWrapper.js","./Ajax/jQueryAjaxWrapper.js","./Authentication/Anonymous.js","./Authentication/AuthenticationBase.js","./Authentication/BasicAuth.js","./Authentication/FacebookAuth.js","./Entity.js","./EntityAttachModes.js","./EntityContext.js","./EntitySet.js","./EntityState.js","./EntityStateManager.js","./EntityWrapper.js","./Enum.js","./Expressions/index.js","./ItemStore.js","./ModelBinder.js","./Notifications/ChangeCollector.js","./Notifications/ChangeCollectorBase.js","./Notifications/ChangeDistributor.js","./Notifications/ChangeDistributorBase.js","./Query.js","./QueryBuilder.js","./QueryProvider.js","./Queryable.js","./RelatedEntityProxy.js","./ServiceOperation.js","./StorageProviderBase.js","./StorageProviderLoader.js","./StorageProviders/modelBinderConfigCompiler.js","./Transaction.js","./Validation/EntityValidation.js","./Validation/EntityValidationBase.js","jaydata/core","_index5","_index7","./JaySvcUtil/index.js","./TypeSystem/index.js","./Types/Expressions/index.js","./Types/index.js","interopRequire"],"mappings":"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AA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,KAAA,IAAA,IAAA,IAAA,GAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,MAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAAA,MAAA,GAAA,KAAA,GAAA,IAAA,EAAA,KAAA,MAAA,KACAG,GAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,E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","file":"jaydata.min.js","sourcesContent":["﻿// JayData 1.5.1 CTP\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(){\r\n\t\r\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar pp = _state.Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n  var key = prop.key;var name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return;\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raiseRecoverable(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === _tokentype.types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield();\n\n  var validateDestructuring = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n    validateDestructuring = true;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  if (this.eat(_tokentype.types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(_tokentype.types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === _tokentype.types.logicalOR || this.type === _tokentype.types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\npp.buildBinary = function (startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      expr = undefined;\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === _tokentype.types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");else sawUnary = true;\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr);\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(_tokentype.types.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);else return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (this.eat(_tokentype.types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(_tokentype.types.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(_tokentype.types.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(_tokentype.types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === _tokentype.types.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refDestructuringErrors) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case _tokentype.types._super:\n      if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n\n    case _tokentype.types._this:\n      var type = this.type === _tokentype.types._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _tokentype.types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== _tokentype.types.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case _tokentype.types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case _tokentype.types.num:case _tokentype.types.string:\n      return this.parseLiteral(this.value);\n\n    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:\n      node = this.startNode();\n      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _tokentype.types.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case _tokentype.types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case _tokentype.types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _tokentype.types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case _tokentype.types._new:\n      return this.parseNew();\n\n    case _tokentype.types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(_tokentype.types.parenL);\n  var val = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== _tokentype.types.parenR) {\n      first ? first = false : this.expect(_tokentype.types.comma);\n      if (this.type === _tokentype.types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === _tokentype.types.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(_tokentype.types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction) this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === _tokentype.types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(_tokentype.types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(_tokentype.types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n  if (this.eat(_tokentype.types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");else this.raiseRecoverable(start, \"setter should have exactly one param\");\n    }\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) || this.inGenerator && prop.key.name == \"yield\") this.raiseRecoverable(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_tokentype.types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(_tokentype.types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode(),\n      oldInGen = this.inGenerator;\n  this.inGenerator = isGenerator;\n  this.initFunction(node);\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);\n  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n  this.parseFunctionBody(node, false);\n  this.inGenerator = oldInGen;\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  var oldInGen = this.inGenerator;\n  this.inGenerator = false;\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  this.inGenerator = oldInGen;\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldLabels = this.labels;\n    this.inFunction = true;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction) {\n    this.checkParams(node);\n  }\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp.checkParams = function (node) {\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) {\n    this.checkLVal(node.params[i], true, nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this.lastTokStart;\n      }\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    var elt = undefined;\n    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === _tokentype.types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    if (!liberal && this.inGenerator && this.value === \"yield\") this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(_tokentype.types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n},{\"./state\":10,\"./tokentype\":14}],2:[function(_dereq_,module,exports){\n// Reserved word lists for various dialects of the language\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierChar = isIdentifierChar;\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  7: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞭꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣣ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 287, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 1288, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 168, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 3617, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\n\nvar _state = _dereq_(\"./state\");\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\n_dereq_(\"./location\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\n\nvar _options = _dereq_(\"./options\");\n\nexports.defaultOptions = _options.defaultOptions;\n\nvar _locutil = _dereq_(\"./locutil\");\n\nexports.Position = _locutil.Position;\nexports.SourceLocation = _locutil.SourceLocation;\nexports.getLineInfo = _locutil.getLineInfo;\n\nvar _node = _dereq_(\"./node\");\n\nexports.Node = _node.Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\n\nvar _tokenize = _dereq_(\"./tokenize\");\n\nexports.Token = _tokenize.Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"3.0.4\";\n\nexports.version = version;\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new _state.Parser(options, input).parse();\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new _state.Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new _state.Parser(options, input);\n}\n\n},{\"./expression\":1,\"./identifier\":2,\"./location\":4,\"./locutil\":5,\"./lval\":6,\"./node\":7,\"./options\":8,\"./parseutil\":9,\"./state\":10,\"./statement\":11,\"./tokencontext\":12,\"./tokenize\":13,\"./tokentype\":14,\"./whitespace\":16}],4:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar pp = _state.Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = _locutil.getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.raiseRecoverable = pp.raise;\n\npp.curPosition = function () {\n  if (this.options.locations) {\n    return new _locutil.Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\n},{\"./locutil\":5,\"./state\":10}],5:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getLineInfo = getLineInfo;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nexports.Position = Position;\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n;\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\n},{\"./whitespace\":16}],6:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _util = _dereq_(\"./util\");\n\nvar pp = _state.Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          // falls through to AssignmentPattern\n        } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\") this.raise(node.right.start, \"Yield expression cannot be a default value\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function (allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case _tokentype.types.name:\n      return this.parseIdent();\n\n    case _tokentype.types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(_tokentype.types.comma);\n    if (allowEmpty && this.type === _tokentype.types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === _tokentype.types.ellipsis) {\n      var rest = this.parseRest(allowNonIdent);\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (_util.has(checkClashes, expr.name)) this.raiseRecoverable(expr.start, \"Argument name clash\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./util\":15}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);\n  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges) this.range = [pos, 0];\n}\n\n// Start an AST node, attaching a start offset.\n\n;\n\nexports.Node = Node;\nvar pp = _state.Parser.prototype;\n\npp.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n}\n\npp.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\n},{\"./locutil\":5,\"./state\":10}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getOptions = getOptions;\n\nvar _util = _dereq_(\"./util\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features. The default is 6.\n  ecmaVersion: 6,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\nexports.defaultOptions = defaultOptions;\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n  if (_util.isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./locutil\":5,\"./util\":15}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.raw.slice(1, -1) === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === _tokentype.types.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(_tokentype.types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\npp.checkPatternErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Trailing comma is not permitted in destructuring patterns\");\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _options = _dereq_(\"./options\");\n\n// Registered plugins\nvar plugins = {};\n\nexports.plugins = plugins;\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = (function () {\n  function Parser(options, input, startPos) {\n    _classCallCheck(this, Parser);\n\n    this.options = options = _options.getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = options.allowReserved ? \"\" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\");\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + _identifier.reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + _identifier.reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Load plugins\n    this.loadPlugins(options.plugins);\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = _tokentype.types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\";\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false;\n    // Labels in scope.\n    this.labels = [];\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    for (var _name in pluginConfigs) {\n      var plugin = plugins[_name];\n      if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n      plugin(this, pluginConfigs[_name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  return Parser;\n})();\n\nexports.Parser = Parser;\n\n},{\"./identifier\":2,\"./options\":8,\"./tokentype\":14,\"./whitespace\":16}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar pp = _state.Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== _tokentype.types.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\npp.isLet = function () {\n  if (this.type !== _tokentype.types.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false;\n  _whitespace.skipWhiteSpace.lastIndex = this.pos;\n  var skip = _whitespace.skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length,\n      nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh == 123) return true; // '{' and '['\n  if (_identifier.isIdentifierStart(nextCh, true)) {\n    for (var pos = next + 1; _identifier.isIdentifierChar(this.input.charCodeAt(pos, true)); ++pos) {}\n    var ident = this.input.slice(next, pos);\n    if (!this.isKeyword(ident)) return true;\n  }\n  return false;\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode(),\n      kind = undefined;\n\n  if (this.isLet()) {\n    starttype = _tokentype.types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokentype.types._break:case _tokentype.types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case _tokentype.types._debugger:\n      return this.parseDebuggerStatement(node);\n    case _tokentype.types._do:\n      return this.parseDoStatement(node);\n    case _tokentype.types._for:\n      return this.parseForStatement(node);\n    case _tokentype.types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case _tokentype.types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case _tokentype.types._if:\n      return this.parseIfStatement(node);\n    case _tokentype.types._return:\n      return this.parseReturnStatement(node);\n    case _tokentype.types._switch:\n      return this.parseSwitchStatement(node);\n    case _tokentype.types._throw:\n      return this.parseThrowStatement(node);\n    case _tokentype.types._try:\n      return this.parseTryStatement(node);\n    case _tokentype.types._const:case _tokentype.types._var:\n      kind = kind || this.value;\n      if (!declaration && kind != \"var\") this.unexpected();\n      return this.parseVarStatement(node, kind);\n    case _tokentype.types._while:\n      return this.parseWhileStatement(node);\n    case _tokentype.types._with:\n      return this.parseWithStatement(node);\n    case _tokentype.types.braceL:\n      return this.parseBlock();\n    case _tokentype.types.semi:\n      return this.parseEmptyStatement(node);\n    case _tokentype.types._export:\n    case _tokentype.types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === _tokentype.types.name && expr.type === \"Identifier\" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(_tokentype.types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(_tokentype.types.parenL);\n  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);\n  var isLet = this.isLet();\n  if (this.type === _tokentype.types._var || this.type === _tokentype.types._const || isLet) {\n    var _init = this.startNode(),\n        kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(_init, true, kind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(kind !== \"var\" && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(_tokentype.types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {\n    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {\n      var isCase = this.type === _tokentype.types._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(_tokentype.types.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === _tokentype.types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(_tokentype.types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === _tokentype.types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label = this.labels[i];\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start;\n      label.kind = kind;\n    } else break;\n  }\n  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(_tokentype.types.semi);\n  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();\n  this.expect(_tokentype.types.semi);\n  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === _tokentype.types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(_tokentype.types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === _tokentype.types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(_tokentype.types.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);\n  var oldInGen = this.inGenerator;\n  this.inGenerator = node.generator;\n  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  this.inGenerator = oldInGen;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (this.eat(_tokentype.types.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(_tokentype.types.star);\n    var isMaybeStatic = this.type === _tokentype.types.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== _tokentype.types.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(_tokentype.types.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== _tokentype.types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");else this.raiseRecoverable(start, \"setter should have exactly one param\");\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raise(method.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(_tokentype.types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(_tokentype.types._default)) {\n    // export default ...\n    var parens = this.type == _tokentype.types.parenL;\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (!parens && (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\")) {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword || this.isLet();\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === _tokentype.types._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === _tokentype.types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === _tokentype.types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(_tokentype.types.comma)) return nodes;\n  }\n  if (this.type === _tokentype.types.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      node.local = node.imported;\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start);\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\");\n    }\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./identifier\":2,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],12:[function(_dereq_,module,exports){\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nexports.TokContext = TokContext;\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = _state.Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  if (prevType === _tokentype.types.colon) {\n    var _parent = this.curContext();\n    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;\n  }\n  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;\n  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\n_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\n_tokentype.types.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\n_tokentype.types._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\n_tokentype.types.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n}\n\n// ## Tokenizer\n\n;\n\nexports.Token = Token;\nvar pp = _state.Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === _tokentype.types.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    _whitespace.lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n      case 32:case 160:\n        // ' '\n        ++this.pos;\n        break;\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10:case 8232:case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break;\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n          case 47:\n            this.skipLineComment(2);\n            break;\n          default:\n            break loop;\n        }\n        break;\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(_tokentype.types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(_tokentype.types.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.slash, 1);\n};\n\npp.readToken_mult_modulo_exp = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? _tokentype.types.star : _tokentype.types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && next === 42) {\n    ++size;\n    tokentype = _tokentype.types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n  return this.finishOp(tokentype, size);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(_tokentype.types.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n    return this.finishOp(_tokentype.types.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = 2;\n  return this.finishOp(_tokentype.types.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(_tokentype.types.arrow);\n  }\n  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(_tokentype.types.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(_tokentype.types.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(_tokentype.types.semi);\n    case 44:\n      ++this.pos;return this.finishToken(_tokentype.types.comma);\n    case 91:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(_tokentype.types.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(_tokentype.types.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(_tokentype.types.colon);\n    case 63:\n      ++this.pos;return this.finishToken(_tokentype.types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(_tokentype.types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo_exp(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(_tokentype.types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"￿\", \"u\");\n\npp.readRegexp = function () {\n  var _this = this;\n\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (_whitespace.lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n        code = Number(\"0x\" + code);\n        if (code > 0x10FFFF) _this.raise(start + offset + 3, \"Code point out of bounds\");\n        return \"x\";\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n        else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (_whitespace.isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(_tokentype.types.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === _tokentype.types.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(_tokentype.types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(_tokentype.types.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(_tokentype.types.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (_whitespace.isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n    case 110:\n      return \"\\n\"; // 'n' -> '\\n'\n    case 114:\n      return \"\\r\"; // 'r' -> '\\r'\n    case 120:\n      return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117:\n      return codePointToString(this.readCodePoint()); // 'u'\n    case 116:\n      return \"\\t\"; // 't' -> '\\t'\n    case 98:\n      return \"\\b\"; // 'b' -> '\\b'\n    case 118:\n      return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102:\n      return \"\\f\"; // 'f' -> '\\f'\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;++this.curLine;\n      }\n      return \"\";\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\");\n        }\n        this.pos += octalStr.length - 1;\n        return String.fromCharCode(octal);\n      }\n      return String.fromCharCode(ch);\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n;\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (_identifier.isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = _tokentype.types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":2,\"./locutil\":5,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],14:[function(_dereq_,module,exports){\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", { beforeExpr: true })\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\", beforeExpr);\nkw(\"do\", { isLoop: true, beforeExpr: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.isArray = isArray;\nexports.has = has;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],16:[function(_dereq_,module,exports){\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isNewLine = isNewLine;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nexports.skipWhiteSpace = skipWhiteSpace;\n\n},{}]},{},[3])(3)\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(require,module,exports){\nvar containsField = function (obj, field, cb) {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field]);\r\n    }\r\n};\r\nvar parsebool = function (b, d) {\r\n    if (\"boolean\" === typeof b) {\r\n        return b;\r\n    }\r\n    switch (b) {\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return d;\r\n    }\r\n};\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\r\nvar Metadata = (function () {\r\n    function Metadata($data, options, metadata) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.metadata = metadata;\r\n        this.options.container = this.$data.Container; //this.options.container || $data.createContainer()\r\n    }\r\n    Metadata.prototype._getMaxValue = function (maxValue) {\r\n        if (\"number\" === typeof maxValue)\r\n            return maxValue;\r\n        if (\"max\" === maxValue)\r\n            return Number.MAX_VALUE;\r\n        return parseInt(maxValue);\r\n    };\r\n    Metadata.prototype.createTypeDefinition = function (propertySchema, definition) {\r\n        var _this = this;\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.type = _this.options.collectionBaseType || 'Array';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.type = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createReturnTypeDefinition = function (propertySchema, definition) {\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.returnType = '$data.Queryable';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.returnType = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createProperty = function (entitySchema, propertySchema) {\r\n        var _this = this;\r\n        var self = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"maxLength\", function (v) {\r\n            definition.maxLength = _this._getMaxValue(v);\r\n        });\r\n        containsField(entitySchema, \"key\", function (keys) {\r\n            if (keys.propertyRefs.some(function (pr) { return pr.name === propertySchema.name; })) {\r\n                definition.key = true;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"concurrencyMode\", function (v) {\r\n            definition.concurrencyMode = self.$data.ConcurrencyMode[v];\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createNavigationProperty = function (entitySchema, propertySchema) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"partner\", function (p) {\r\n            definition.inverseProperty = p;\r\n        });\r\n        if (!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound';\r\n        }\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createEntityDefinition = function (entitySchema) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entitySchema));\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entitySchema));\r\n        props = props.concat(navigationProps);\r\n        var result = props.reduce(function (p, c) {\r\n            p[c.name] = c.definition;\r\n            return p;\r\n        }, {});\r\n        return result;\r\n    };\r\n    Metadata.prototype.createEntityType = function (entitySchema, namespace) {\r\n        var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType) || this.$data.Entity;\r\n        var definition = this.createEntityDefinition(entitySchema);\r\n        var entityFullName = namespace + \".\" + entitySchema.name;\r\n        var staticDefinition = {};\r\n        containsField(entitySchema, \"openType\", function (v) {\r\n            if (parsebool(v, false)) {\r\n                staticDefinition.openType = { value: true };\r\n            }\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: entityFullName,\r\n            baseType: baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition: definition,\r\n            type: 'entity'\r\n        };\r\n    };\r\n    Metadata.prototype.createEnumOption = function (entitySchema, propertySchema, i) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        };\r\n        containsField(propertySchema, \"value\", function (value) {\r\n            var v = +value;\r\n            if (!isNaN(v)) {\r\n                definition.value = v;\r\n            }\r\n        });\r\n        return definition;\r\n    };\r\n    Metadata.prototype.createEnumDefinition = function (enumSchema) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumSchema));\r\n        return props;\r\n    };\r\n    Metadata.prototype.createEnumType = function (enumSchema, namespace) {\r\n        var self = this;\r\n        var definition = this.createEnumDefinition(enumSchema);\r\n        var enumFullName = namespace + \".\" + enumSchema.name;\r\n        return {\r\n            namespace: namespace,\r\n            typeName: enumFullName,\r\n            baseType: self.$data.Enum,\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition: definition,\r\n            type: 'enum'\r\n        };\r\n    };\r\n    Metadata.prototype.createEntitySetProperty = function (entitySetSchema, contextSchema) {\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType || '$data.EntitySet',\r\n                elementType: t\r\n            }\r\n        };\r\n        return prop;\r\n    };\r\n    Metadata.prototype.indexBy = function (fieldName, pick) {\r\n        return [function (p, c) { p[c[fieldName]] = c[pick]; return p; }, {}];\r\n    };\r\n    Metadata.prototype.createContextDefinition = function (contextSchema, namespace) {\r\n        var _this = this;\r\n        var props = (contextSchema.entitySets || []).map(function (es) { return _this.createEntitySetProperty(es, contextSchema); });\r\n        var result = props.reduce.apply(props, this.indexBy(\"name\", \"definition\"));\r\n        return result;\r\n    };\r\n    Metadata.prototype.createContextType = function (contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\");\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace);\r\n        var baseType = this.options.contextType || this.$data.EntityContext;\r\n        var typeName = namespace + \".\" + contextSchema.name;\r\n        var contextImportMethods = [];\r\n        contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.actionImports);\r\n        contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.functionImports);\r\n        return {\r\n            namespace: namespace,\r\n            typeName: typeName,\r\n            baseType: baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition: definition,\r\n            type: 'context',\r\n            contextImportMethods: contextImportMethods\r\n        };\r\n    };\r\n    Metadata.prototype.createMethodParameter = function (parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        };\r\n        this.createTypeDefinition(parameter, paramDef);\r\n        definition.params.push(paramDef);\r\n    };\r\n    Metadata.prototype.applyBoundMethod = function (actionInfo, ns, typeDefinitions, type) {\r\n        var _this = this;\r\n        var definition = {\r\n            type: type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        };\r\n        containsField(actionInfo, \"returnType\", function (value) {\r\n            _this.createReturnTypeDefinition(value, definition);\r\n        });\r\n        var parameters = [].concat(actionInfo.parameters);\r\n        parameters.forEach(function (p) { return _this.createMethodParameter(p, definition); });\r\n        if (parsebool(actionInfo.isBound, false)) {\r\n            var bindingParameter = definition.params.shift();\r\n            if (bindingParameter.type === (this.options.collectionBaseType || 'Array')) {\r\n                var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.namespace === ns && d.type === 'context'; });\r\n                filteredContextDefinitions.forEach(function (ctx) {\r\n                    for (var setName in ctx.definition) {\r\n                        var set = ctx.definition[setName];\r\n                        if (set.elementType === bindingParameter.elementType) {\r\n                            set.actions = set.actions || {};\r\n                            set.actions[actionInfo.name] = definition;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var filteredTypeDefinitions = typeDefinitions.filter(function (d) { return d.typeName === bindingParameter.type && d.type === 'entity'; });\r\n                filteredTypeDefinitions.forEach(function (t) {\r\n                    t.definition[actionInfo.name] = definition;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            delete definition.namespace;\r\n            var methodFullName = ns + '.' + actionInfo.name;\r\n            var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.type === 'context'; });\r\n            filteredContextDefinitions.forEach(function (ctx) {\r\n                ctx.contextImportMethods.forEach(function (methodImportInfo) {\r\n                    if (methodImportInfo.action === methodFullName || methodImportInfo.function === methodFullName) {\r\n                        ctx.definition[actionInfo.name] = definition;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Metadata.prototype.processMetadata = function (createdTypes) {\r\n        var _this = this;\r\n        var types = createdTypes || [];\r\n        var typeDefinitions = [];\r\n        var serviceMethods = [];\r\n        var self = this;\r\n        this.metadata.dataServices.schemas.forEach(function (schema) {\r\n            var ns = schema.namespace;\r\n            if (schema.enumTypes) {\r\n                var enumTypes = schema.enumTypes.map(function (ct) { return _this.createEnumType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, enumTypes);\r\n            }\r\n            if (schema.complexTypes) {\r\n                var complexTypes = schema.complexTypes.map(function (ct) { return _this.createEntityType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, complexTypes);\r\n            }\r\n            if (schema.entityTypes) {\r\n                var entityTypes = schema.entityTypes.map(function (et) { return _this.createEntityType(et, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, entityTypes);\r\n            }\r\n            if (schema.actions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.actions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceAction'); }; }));\r\n            }\r\n            if (schema.functions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.functions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceFunction'); }; }));\r\n            }\r\n            if (schema.entityContainer) {\r\n                var contexts = schema.entityContainer.map(function (ctx) { return _this.createContextType(ctx, self.options.namespace || ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, contexts);\r\n            }\r\n        });\r\n        serviceMethods.forEach(function (m) { return m(typeDefinitions); });\r\n        types.src = '(function(mod) {\\n' +\r\n            '  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"jaydata/core\")); // CommonJS\\n' +\r\n            '  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod); // AMD\\n' +\r\n            '  mod($data.generatedContext || ($data.generatedContext = {}), $data); // Plain browser env\\n' +\r\n            '})(function(exports, $data) {\\n\\n' +\r\n            'var types = {};\\n\\n';\r\n        types.push.apply(types, typeDefinitions.map(function (d) {\r\n            var srcPart = '';\r\n            if (d.baseType == self.$data.Enum) {\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = $data.createEnum(\"' + d.params[0] + '\", [\\n' +\r\n                    Object.keys(d.params[3]).map(function (dp) { return '  ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') +\r\n                    '\\n]);\\n\\n';\r\n            }\r\n            else {\r\n                var typeName = _this.options.container.resolveName(d.baseType);\r\n                if (d.baseType == self.$data.EntityContext)\r\n                    srcPart += 'exports.type = ';\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = ' +\r\n                    (typeName == '$data.Entity' || typeName == '$data.EntityContext' ? typeName : 'types[\"' + typeName + '\"]') +\r\n                    '.extend(\"' + d.params[0] + '\", ';\r\n                if (d.params[2] && Object.keys(d.params[2]).length > 0)\r\n                    srcPart += '{\\n' + Object.keys(d.params[2]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[2][dp]); }).join(',\\n') + '\\n}';\r\n                else\r\n                    srcPart += 'null';\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0)\r\n                    srcPart += ', {\\n' + Object.keys(d.params[3]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') + '\\n}';\r\n                srcPart += ');\\n\\n';\r\n            }\r\n            types.src += srcPart;\r\n            if (_this.options.debug)\r\n                console.log('Type generated:', d.params[0]);\r\n            var baseType = _this.options.container.resolveType(d.baseType);\r\n            return baseType.extend.apply(baseType, d.params);\r\n        }));\r\n        types.src += 'var ctxType = exports.type;\\n' +\r\n            'exports.factory = function(config){\\n' +\r\n            '  if (ctxType){\\n' +\r\n            '    var cfg = $data.typeSystem.extend({\\n' +\r\n            '      name: \"oData\",\\n' +\r\n            '      oDataServiceHost: \"' + this.options.url.replace('/$metadata', '') + '\",\\n' +\r\n            '      withCredentials: ' + (this.options.withCredentials || false) + ',\\n' +\r\n            '      maxDataServiceVersion: \"' + (this.options.maxDataServiceVersion || '4.0') + '\"\\n' +\r\n            '    }, config);\\n' +\r\n            '    return new ctxType(cfg);\\n' +\r\n            '  }else{\\n' +\r\n            '    return null;\\n' +\r\n            '  }\\n' +\r\n            '};\\n\\n';\r\n        if (this.options.autoCreateContext) {\r\n            var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n            types.src += 'exports[\"' + contextName + '\"] = exports.factory();\\n\\n';\r\n        }\r\n        types.src += '});';\r\n        return types;\r\n    };\r\n    return Metadata;\r\n})();\r\nexports.Metadata = Metadata;\r\n\n},{}],5:[function(require,module,exports){\n(function (global){\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar odata_metadata_1 = require('odata-metadata');\r\nvar metadata_1 = require('./metadata');\r\nvar odatajs = (typeof window !== \"undefined\" ? window['odatajs'] : typeof global !== \"undefined\" ? global['odatajs'] : null);\r\nvar extend = require('extend');\r\nvar MetadataHandler = (function () {\r\n    function MetadataHandler($data, options) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.prepareRequest = options.prepareRequest || function () { };\r\n        if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n            console.error('Not Found!:', 'odatajs is required');\r\n        }\r\n        else {\r\n            this.oData = odatajs.oData;\r\n        }\r\n    }\r\n    MetadataHandler.prototype.parse = function (text) {\r\n        var _this = this;\r\n        var edmMetadata = new odata_metadata_1.Edm.Edmx(this.oData.metadata.metadataParser(null, text));\r\n        var metadata = new metadata_1.Metadata(this.$data, this.options, edmMetadata);\r\n        var types = metadata.processMetadata();\r\n        var contextType = types.filter(function (t) { return t.isAssignableTo(_this.$data.EntityContext); })[0];\r\n        var factory = this._createFactoryFunc(contextType);\r\n        factory.type = contextType;\r\n        factory.src = types.src;\r\n        return factory;\r\n    };\r\n    MetadataHandler.prototype.load = function () {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var serviceUrl = self.options.url.replace('/$metadata', '');\r\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\r\n            self.options.serivceUri = serviceUrl;\r\n            var requestData = [\r\n                {\r\n                    requestUri: metadataUrl,\r\n                    method: self.options.method || \"GET\",\r\n                    headers: self.options.headers || {}\r\n                },\r\n                function (data) {\r\n                    var edmMetadata = new odata_metadata_1.Edm.Edmx(data);\r\n                    var metadata = new metadata_1.Metadata(self.$data, self.options, edmMetadata);\r\n                    var types = metadata.processMetadata();\r\n                    var contextType = types.filter(function (t) { return t.isAssignableTo(self.$data.EntityContext); })[0];\r\n                    var factory = self._createFactoryFunc(contextType);\r\n                    factory.type = contextType;\r\n                    factory.src = types.src;\r\n                    resolve(factory);\r\n                },\r\n                reject,\r\n                self.oData.metadataHandler\r\n            ];\r\n            self._appendBasicAuth(requestData[0], self.options.user, self.options.password, self.options.withCredentials);\r\n            self.prepareRequest.call(self, requestData);\r\n            self.oData.request.apply(self.oData, requestData);\r\n        });\r\n    };\r\n    MetadataHandler.prototype._createFactoryFunc = function (ctxType) {\r\n        var _this = this;\r\n        return function (config) {\r\n            if (ctxType) {\r\n                var cfg = extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: _this.options.url.replace('/$metadata', ''),\r\n                    user: _this.options.user,\r\n                    password: _this.options.password,\r\n                    withCredentials: _this.options.withCredentials,\r\n                    maxDataServiceVersion: _this.options.maxDataServiceVersion || '4.0'\r\n                }, config);\r\n                return new ctxType(cfg);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n    };\r\n    MetadataHandler.prototype._appendBasicAuth = function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials) {\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    };\r\n    MetadataHandler.prototype.__encodeBase64 = function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n            \"QRSTUVWXYZabcdef\" +\r\n            \"ghijklmnopqrstuv\" +\r\n            \"wxyz0123456789+/\" +\r\n            \"=\";\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            base64 = base64 +\r\n                b64array.charAt(enc1) +\r\n                b64array.charAt(enc2) +\r\n                b64array.charAt(enc3) +\r\n                b64array.charAt(enc4);\r\n        } while (i < input.length);\r\n        return base64;\r\n    };\r\n    return MetadataHandler;\r\n})();\r\nexports.MetadataHandler = MetadataHandler;\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./metadata\":4,\"extend\":7,\"odata-metadata\":12}],6:[function(require,module,exports){\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar metadataHandler_1 = require('./metadataHandler');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar jaydata_promise_handler_1 = require('jaydata-promise-handler');\r\nvar metadataHandler_2 = require('./metadataHandler');\r\nexports.MetadataHandler = metadataHandler_2.MetadataHandler;\r\nvar ServiceParams = (function () {\r\n    function ServiceParams() {\r\n        this.config = {};\r\n    }\r\n    return ServiceParams;\r\n})();\r\nexports.ServiceParams = ServiceParams;\r\nvar DynamicMetadata = (function () {\r\n    function DynamicMetadata($data) {\r\n        this.$data = $data;\r\n    }\r\n    DynamicMetadata.prototype.service = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        var self = this;\r\n        new metadataHandler_1.MetadataHandler(this.$data, params.config).load().then(function (factory) {\r\n            var type = factory.type;\r\n            //register to local store\r\n            var storeAlias = params.config.serviceName || params.config.storeAlias;\r\n            if (storeAlias && 'addStore' in self.$data) {\r\n                self.$data.addStore(storeAlias, factory, params.config.isDefault === undefined || params.config.isDefault);\r\n            }\r\n            _callback.success(factory, type);\r\n        }, function (err) {\r\n            _callback.error(err);\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.prototype.initService = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        this.service(params.config.url, params.config, {\r\n            success: function (factory) {\r\n                var ctx = factory();\r\n                if (ctx) {\r\n                    return ctx.onReady(_callback);\r\n                }\r\n                return _callback.error(new jaydata_error_handler_1.Exception(\"Missing Context Type\"));\r\n            },\r\n            error: _callback.error\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.use = function ($data) {\r\n        var dynamicMetadata = new DynamicMetadata($data);\r\n        $data.service = dynamicMetadata.service;\r\n        $data.initService = dynamicMetadata.initService;\r\n    };\r\n    DynamicMetadata.getParam = function (paramValue, params) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    params.callback = paramValue;\r\n                }\r\n                else {\r\n                    params.config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                params.callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return DynamicMetadata;\r\n})();\r\nexports.DynamicMetadata = DynamicMetadata;\r\n\n},{\"./metadataHandler\":5,\"extend\":7,\"jaydata-error-handler\":8,\"jaydata-promise-handler\":9}],7:[function(require,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Exception = (function (_super) {\r\n    __extends(Exception, _super);\r\n    function Exception(message, name, data) {\r\n        _super.call(this);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n        this.name = name || \"Exception\";\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n    Exception.prototype._getStackTrace = function () { };\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\nvar Guard = (function () {\r\n    function Guard() {\r\n    }\r\n    Guard.requireValue = function (name, value) {\r\n        if (typeof value === 'undefined' || value === null) {\r\n            Guard.raise(name + \" requires a value other than undefined or null\");\r\n        }\r\n    };\r\n    Guard.requireType = function (name, value, typeOrTypes) {\r\n        var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n        return types.some(function (item) {\r\n            switch (typeof item) {\r\n                case \"string\":\r\n                    return typeof value === item;\r\n                case \"function\":\r\n                    return value instanceof item;\r\n                default:\r\n                    Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n            }\r\n        });\r\n    };\r\n    Guard.raise = function (exception) {\r\n        if (typeof exports.intellisense === 'undefined') {\r\n            if (exception instanceof Exception) {\r\n                console.error(exception.name + ':', exception.message + '\\n', exception);\r\n            }\r\n            else {\r\n                console.error(exception);\r\n            }\r\n            throw exception;\r\n        }\r\n    };\r\n    Guard.isNullOrUndefined = function (value) {\r\n        return value === undefined || value === null;\r\n    };\r\n    return Guard;\r\n}());\r\nexports.Guard = Guard;\r\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar promiseHandlerBase_1 = require('./promiseHandlerBase');\r\nvar PromiseHandler = (function (_super) {\r\n    __extends(PromiseHandler, _super);\r\n    function PromiseHandler() {\r\n        _super.call(this);\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.resolve = resolve;\r\n            self.reject = reject;\r\n        });\r\n        this.deferred = {\r\n            resolve: function () { self.resolve.apply(promise, arguments); },\r\n            reject: function () { self.reject.apply(promise, arguments); },\r\n            promise: promise\r\n        };\r\n    }\r\n    PromiseHandler.prototype.createCallback = function (callback) {\r\n        var settings = promiseHandlerBase_1.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var self = this;\r\n        var result = new promiseHandlerBase_1.CallbackSettings();\r\n        result = extend(result, {\r\n            success: function () {\r\n                settings.success.apply(self.deferred, arguments);\r\n                self.resolve.apply(self.deferred, arguments);\r\n            },\r\n            error: function () {\r\n                Array.prototype.push.call(arguments, self.deferred);\r\n                settings.error.apply(self.deferred, arguments);\r\n            },\r\n            notify: function () {\r\n                settings.notify.apply(self.deferred, arguments);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    PromiseHandler.prototype.getPromise = function () {\r\n        return this.deferred.promise;\r\n    };\r\n    PromiseHandler.compatibilityMode = function () {\r\n        Promise.prototype['fail'] = function (onReject) {\r\n            return this.then(null, function (reason) {\r\n                onReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        Promise.prototype['always'] = function (onResolveOrReject) {\r\n            return this.then(onResolveOrReject, function (reason) {\r\n                onResolveOrReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n    };\r\n    PromiseHandler.use = function ($data) {\r\n        $data.PromiseHandler = typeof Promise == 'function' ? PromiseHandler : promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.PromiseHandlerBase = promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.Promise = promiseHandlerBase_1.PromiseNotImplemented;\r\n    };\r\n    return PromiseHandler;\r\n}(promiseHandlerBase_1.PromiseHandlerBase));\r\nexports.PromiseHandler = PromiseHandler;\r\n\n},{\"./promiseHandlerBase\":10,\"extend\":11}],10:[function(require,module,exports){\n\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar CallbackSettings = (function () {\r\n    function CallbackSettings() {\r\n    }\r\n    return CallbackSettings;\r\n}());\r\nexports.CallbackSettings = CallbackSettings;\r\nvar PromiseNotImplemented = (function () {\r\n    function PromiseNotImplemented() {\r\n    }\r\n    PromiseNotImplemented.prototype.always = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.always', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.done = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.done', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.fail = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.fail', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isRejected = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isRejected', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isResolved = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isResolved', 'Not implemented!')); };\r\n    //notify() { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); }\r\n    //notifyWith() { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.pipe = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.pipe', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.progress = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.progress', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.promise = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.promise', 'Not implemented!')); };\r\n    //reject() { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); }\r\n    //rejectWith() { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); }\r\n    //resolve() { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); }\r\n    //resolveWith() { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.state = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.state', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.then = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.then', 'Not implemented!')); };\r\n    return PromiseNotImplemented;\r\n}());\r\nexports.PromiseNotImplemented = PromiseNotImplemented;\r\nvar PromiseHandlerBase = (function () {\r\n    function PromiseHandlerBase() {\r\n    }\r\n    PromiseHandlerBase.defaultSuccessCallback = function () { };\r\n    PromiseHandlerBase.defaultNotifyCallback = function () { };\r\n    PromiseHandlerBase.defaultErrorCallback = function () {\r\n        if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n            (console.error || console.log).call(console, arguments[0]);\r\n            arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n        }\r\n        else {\r\n            if (arguments[0] instanceof Error) {\r\n                console.error(arguments[0]);\r\n            }\r\n            else {\r\n                console.error(\"DefaultError:\", \"DEFAULT ERROR CALLBACK!\", arguments);\r\n            }\r\n        }\r\n    };\r\n    PromiseHandlerBase.createCallbackSettings = function (callback, defaultSettings) {\r\n        var settings = defaultSettings || {\r\n            success: PromiseHandlerBase.defaultSuccessCallback,\r\n            error: PromiseHandlerBase.defaultErrorCallback,\r\n            notify: PromiseHandlerBase.defaultNotifyCallback\r\n        };\r\n        var result = new CallbackSettings();\r\n        if (callback == null || callback == undefined) {\r\n            result = settings;\r\n        }\r\n        else if (typeof callback == 'function') {\r\n            result = extend(settings, {\r\n                success: callback\r\n            });\r\n        }\r\n        else {\r\n            result = extend(settings, callback);\r\n        }\r\n        var wrapCode = function (fn) {\r\n            var t = this;\r\n            function r() {\r\n                fn.apply(t, arguments);\r\n                fn = function () { };\r\n            }\r\n            return r;\r\n        };\r\n        if (typeof result.error === 'function')\r\n            result.error = wrapCode(result.error);\r\n        return result;\r\n    };\r\n    PromiseHandlerBase.prototype.createCallback = function (callback) {\r\n        return PromiseHandlerBase.createCallbackSettings(callback);\r\n    };\r\n    PromiseHandlerBase.prototype.getPromise = function () {\r\n        return new PromiseNotImplemented();\r\n    };\r\n    return PromiseHandlerBase;\r\n}());\r\nexports.PromiseHandlerBase = PromiseHandlerBase;\r\n\n},{\"extend\":11,\"jaydata-error-handler\":8}],11:[function(require,module,exports){\narguments[4][7][0].apply(exports,arguments)\n},{\"dup\":7}],12:[function(require,module,exports){\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = require('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    })();\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                var v = parser.invoke(definition, _this);\r\n                _this[membername] = v;\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    })();\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        return Property;\r\n    })(EdmItemBase);\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        return NavigationProperty;\r\n    })(EdmItemBase);\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    })(EdmItemBase);\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    })(EdmItemBase);\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    })(EdmItemBase);\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        return EntityType;\r\n    })(EdmItemBase);\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        return ComplexType;\r\n    })(EdmItemBase);\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        return Parameter;\r\n    })(EdmItemBase);\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        return ReturnType;\r\n    })(EdmItemBase);\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    })(EdmItemBase);\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        return Action;\r\n    })(Invokable);\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        return Function;\r\n    })(Invokable);\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        return Member;\r\n    })(EdmItemBase);\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        return EnumType;\r\n    })(EdmItemBase);\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        return EntitySet;\r\n    })(EdmItemBase);\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    })(EdmItemBase);\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    })(EdmItemBase);\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    })(EdmItemBase);\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        return Schema;\r\n    })(EdmItemBase);\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    })(EdmItemBase);\r\n    Edm.DataServices = DataServices;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        return Edmx;\r\n    })(EdmItemBase);\r\n    Edm.Edmx = Edmx;\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n\n},{\"./metacode\":13}],13:[function(require,module,exports){\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\nrequire('reflect-metadata');\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var md = (Reflect.getMetadata(\"members\", target) || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        Reflect.defineMetadata(\"members\", md, target);\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            //console.log(\"decorator runs\",key, this.attributeName, decoratorValue, value)\r\n            Reflect.defineMetadata(_this.attributeName, decoratorValue, target, key);\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.prototype.isApplied = function (instance, memberName) {\r\n        return Reflect.getMetadataKeys(Object.getPrototypeOf(instance), memberName).indexOf(this.attributeName) > -1;\r\n    };\r\n    MemberAttribute.getMembers = function (target) {\r\n        return Reflect.getMetadata(\"members\", isFunction(target) ? target.prototype : target);\r\n    };\r\n    MemberAttribute.getAttributeNames = function (target, memberName) {\r\n        return Reflect.getMetadataKeys(target, memberName);\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return Reflect.getMetadata(attributeName, target, memberName);\r\n    };\r\n    return MemberAttribute;\r\n})();\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n})();\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n})(MemberAttribute);\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n\n},{\"reflect-metadata\":14}],14:[function(require,module,exports){\n(function (global){\n/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    \"use strict\";\r\n    // Load global or shim versions of Map, Set, and WeakMap\r\n    var functionPrototype = Object.getPrototypeOf(Function);\r\n    var _Map = typeof Map === \"function\" ? Map : CreateMapPolyfill();\r\n    var _Set = typeof Set === \"function\" ? Set : CreateSetPolyfill();\r\n    var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n    // [[Metadata]] internal slot\r\n    var __Metadata__ = new _WeakMap();\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param targetKey (Optional) The property key to decorate.\r\n      * @param targetDescriptor (Optional) The property descriptor for the target key\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     C = Reflect.decorate(decoratorsArray, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(C, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(C.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators, target, targetKey, targetDescriptor) {\r\n        if (!IsUndefined(targetDescriptor)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (IsUndefined(targetKey)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(targetDescriptor)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);\r\n        }\r\n        else {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsConstructor(target)) {\r\n                throw new TypeError();\r\n            }\r\n            return DecorateConstructor(decorators, target);\r\n        }\r\n    }\r\n    Reflect.decorate = decorate;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class C {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey, metadataValue) {\r\n        function decorator(target, targetKey) {\r\n            if (!IsUndefined(targetKey)) {\r\n                if (!IsObject(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                targetKey = ToPropertyKey(targetKey);\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n            }\r\n            else {\r\n                if (!IsConstructor(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);\r\n            }\r\n        }\r\n        return decorator;\r\n    }\r\n    Reflect.metadata = metadata;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): Decorator {\r\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n    }\r\n    Reflect.defineMetadata = defineMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasMetadata = hasMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasOwnMetadata = hasOwnMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getMetadata = getMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadata = getOwnMetadata;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getMetadataKeys = getMetadataKeys;\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryOwnMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        if (IsUndefined(metadataMap)) {\r\n            return false;\r\n        }\r\n        if (!metadataMap.delete(metadataKey)) {\r\n            return false;\r\n        }\r\n        if (metadataMap.size > 0) {\r\n            return true;\r\n        }\r\n        var targetMetadata = __Metadata__.get(target);\r\n        targetMetadata.delete(targetKey);\r\n        if (targetMetadata.size > 0) {\r\n            return true;\r\n        }\r\n        __Metadata__.delete(target);\r\n        return true;\r\n    }\r\n    Reflect.deleteMetadata = deleteMetadata;\r\n    function DecorateConstructor(decorators, target) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsConstructor(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                target = decorated;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target, propertyKey, descriptor);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsObject(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                descriptor = decorated;\r\n            }\r\n        }\r\n        return descriptor;\r\n    }\r\n    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            decorator(target, propertyKey);\r\n        }\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-\r\n    function GetOrCreateMetadataMap(target, targetKey, create) {\r\n        var targetMetadata = __Metadata__.get(target);\r\n        if (!targetMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            targetMetadata = new _Map();\r\n            __Metadata__.set(target, targetMetadata);\r\n        }\r\n        var keyMetadata = targetMetadata.get(targetKey);\r\n        if (!keyMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            keyMetadata = new _Map();\r\n            targetMetadata.set(targetKey, keyMetadata);\r\n        }\r\n        return keyMetadata;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-\r\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return true;\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n        }\r\n        return false;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-\r\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return false;\r\n        }\r\n        return Boolean(metadataMap.has(MetadataKey));\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-\r\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n        }\r\n        return undefined;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-\r\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return undefined;\r\n        }\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-\r\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-\r\n    function OrdinaryMetadataKeys(O, P) {\r\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent === null) {\r\n            return ownKeys;\r\n        }\r\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n        if (parentKeys.length <= 0) {\r\n            return ownKeys;\r\n        }\r\n        if (ownKeys.length <= 0) {\r\n            return parentKeys;\r\n        }\r\n        var set = new _Set();\r\n        var keys = [];\r\n        for (var _i = 0; _i < ownKeys.length; _i++) {\r\n            var key = ownKeys[_i];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (var _a = 0; _a < parentKeys.length; _a++) {\r\n            var key = parentKeys[_a];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-\r\n    function OrdinaryOwnMetadataKeys(target, targetKey) {\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        var keys = [];\r\n        if (metadataMap) {\r\n            metadataMap.forEach(function (_, key) { return keys.push(key); });\r\n        }\r\n        return keys;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type\r\n    function IsUndefined(x) {\r\n        return x === undefined;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\r\n    function IsArray(x) {\r\n        return Array.isArray(x);\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type\r\n    function IsObject(x) {\r\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\r\n    function IsConstructor(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\r\n    function IsSymbol(x) {\r\n        return typeof x === \"symbol\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\r\n    function ToPropertyKey(value) {\r\n        if (IsSymbol(value)) {\r\n            return value;\r\n        }\r\n        return String(value);\r\n    }\r\n    function GetPrototypeOf(O) {\r\n        var proto = Object.getPrototypeOf(O);\r\n        if (typeof O !== \"function\" || O === functionPrototype) {\r\n            return proto;\r\n        }\r\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. \r\n        // Try to determine the superclass constructor. Compatible implementations\r\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n        // or ensure each class has a valid `constructor` property on its prototype that\r\n        // points back to the constructor.\r\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n        if (proto !== functionPrototype) {\r\n            return proto;\r\n        }\r\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n        var prototype = O.prototype;\r\n        var prototypeProto = Object.getPrototypeOf(prototype);\r\n        if (prototypeProto == null || prototypeProto === Object.prototype) {\r\n            return proto;\r\n        }\r\n        // if the constructor was not a function, then we cannot determine the heritage.\r\n        var constructor = prototypeProto.constructor;\r\n        if (typeof constructor !== \"function\") {\r\n            return proto;\r\n        }\r\n        // if we have some kind of self-reference, then we cannot determine the heritage.\r\n        if (constructor === O) {\r\n            return proto;\r\n        }\r\n        // we have a pretty good guess at the heritage.\r\n        return constructor;\r\n    }\r\n    // naive Map shim\r\n    function CreateMapPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Map() {\r\n            this._keys = [];\r\n            this._values = [];\r\n            this._cache = cacheSentinel;\r\n        }\r\n        Map.prototype = {\r\n            get size() {\r\n                return this._keys.length;\r\n            },\r\n            has: function (key) {\r\n                if (key === this._cache) {\r\n                    return true;\r\n                }\r\n                if (this._find(key) >= 0) {\r\n                    this._cache = key;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._cache = key;\r\n                    return this._values[index];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (key, value) {\r\n                this.delete(key);\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this._cache = key;\r\n                return this;\r\n            },\r\n            delete: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._keys.splice(index, 1);\r\n                    this._values.splice(index, 1);\r\n                    this._cache = cacheSentinel;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                this._keys.length = 0;\r\n                this._values.length = 0;\r\n                this._cache = cacheSentinel;\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                var size = this.size;\r\n                for (var i = 0; i < size; ++i) {\r\n                    var key = this._keys[i];\r\n                    var value = this._values[i];\r\n                    this._cache = key;\r\n                    callback.call(this, value, key, this);\r\n                }\r\n            },\r\n            _find: function (key) {\r\n                var keys = this._keys;\r\n                var size = keys.length;\r\n                for (var i = 0; i < size; ++i) {\r\n                    if (keys[i] === key) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n        };\r\n        return Map;\r\n    }\r\n    // naive Set shim\r\n    function CreateSetPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Set() {\r\n            this._map = new _Map();\r\n        }\r\n        Set.prototype = {\r\n            get size() {\r\n                return this._map.length;\r\n            },\r\n            has: function (value) {\r\n                return this._map.has(value);\r\n            },\r\n            add: function (value) {\r\n                this._map.set(value, value);\r\n                return this;\r\n            },\r\n            delete: function (value) {\r\n                return this._map.delete(value);\r\n            },\r\n            clear: function () {\r\n                this._map.clear();\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                this._map.forEach(callback, thisArg);\r\n            }\r\n        };\r\n        return Set;\r\n    }\r\n    // naive WeakMap shim\r\n    function CreateWeakMapPolyfill() {\r\n        var UUID_SIZE = 16;\r\n        var isNode = typeof global !== \"undefined\" && Object.prototype.toString.call(global.process) === '[object process]';\r\n        var nodeCrypto = isNode && require(\"crypto\");\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        var keys = {};\r\n        var rootKey = CreateUniqueKey();\r\n        function WeakMap() {\r\n            this._key = CreateUniqueKey();\r\n        }\r\n        WeakMap.prototype = {\r\n            has: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return this._key in table;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return table[this._key];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (target, value) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                table[this._key] = value;\r\n                return this;\r\n            },\r\n            delete: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table && this._key in table) {\r\n                    return delete table[this._key];\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                // NOTE: not a real clear, just makes the previous data unreachable\r\n                this._key = CreateUniqueKey();\r\n            }\r\n        };\r\n        function FillRandomBytes(buffer, size) {\r\n            for (var i = 0; i < size; ++i) {\r\n                buffer[i] = Math.random() * 255 | 0;\r\n            }\r\n        }\r\n        function GenRandomBytes(size) {\r\n            if (nodeCrypto) {\r\n                var data = nodeCrypto.randomBytes(size);\r\n                return data;\r\n            }\r\n            else if (typeof Uint8Array === \"function\") {\r\n                var data = new Uint8Array(size);\r\n                if (typeof crypto !== \"undefined\") {\r\n                    crypto.getRandomValues(data);\r\n                }\r\n                else if (typeof msCrypto !== \"undefined\") {\r\n                    msCrypto.getRandomValues(data);\r\n                }\r\n                else {\r\n                    FillRandomBytes(data, size);\r\n                }\r\n                return data;\r\n            }\r\n            else {\r\n                var data = new Array(size);\r\n                FillRandomBytes(data, size);\r\n                return data;\r\n            }\r\n        }\r\n        function CreateUUID() {\r\n            var data = GenRandomBytes(UUID_SIZE);\r\n            // mark as random - RFC 4122 § 4.4\r\n            data[6] = data[6] & 0x4f | 0x40;\r\n            data[8] = data[8] & 0xbf | 0x80;\r\n            var result = \"\";\r\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                var byte = data[offset];\r\n                if (offset === 4 || offset === 6 || offset === 8) {\r\n                    result += \"-\";\r\n                }\r\n                if (byte < 16) {\r\n                    result += \"0\";\r\n                }\r\n                result += byte.toString(16).toLowerCase();\r\n            }\r\n            return result;\r\n        }\r\n        function CreateUniqueKey() {\r\n            var key;\r\n            do {\r\n                key = \"@@WeakMap@@\" + CreateUUID();\r\n            } while (hasOwn.call(keys, key));\r\n            keys[key] = true;\r\n            return key;\r\n        }\r\n        function GetOrCreateWeakMapTable(target, create) {\r\n            if (!hasOwn.call(target, rootKey)) {\r\n                if (!create) {\r\n                    return undefined;\r\n                }\r\n                Object.defineProperty(target, rootKey, { value: Object.create(null) });\r\n            }\r\n            return target[rootKey];\r\n        }\r\n        return WeakMap;\r\n    }\r\n    // hook global Reflect\r\n    (function (__global) {\r\n        if (typeof __global.Reflect !== \"undefined\") {\r\n            if (__global.Reflect !== Reflect) {\r\n                for (var p in Reflect) {\r\n                    __global.Reflect[p] = Reflect[p];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            __global.Reflect = Reflect;\r\n        }\r\n    })(typeof window !== \"undefined\" ? window :\r\n        typeof WorkerGlobalScope !== \"undefined\" ? self :\r\n            typeof global !== \"undefined\" ? global :\r\n                Function(\"return this;\")());\r\n})(Reflect || (Reflect = {}));\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"crypto\":2}],15:[function(require,module,exports){\nmodule.exports={\r\n  \"name\": \"jaydata\",\r\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\r\n  \"keywords\": [\r\n    \"HTML5 data management\",\r\n    \"JavaScript\",\r\n    \"JavaScript Language Query\",\r\n    \"JSLQ\",\r\n    \"OData\",\r\n    \"SQLite\",\r\n    \"WebSQL\",\r\n    \"IndexedDB\",\r\n    \"YQL\",\r\n    \"Facebook\",\r\n    \"cross-platform\",\r\n    \"iPhone\",\r\n    \"Android\"\r\n  ],\r\n  \"version\": \"1.5.1\",\r\n  \"homepage\": \"http://jaydata.org\",\r\n  \"author\": {\r\n    \"name\": \"JayData\",\r\n    \"url\": \"http://jaydata.org\"\r\n  },\r\n  \"dependencies\": {\r\n    \"acorn\": \"^3.0.2\",\r\n    \"atob\": \"^2.0.0\",\r\n    \"btoa\": \"^1.1.2\",\r\n    \"dot\": \"^1.0.3\",\r\n    \"jaydata-dynamic-metadata\": \"^0.0.5\",\r\n    \"jaydata-error-handler\": \"^0.0.1\",\r\n    \"jaydata-odatajs\": \"^4.0.0\",\r\n    \"jaydata-promise-handler\": \"^0.0.1\",\r\n    \"odata-metadata\": \"^0.1.0\",\r\n    \"xmldom\": \"^0.1.19\"\r\n  },\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Dániel József\"\r\n    },\r\n    {\r\n      \"name\": \"Hajnalka Battancs\"\r\n    },\r\n    {\r\n      \"name\": \"János Roden\"\r\n    },\r\n    {\r\n      \"name\": \"László Horváth\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Zentai\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Nochta\"\r\n    },\r\n    {\r\n      \"name\": \"Róbert Bónay\"\r\n    },\r\n    {\r\n      \"name\": \"Szabolcs Czinege\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Borza\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Lázár\"\r\n    },\r\n    {\r\n      \"name\": \"Zoltán Gyebrovszki\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.6.0\"\r\n  },\r\n  \"license\": \"(MIT OR GPL-2.0)\",\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.1.18\",\r\n    \"babel-eslint\": \"^5.0.0-beta4\",\r\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-register\": \"^6.2.0\",\r\n    \"babelify\": \"^7.2.0\",\r\n    \"browserify\": \"^12.0.1\",\r\n    \"browserify-derequire\": \"^0.9.4\",\r\n    \"browserify-shim\": \"^3.8.11\",\r\n    \"chai\": \"^3.4.1\",\r\n    \"del\": \"^2.2.0\",\r\n    \"google-closure-compiler\": \"^20151015.0.0\",\r\n    \"gulp\": \"^3.9.0\",\r\n    \"gulp-babel\": \"^6.1.1\",\r\n    \"gulp-browserify\": \"^0.5.1\",\r\n    \"gulp-closure-compiler\": \"^0.3.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-derequire\": \"^2.1.0\",\r\n    \"gulp-eslint\": \"^1.1.1\",\r\n    \"gulp-footer\": \"^1.0.5\",\r\n    \"gulp-header\": \"^1.7.1\",\r\n    \"gulp-nightwatch\": \"^0.2.6\",\r\n    \"gulp-nuget-pack\": \"0.0.6\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-replace\": \"^0.5.4\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-uglify\": \"^1.5.1\",\r\n    \"gulp-vinyl-zip\": \"^1.1.2\",\r\n    \"gulp-webserver\": \"^0.9.1\",\r\n    \"istanbul\": \"^0.4.1\",\r\n    \"jaguarjs-jsdoc\": \"0.0.1\",\r\n    \"jsdoc\": \"^3.4.0\",\r\n    \"minimist\": \"^1.2.0\",\r\n    \"nightwatch\": \"^0.8.8\",\r\n    \"npm\": \"^3.5.2\",\r\n    \"selenium-standalone\": \"^4.7.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"^1.1.0\",\r\n    \"yargs\": \"^3.31.0\"\r\n  },\r\n  \"browserify-shim\": {\r\n    \"atob\": \"global:atob\",\r\n    \"btoa\": \"global:btoa\",\r\n    \"jquery\": \"global:jQuery\",\r\n    \"jaydata-odatajs\": \"global:odatajs\",\r\n    \"angular\": \"global:angular\",\r\n    \"Handlebars\": \"global:Handlebars\",\r\n    \"kendo\": \"global:kendo\",\r\n    \"ko\": \"global:ko\",\r\n    \"q\": \"global:Q\",\r\n    \"Ext\": \"global:Ext\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _jaydataDynamicMetadata = require('jaydata-dynamic-metadata');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.DynamicMetadata = _jaydataDynamicMetadata.DynamicMetadata;\nvar dynamicMetadata = new _jaydataDynamicMetadata.DynamicMetadata(_index2.default);\n_index2.default.service = dynamicMetadata.service.bind(dynamicMetadata);\n_index2.default.initService = dynamicMetadata.initService.bind(dynamicMetadata);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31,\"jaydata-dynamic-metadata\":6}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContainerInstance = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nexports.ContainerCtor = ContainerCtor;\n\nvar _initializeJayData = require('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _jaydataErrorHandler = require('jaydata-error-handler');\n\nvar _Extensions = require('./Extensions.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Container = new ContainerCtor();\n\nvar ContainerInstance = exports.ContainerInstance = Container;\n\nfunction ContainerCtor(parentContainer) {\n  var parent = parentContainer;\n  if (parent) {\n    parent.addChildContainer(this);\n  }\n\n  var classNames = {};\n  var consolidatedClassNames = [];\n  var classTypes = [];\n\n  this.classNames = classNames;\n  this.consolidatedClassNames = consolidatedClassNames;\n  this.classTypes = classTypes;\n\n  var mappedTo = [];\n  this.mappedTo = mappedTo;\n\n  var self = this;\n\n  this[\"holder\"] = null;\n\n  var IoC = function IoC(type, parameters) {\n    var t = self.resolveType(type);\n    var inst = Object.create(t.prototype);\n    t.apply(inst, parameters);\n    return inst;\n  };\n\n  var pendingResolutions = {};\n  this.pendingResolutions = pendingResolutions;\n\n  function addPendingResolution(name, onResolved) {\n    pendingResolutions[name] = pendingResolutions[name] || [];\n    pendingResolutions[name].push(onResolved);\n  }\n\n  this.addChildContainer = function (container) {\n    //children.push(container);\n  };\n\n  this.createInstance = function (type, parameters) {\n    return IoC(type, parameters);\n  };\n\n  this.mapType = function (aliasTypeOrName, realTypeOrName) {\n    _jaydataErrorHandler.Guard.requireValue(\"aliasType\", aliasTypeOrName);\n    _jaydataErrorHandler.Guard.requireValue(\"realType\", realTypeOrName);\n    var aliasT = this.getType(aliasTypeOrName);\n    var realT = this.getType(realTypeOrName);\n    var aliasPos = classTypes.indexOf(aliasT);\n    var realPos = classTypes.indexOf(realT);\n    mappedTo[aliasPos] = realPos;\n  },\n\n  //this.resolve = function (type, parameters) {\n  //    var classFunction = this.resolveType(type, parameters);\n  //    return new classFunction(parameters);\n  //};\n\n  this.isPrimitiveType = function (type) {\n    var t = this.resolveType(type);\n\n    switch (true) {\n      case t === Number:\n      case t === String:\n      case t === Date:\n      case t === Boolean:\n      case t === Array:\n      case t === Object:\n\n      case t === _initializeJayData2.default.Number:\n      case t === _initializeJayData2.default.Integer:\n      case t === _initializeJayData2.default.Date:\n      case t === _initializeJayData2.default.String:\n      case t === _initializeJayData2.default.Boolean:\n      case t === _initializeJayData2.default.Array:\n      case t === _initializeJayData2.default.Object:\n      case t === _initializeJayData2.default.Guid:\n\n      case t === _initializeJayData2.default.Byte:\n      case t === _initializeJayData2.default.SByte:\n      case t === _initializeJayData2.default.Decimal:\n      case t === _initializeJayData2.default.Float:\n      case t === _initializeJayData2.default.Int16:\n      case t === _initializeJayData2.default.Int32:\n      case t === _initializeJayData2.default.Int64:\n      case t === _initializeJayData2.default.DateTimeOffset:\n      case t === _initializeJayData2.default.Time:\n      case t === _initializeJayData2.default.Day:\n      case t === _initializeJayData2.default.Duration:\n\n      case t === _initializeJayData2.default.SimpleBase:\n      case t === _initializeJayData2.default.Geospatial:\n      case t === _initializeJayData2.default.GeographyBase:\n      case t === _initializeJayData2.default.GeographyPoint:\n      case t === _initializeJayData2.default.GeographyLineString:\n      case t === _initializeJayData2.default.GeographyPolygon:\n      case t === _initializeJayData2.default.GeographyMultiPoint:\n      case t === _initializeJayData2.default.GeographyMultiLineString:\n      case t === _initializeJayData2.default.GeographyMultiPolygon:\n      case t === _initializeJayData2.default.GeographyCollection:\n      case t === _initializeJayData2.default.GeometryBase:\n      case t === _initializeJayData2.default.GeometryPoint:\n      case t === _initializeJayData2.default.GeometryLineString:\n      case t === _initializeJayData2.default.GeometryPolygon:\n      case t === _initializeJayData2.default.GeometryMultiPoint:\n      case t === _initializeJayData2.default.GeometryMultiLineString:\n      case t === _initializeJayData2.default.GeometryMultiPolygon:\n      case t === _initializeJayData2.default.GeometryCollection:\n\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  this.resolveName = function (type) {\n    var t = this.resolveType(type);\n    var tPos = classTypes.indexOf(t);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.resolveType = function (typeOrName, onResolved) {\n    var t = typeOrName;\n    t = this.getType(t, onResolved ? true : false, onResolved);\n    var posT = classTypes.indexOf(t);\n    return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\n  };\n\n  this.getType = function (typeOrName, doNotThrow, onResolved) {\n    _jaydataErrorHandler.Guard.requireValue(\"typeOrName\", typeOrName);\n    if (typeof typeOrName === 'function') {\n      return typeOrName;\n    };\n\n    if (!(typeOrName in classNames)) {\n      if (parent) {\n        var tp = parent.getType(typeOrName, true);\n        if (tp) return tp;\n      }\n      if (onResolved) {\n        addPendingResolution(typeOrName, onResolved);\n        return;\n      } else if (doNotThrow) {\n        return undefined;\n      } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Unable to resolve type:\" + typeOrName));\n      }\n    };\n    var result = classTypes[classNames[typeOrName]];\n    if (onResolved) {\n      onResolved(result);\n    }\n    return result;\n  };\n\n  this.getName = function (typeOrName) {\n    var t = this.getType(typeOrName);\n    var tPos = classTypes.indexOf(t);\n    if (tPos == -1) _jaydataErrorHandler.Guard.raise(\"unknown type to request name for: \" + typeOrName);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.getTypes = function () {\n    var keys = Object.keys(classNames);\n    var ret = [];\n    for (var i = 0; i < keys.length; i++) {\n      var className = keys[i];\n      ret.push({\n        name: className,\n        type: classTypes[classNames[className]],\n        toString: function toString() {\n          return this.name;\n        }\n      });\n    }\n    return ret;\n  };\n\n  //this.getTypeName( in type);\n  //this.resolveType()\n  //this.inferTypeFromValue = function (value) {\n\n  this.getTypeName = function (value) {\n    //TODO refactor\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case 'object':\n        if (value == null) return '$data.Object';\n        if (value instanceof Array) return '$data.Array';\n        if (value.getType) return value.getType().fullName;\n        if (value instanceof Date) return '$data.Date';\n        if (value instanceof _initializeJayData2.default.Guid) return '$data.Guid';\n        if (value instanceof _initializeJayData2.default.DateTimeOffset) return '$data.DateTimeOffset';\n        if (value instanceof _initializeJayData2.default.GeographyPoint) return '$data.GeographyPoint';\n        if (value instanceof _initializeJayData2.default.GeographyLineString) return '$data.GeographyLineString';\n        if (value instanceof _initializeJayData2.default.GeographyPolygon) return '$data.GeographyPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPoint) return '$data.GeographyMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeographyMultiLineString) return '$data.GeographyMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyCollection) return '$data.GeographyCollection';\n        if (value instanceof _initializeJayData2.default.GeographyBase) return '$data.GeographyBase';\n        if (value instanceof _initializeJayData2.default.GeometryPoint) return '$data.GeometryPoint';\n        if (value instanceof _initializeJayData2.default.GeometryLineString) return '$data.GeometryLineString';\n        if (value instanceof _initializeJayData2.default.GeometryPolygon) return '$data.GeometryPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPoint) return '$data.GeometryMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeometryMultiLineString) return '$data.GeometryMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryCollection) return '$data.GeometryCollection';\n        if (value instanceof _initializeJayData2.default.GeometryBase) return '$data.GeometryBase';\n        if (value instanceof _initializeJayData2.default.Geospatial) return '$data.Geospatial';\n        if (value instanceof _initializeJayData2.default.SimpleBase) return '$data.SimpleBase';\n        if (typeof value.toHexString === 'function') return '$data.ObjectID';\n      //if(value instanceof \"number\") return\n      default:\n        return typeof value === 'undefined' ? 'undefined' : _typeof(value);\n    }\n  };\n\n  this.isTypeRegistered = function (typeOrName) {\n    if (typeof typeOrName === 'function') {\n      return classTypes.indexOf(typeOrName) > -1;\n    } else {\n      return typeOrName in classNames;\n    }\n  };\n\n  this.unregisterType = function (type) {\n    _jaydataErrorHandler.Guard.raise(\"Unimplemented\");\n  };\n\n  this.getDefault = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    switch (t) {\n      case _initializeJayData2.default.Number:\n        return 0.0;\n      case _initializeJayData2.default.Float:\n        return 0.0;\n      case _initializeJayData2.default.Decimal:\n        return '0.0';\n      case _initializeJayData2.default.Integer:\n        return 0;\n      case _initializeJayData2.default.Int16:\n        return 0;\n      case _initializeJayData2.default.Int32:\n        return 0;\n      case _initializeJayData2.default.Int64:\n        return '0';\n      case _initializeJayData2.default.Byte:\n        return 0;\n      case _initializeJayData2.default.SByte:\n        return 0;\n      case _initializeJayData2.default.String:\n        return null;\n      case _initializeJayData2.default.Boolean:\n        return false;\n      default:\n        return null;\n    }\n  };\n\n  //name array ['', '', '']\n  this.getIndex = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    return classTypes.indexOf(t);\n  };\n\n  this.resolveByIndex = function (index) {\n    return classTypes[index];\n  };\n\n  this.registerType = function (nameOrNamesArray, type, factoryFunc) {\n    ///<signature>\n    ///<summary>Registers a type and optionally a lifetimeManager with a name\n    ///that can be used to later resolve the type or create new instances</summary>\n    ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\n    ///<param name=\"type\" type=\"Function\">The type to register</param>\n    ///<param name=\"instanceManager\" type=\"Function\"></param>\n    ///</signature>\n    ///<signature>\n    ///<summary>Registers a new type that </summary>\n    ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\n    ///<param name=\"actualType\" type=\"Function\">The type to register</param>\n    ///</signature>\n\n    ///TODO remove\n    /*if (typeof typeNameOrAlias === 'string') {\r\n        if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n            Guard.raise(\"Type already registered. Remove first\");\r\n        }\r\n    }*/\n\n    if (!nameOrNamesArray) {\n      return;\n    }\n\n    //todo add ('number', 'number')\n    if (typeof type === \"string\") {\n      type = self.resolveType(type);\n    }\n\n    var namesArray = [];\n    if (typeof nameOrNamesArray === 'string') {\n      var tmp = [];\n      tmp.push(nameOrNamesArray);\n      namesArray = tmp;\n    } else {\n      namesArray = nameOrNamesArray;\n    }\n\n    for (var i = 0; i < namesArray.length; i++) {\n      var parts = namesArray[i].split('.');\n      var item = {};\n      item.shortName = parts[parts.length - 1];\n      item.fullName = namesArray[i];\n      namesArray[i] = item;\n    }\n\n    //if (type.\n\n    var creatorFnc = function creatorFnc() {\n      return IoC(type, arguments);\n    };\n\n    if (typeof intellisense !== 'undefined') {\n      intellisense.annotate(creatorFnc, type);\n    }\n\n    for (var i = 0, l = namesArray.length; i < l; i++) {\n      var item = namesArray[i];\n      if (!(\"create\" + item.shortName in self)) {\n        if (typeof factoryFunc === 'function') {\n          self[\"create\" + item.shortName] = factoryFunc;\n        } else {\n          self[\"create\" + item.shortName] = creatorFnc;\n        }\n      }\n\n      var typePos = classTypes.indexOf(type);\n      if (typePos == -1) {\n        //new type\n        typePos = classTypes.push(type) - 1;\n        var fn = item.fullName;\n        consolidatedClassNames[typePos] = item.fullName;\n      };\n\n      classNames[item.fullName] = typePos;\n\n      var pending = pendingResolutions[item.fullName] || [];\n      if (pending.length > 0) {\n        pending.forEach(function (t) {\n          t(type);\n        });\n        pendingResolutions[item.fullName] = [];\n      }\n    }\n    if (parent) {\n      parent.registerType.apply(parent, arguments);\n    }\n    if (!type.name) {\n      try {\n        type.name = namesArray[0].shortName;\n      } catch (err) {}\n    }\n  };\n\n  var _converters = {\n    from: {},\n    to: {}\n  };\n  this.converters = _converters;\n\n  this.convertTo = function (value, tType, eType /*if Array*/, options) {\n    _jaydataErrorHandler.Guard.requireValue(\"typeOrName\", tType);\n\n    if (_jaydataErrorHandler.Guard.isNullOrUndefined(value)) return value;\n\n    var sourceTypeName = Container.getTypeName(value);\n    var sourceType = Container.resolveType(sourceTypeName);\n    var sourceTypeName = Container.resolveName(sourceType);\n    var targetType = Container.resolveType(tType);\n    var targetTypeName = Container.resolveName(targetType);\n\n    var result;\n    try {\n      if (typeof targetType['from' + sourceTypeName] === 'function') {\n        // target from\n        result = targetType['from' + sourceTypeName].apply(targetType, arguments);\n      } else if (typeof sourceType['to' + targetTypeName] === 'function') {\n        // source to\n        result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\n        // target from source\n        result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\n      } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\n        // source to target\n        result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\n      } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\n        result = value;\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\n        // target from anything\n        result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\n      } else {\n        throw \"converter not found\";\n      }\n    } catch (e) {\n      _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\n    }\n\n    if (targetType === _initializeJayData2.default.Array && eType && Array.isArray(result)) {\n      for (var i = 0; i < result.length; i++) {\n        result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\n      }\n    }\n\n    return result;\n  };\n  this.registerConverter = function (target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\n    //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\n    //registerConverter($data.Guid, $data.String, fn, fn);\n\n    var targetName = Container.resolveName(target);\n    if (Container.isTypeRegistered(sourceOrToConverters)) {\n      //isSource\n      _converters.to[targetName] = _converters.to[targetName] || {};\n      _converters.from[targetName] = _converters.from[targetName] || {};\n\n      var sourceName = Container.resolveName(sourceOrToConverters);\n\n      if (toConverterOrFromConverters) _converters.to[targetName][sourceName] = toConverterOrFromConverters;\n      if (fromConverter) _converters.from[targetName][sourceName] = fromConverter;\n    } else {\n      // converterGroup\n\n      //fromConverters\n      if (_converters.to[targetName]) {\n        _converters.to[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\n      } else {\n        _converters.to[targetName] = sourceOrToConverters;\n      }\n\n      //toConverters\n      if (_converters.from[targetName]) {\n        _converters.from[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\n      } else {\n        _converters.from[targetName] = toConverterOrFromConverters;\n      }\n    }\n  };\n\n  this.createOrGetNamespace = function (parts, root) {\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      if (!root[part]) {\n        var ns = {};\n        ns.__namespace = true;\n        root[part] = ns;\n      }\n      root = root[part];\n    }\n    return root;\n  };\n}\n\n},{\"./Extensions.js\":18,\"./initializeJayData.js\":32,\"jaydata-error-handler\":8}],18:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar StringFunctions = exports.StringFunctions = {\n    startsWith: function startsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) === 0;\n    },\n    endsWith: function endsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.slice(-str.length) === str;\n    },\n    contains: function contains() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) >= 0;\n    }\n};\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.Logger', _TypeSystem2.default.TraceBase, null, {\n    log: function log() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.log.apply(console, arguments);\n    },\n    warn: function warn() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.warn.apply(console, arguments);\n    },\n    error: function error() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.error.apply(console, arguments);\n    },\n\n    getDateFormat: function getDateFormat() {\n        var date = new Date();\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\n    }\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],20:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.TraceBase', null, null, {\n    log: function log() {},\n    warn: function warn() {},\n    error: function error() {}\n});\n\n_TypeSystem2.default.Trace = new _TypeSystem2.default.TraceBase();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],21:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemberDefinition = exports.Container = exports.$C = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _initializeJayData = require('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _jaydataErrorHandler = require('jaydata-error-handler');\n\nvar _Extensions = require('./Extensions.js');\n\nvar _Container = require('./Container.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n    constructor: function (typeName) {\r\n        ///<param name=\"paramIndex\" type=\"integer\">\r\n        this.typeName = typeName;\r\n    },\r\n    typeName: {}\r\n});*/\n\n//var e = new Entity();\n\n/*$data.Interface = Class.define(\"Interface\", null, null, {\r\n    constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n},\r\n{\r\n    define: function (name, definition) {\r\n        var result = Class.define(name, $data.Interface, null, null, definition);\r\n        delete result.__class;\r\n        result.__interface = true;\r\n        return result;\r\n    }\r\n});\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n    propertyChanged: { dataType: $data.Event }\r\n}, {\r\n    createFromInstance: function(instance) {\r\n        var propNames = instance.getClass().memberDefinitions.f\r\n    }\r\n});*/\n\n_initializeJayData2.default.StringFunctions = _Extensions.StringFunctions;\n\nvar _modelHolder = null;\n_initializeJayData2.default.setModelContainer = function (modelHolder) {\n  _modelHolder = modelHolder;\n};\n\n_initializeJayData2.default.defaults = _initializeJayData2.default.defaults || {};\n_initializeJayData2.default.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\n_initializeJayData2.default.defaults.openTypeDefaultType = '$data.Object';\n_initializeJayData2.default.defaults.openTypeDefaultValue = function () {\n  return {};\n};\n\n_initializeJayData2.default.__global = process.browser ? window : global;\n_initializeJayData2.default.setGlobal = function (obj) {\n  _initializeJayData2.default.__global = obj;\n};\n\n(function init($data) {\n\n  function il(msg) {\n    if (typeof intellisense !== 'undefined') {\n      if (!intellisense.i) {\n        intellisense.i = 0;\n      }\n      intellisense.i = intellisense.i + 1;\n      intellisense.logMessage(msg + \":\" + intellisense.i);\n    }\n  }\n\n  function MemberDefinition(memberDefinitionData, definedClass) {\n\n    ///<field name=\"name\" type=\"String\">*</field>\n    ///<field name=\"dataType\" type=\"Object\">*</field>\n    ///<field name=\"elementType\" type=\"Object\"></field>\n    ///<field name=\"kind\" type=\"String\" />\n    ///<field name=\"classMember\" type=\"Boolean\" />\n    ///<field name=\"set\" type=\"Function\" />\n    ///<field name=\"get\" type=\"Function\" />\n    ///<field name=\"value\" type=\"Object\" />\n    ///<field name=\"initialValue\" type=\"Object\" />\n    ///<field name=\"method\" type=\"Function\" />\n    ///<field name=\"enumerable\" type=\"Boolean\" />\n    ///<field name=\"configurable\" type=\"Boolean\" />\n    ///<field name=\"key\" type=\"Boolean\" />\n    ///<field name=\"computed\" type=\"Boolean\" />\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\n\n    this.kind = MemberTypes.property;\n    //this.definedBy = definedClass;\n    Object.defineProperty(this, 'definedBy', {\n      value: definedClass,\n      enumerable: false,\n      configurable: false,\n      writable: false\n    });\n    if (memberDefinitionData) {\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\n        this.method = memberDefinitionData;\n        this.kind = MemberTypes.method;\n      } else {\n        this.enumerable = true;\n        this.configurable = true;\n        if (typeof memberDefinitionData === \"number\") {\n          this.value = memberDefinitionData;\n          this.type = $data.Number;\n          this.dataType = $data.Number;\n        } else if (typeof memberDefinitionData === \"string\") {\n          this.value = memberDefinitionData;\n          this.dataType = $data.String;\n          this.type = $data.String;\n        } else {\n          for (var item in memberDefinitionData) {\n            if (memberDefinitionData.hasOwnProperty(item)) {\n              this[item] = memberDefinitionData[item];\n            }\n          }\n        }\n      }\n      if (this.type !== undefined) {\n        this.dataType = this.dataType || this.type;\n      } else {\n        this.type = this.dataType;\n      }\n\n      this.originalType = this.type;\n      if (this.elementType !== undefined) {\n        this.originalElementType = this.elementType;\n      }\n    }\n  }\n  MemberDefinition.prototype.createPropertyDescriptor = function (classFunction, value) {\n    ///<returns type=\"Object\" />\n    var pd = this;\n    var result = {\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\n      configurable: this.configurable == undefined ? true : this.configurable\n    };\n    if (this.set && this.get) {\n      result.set = this.set;\n      result.get = this.get;\n    } else if (\"value\" in this || value) {\n      result.value = value || this.value;\n      //TODO\n      //result.writable = this.writable;\n      result.writable = true;\n    } else {\n      result.set = function (value) {\n        this.storeProperty(pd, value);\n      };\n      result.get = function () {\n        return this.retrieveProperty(pd);\n      };\n    }\n    return result;\n  };\n  MemberDefinition.prototype.createStorePropertyDescriptor = function (value) {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: true,\n      configurable: pd.configurable,\n      value: value\n    };\n  };\n  MemberDefinition.prototype.createGetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(callback, tran) {\n        return this.getProperty(pd, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.prototype.createSetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(_value, callback, tran) {\n        return this.setProperty(pd, _value, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.translateDefinition = function (memDef, name, classFunction) {\n    var holder = classFunction;\n    var memberDefinition;\n\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\n      holder = Container.resolveType(memDef.type);\n      if (typeof holder.translateDefinition === 'function') {\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\n        memberDefinition.name = memberDefinition.name || name;\n      } else {\n        holder = classFunction;\n      }\n    }\n\n    if (!(memberDefinition instanceof MemberDefinition)) {\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\n      memberDefinition.name = name;\n    }\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\n\n    var t = memberDefinition.type;\n    var et = memberDefinition.elementType;\n\n    function addChildThunk(referencedType) {\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\n        classFunction.childResolverThunks.push(function () {\n          if (referencedType.resolveForwardDeclarations) {\n            referencedType.resolveForwardDeclarations();\n          }\n        });\n      }\n    }\n\n    addChildThunk(t);\n    addChildThunk(et);\n\n    if (\"string\" === typeof t) {\n      if (\"@\" === t[0]) {\n        memberDefinition.type = t.substr(1);\n        memberDefinition.dataType = t.substr(1);\n      } else {\n        //forward declared types get this callback when type is registered\n        classFunction.resolverThunks.push(function () {\n          var rt = classFunction.container.resolveType(t);\n          addChildThunk(rt);\n          memberDefinition.type = rt;\n          memberDefinition.dataType = rt;\n        });\n      }\n    }\n\n    if (et) {\n      if (\"string\" === typeof et) {\n        if (\"@\" === et[0]) {\n          memberDefinition.elementType = et.substr(1);\n        } else {\n          //forward declared types get this callback when type is registered\n          classFunction.resolverThunks.push(function () {\n            var rt = classFunction.container.resolveType(et);\n            addChildThunk(rt);\n            memberDefinition.elementType = rt;\n          });\n        }\n      }\n    }\n\n    //if (!classFunction)\n\n    classFunction.resolveForwardDeclarations = function () {\n      classFunction.resolveForwardDeclarations = function () {};\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\n      this.resolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.resolverThunks = [];\n      this.childResolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.childResolverThunks = [];\n    };\n\n    return memberDefinition;\n  };\n\n  MemberDefinition.prototype.toJSON = function () {\n    var property = {};\n    for (var name in this) {\n      if (name !== 'defineBy' && name !== 'storageModel') {\n        if ((name === 'type' || name === 'dataType') && this[name] && typeof this[name] === 'function') {\n          try {\n            property[name] = Container.resolveName(this[name]);\n          } catch (e) {\n            property[name] = this[name];\n          }\n        } else {\n          property[name] = this[name];\n        }\n      }\n    }\n    return property;\n  };\n\n  $data.MemberDefinition = MemberDefinition;\n\n  var memberDefinitionPrefix = '$';\n\n  function MemberDefinitionCollection() {};\n  MemberDefinitionCollection.prototype = {\n    clearCache: function clearCache() {\n      this.arrayCache = undefined;\n      this.pubMapPropsCache = undefined;\n      this.keyPropsCache = undefined;\n      this.propByTypeCache = undefined;\n      this.pubMapMethodsCache = undefined;\n      this.pubMapPropNamesCache = undefined;\n    },\n    asArray: function asArray() {\n      if (!this.arrayCache) {\n        this.arrayCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0) this.arrayCache.push(this[i]);\n        }\n      }\n      return this.arrayCache;\n    },\n    getPublicMappedProperties: function getPublicMappedProperties() {\n      if (!this.pubMapPropsCache) {\n        this.pubMapPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropsCache.push(this[i]);\n        }\n      }\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\n    },\n    getPublicMappedPropertyNames: function getPublicMappedPropertyNames() {\n      if (!this.pubMapPropNamesCache) {\n        this.pubMapPropNamesCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropNamesCache.push(this[i].name);\n        }\n      }\n      return this.pubMapPropNamesCache;\n    },\n    getKeyProperties: function getKeyProperties() {\n      if (!this.keyPropsCache) {\n        this.keyPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key) this.keyPropsCache.push(this[i]);\n        }\n      }\n      return this.keyPropsCache;\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\n    },\n    getPublicMappedMethods: function getPublicMappedMethods() {\n      if (!this.pubMapMethodsCache) {\n        this.pubMapMethodsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/) this.pubMapMethodsCache.push(this[i]);\n        }\n      }\n      return this.pubMapMethodsCache;\n    },\n    getPropertyByType: function getPropertyByType(type) {\n      if (!this.propByTypeCache) {\n        this.propByTypeCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type) this.propByTypeCache.push(this[i]);\n        }\n      }\n      return this.propByTypeCache;\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\n    },\n    getMember: function getMember(name) {\n      return this[memberDefinitionPrefix + name];\n    },\n    setMember: function setMember(value) {\n      this[memberDefinitionPrefix + value.name] = value;\n    }\n  };\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\n\n  function ClassEngineBase() {\n    this.classNames = {};\n  }\n\n  function MemberTypes() {\n    ///<field name=\"method\" type=\"string\" />\n    ///<field name=\"property\" type=\"string\" />\n    ///<field name=\"field\" type=\"string\" />\n    ///<field name=\"complexProperty\" type=\"string\" />\n  }\n  MemberTypes.__enum = true;\n\n  MemberTypes.method = \"method\";\n  MemberTypes.property = \"property\";\n  MemberTypes.navProperty = \"navProperty\";\n  MemberTypes.complexProperty = \"complexProperty\";\n  MemberTypes.field = \"field\";\n\n  $data.MemberTypes = MemberTypes;\n\n  //function classToJSON() {\n  //    var ret = {};\n  //    for (var i in this) {\n  //        if (this.hasOwnProperty(i)) {\n  //            ret[i] = this[i];\n  //        }\n  //    }\n  //    return ret;\n  //}\n  //$data.Base.toJSON = classToJSON;\n\n  ClassEngineBase.prototype = {\n\n    //getClass: function (classReference) {\n    //},\n\n    //getProperties: function (classFunction) {\n    //    return classFunction.propertyDefinitions;\n    //},\n\n    define: function define(className, baseClass, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      return this.defineEx(className, [{\n        type: baseClass\n      }], container, instanceDefinition, classDefinition);\n    },\n    defineEx: function defineEx(className, baseClasses, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\n      ///                         { type: $data.Mixin1, },\n      ///                         { type: $data.Mixin2, },\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\n      ///                     ], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      container = container || $data.Container;\n\n      if (baseClasses.length == 0) {\n        baseClasses.push({\n          type: $data.Base\n        });\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\n        baseClasses[0].type = $data.Base;\n      }\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\n        if (typeof baseClasses[i] === 'function') baseClasses[i] = {\n          type: baseClasses[i]\n        };\n      }\n\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\n\n      var classNameParts = className.split('.');\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\n\n      $data.models = $data.models || {};\n      var root = container === $data.Container ? $data.models : container;\n      root = $data.Container.createOrGetNamespace(classNameParts, root);\n\n      var classFunction = null;\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\n      classFunction.fullName = className;\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\n      //classFunction.name = shortClassName;\n      classFunction.container = container;\n      classFunction.container.registerType(className, classFunction);\n\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\n\n      if (typeof intellisense !== 'undefined') {\n        if (instanceDefinition && instanceDefinition.constructor) {\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\n        }\n      }\n\n      root[shortClassName] = this.classNames[className] = classFunction;\n\n      if (classNameParts[0] == '$data') {\n        var _classNameParts = [].concat(classNameParts);\n        _classNameParts.shift();\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data);\n        _root[shortClassName] = classFunction;\n      }\n      if (_modelHolder && container == $data.Container) {\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder);\n        innerNS[shortClassName] = classFunction;\n      }\n\n      //classFunction.toJSON = classToJSON;\n      var baseCount = classFunction.baseTypes.length;\n      for (var i = 0; i < baseCount; i++) {\n        var b = classFunction.baseTypes[i];\n        if (\"inheritedTypeProcessor\" in b) {\n          b.inheritedTypeProcessor(classFunction);\n        }\n      }\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\n      //classFunction.constructor = instanceDefinition.constructor;\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\n      return classFunction;\n    },\n    classFunctionBuilder: function classFunctionBuilder(name, base, classDefinition, instanceDefinition) {\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' + body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\n    },\n    bodyBuilder: function bodyBuilder(bases, classDefinition, instanceDefinition) {\n      var mixin = '';\n      var body = '';\n      var propagation = '';\n\n      for (var i = 0, l = bases.length; i < l; i++) {\n        var base = bases[i];\n        var index = i;\n        if (index == 0) {\n          //ctor func\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\n          }\n        } else {\n          if (base && base.type && base.propagateTo) {\n            //propagation\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' + '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\n            //mixin\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\n          }\n        }\n      }\n      if (instanceDefinition && instanceDefinition.constructor != Object) body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\n\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\n    },\n\n    buildType: function buildType(classFunction, baseClasses, instanceDefinition, classDefinition) {\n      var baseClass = baseClasses[0].type;\n      classFunction.inheritsFrom = baseClass;\n\n      if (baseClass) {\n        classFunction.prototype = Object.create(baseClass.prototype);\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\n        classFunction.memberDefinitions.clearCache();\n\n        var staticDefs = baseClass.staticDefinitions;\n        if (staticDefs) {\n          staticDefs = staticDefs.asArray();\n          if (staticDefs) {\n            for (var i = 0; i < staticDefs.length; i++) {\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n            }\n          }\n        }\n        classFunction.baseTypes = baseClass.baseTypes ? [].concat(baseClass.baseTypes) : [];\n        for (var i = 0; i < baseClasses.length; i++) {\n          classFunction.baseTypes.push(baseClasses[i].type);\n        }\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\n        if (!classFunction.isAssignableTo) {\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\n            value: function value(type) {\n              return this === type || this.baseTypes.indexOf(type) >= 0;\n            },\n            writable: false,\n            enumerable: false,\n            configurable: false\n          });\n        }\n      }\n\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\n      if (classDefinition) {\n        if (openTypeDefinition) delete classDefinition.openType;\n        this.buildStaticMembers(classFunction, classDefinition);\n\n        if (classDefinition.constructor) classFunction.classConstructor = classDefinition.constructor;\n      }\n\n      if (instanceDefinition) {\n\n        //build open type member\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\n          if (typeof classFunction.openType == \"string\") {\n            openTypePropertyName = classFunction.openType;\n          }\n\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\n          if (definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Type Error\", \"OpenType default type missmatch\"));\n          }\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\n            if (memberType !== openTypeDefaultType) {\n              _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Type Error\", \"OpenType default type missmatch\"));\n            }\n          }\n          if (!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]) {\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : function () {\n              return {};\n            };\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue: defaultValue };\n          }\n        }\n\n        this.buildInstanceMembers(classFunction, instanceDefinition);\n      }\n\n      var mixins = [].concat(baseClasses);\n      mixins.shift();\n      if (Object.keys(mixins).length > 0) this.buildInstanceMixins(classFunction, mixins);\n\n      classFunction.__class = true;\n\n      classFunction.prototype.constructor = classFunction;\n\n      Object.defineProperty(classFunction.prototype, \"getType\", {\n        value: function value() {\n          return classFunction;\n        },\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n    },\n\n    addMethod: function addMethod(holder, name, method, propagation) {\n      if (!propagation || typeof intellisense !== 'undefined') {\n        holder[name] = method;\n      } else {\n        holder[name] = function () {\n          return method.apply(this[propagation], arguments);\n        };\n      }\n    },\n\n    addProperty: function addProperty(holder, name, propertyDescriptor, propagation) {\n\n      //holder[name] = {};\n\n      if (propagation) {\n        propertyDescriptor.configurable = true;\n        if (propertyDescriptor.get) {\n          var origGet = propertyDescriptor.get;\n          propertyDescriptor.get = function () {\n            if (!this[propagation]) _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"not inicialized\"));\n            return origGet.apply(this[propagation], arguments);\n          };\n        }\n        if (propertyDescriptor.set) {\n          var origSet = propertyDescriptor.set;\n          propertyDescriptor.set = function () {\n            if (!this[propagation]) _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"not inicialized\"));\n            origSet.apply(this[propagation], arguments);\n          };\n        }\n      }\n\n      Object.defineProperty(holder, name, propertyDescriptor);\n    },\n\n    addField: function addField(holder, name, field) {\n      _jaydataErrorHandler.Guard.raise(\"not implemented\");\n    },\n\n    buildMethod: function buildMethod(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\n    },\n\n    buildProperty: function buildProperty(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\n\n      //if lazyload TODO\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true && !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\n        var pdGetMethod = memberDefinition.createGetMethod();\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\n\n        var pdSetMethod = memberDefinition.createSetMethod();\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\n      }\n    },\n\n    buildMember: function buildMember(classFunction, memberDefinition, propagation, memberCollectionName) {\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\n      classFunction[memberCollectionName].setMember(memberDefinition);\n\n      switch (memberDefinition.kind) {\n        case MemberTypes.method:\n          this.buildMethod(classFunction, memberDefinition, propagation);\n          break;\n        case MemberTypes.navProperty:\n        case MemberTypes.complexProperty:\n        case MemberTypes.property:\n          this.buildProperty(classFunction, memberDefinition, propagation);\n          break;\n        default:\n          _jaydataErrorHandler.Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\n      }\n    },\n\n    buildStaticMembers: function buildStaticMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          memberDefinition.classMember = true;\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\n        }\n      }\n    },\n\n    buildInstanceMembers: function buildInstanceMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\n        }\n      }\n    },\n\n    copyMembers: function copyMembers(sourceType, targetType) {\n      ///<param name=\"sourceType\" type=\"Function\" />\n      ///<param name=\"targetType\" type=\"Function\" />\n      function il(msg) {\n        if (typeof intellisense === 'undefined') {\n          return;\n        }\n        intellisense.logMessage(msg);\n      }\n\n      Object.keys(sourceType.prototype).forEach(function (item, i, src) {\n        if (item !== 'constructor' && item !== 'toString') {\n          il(\"copying item:\" + item);\n          targetType.prototype[item] = sourceType[item];\n        }\n      });\n    },\n\n    buildInstanceMixins: function buildInstanceMixins(classFunction, mixinList) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"mixinList\" type=\"Array\"></param>\n\n      classFunction.mixins = classFunction.mixins || [];\n      classFunction.propagations = classFunction.propagations || [];\n\n      for (var i = 0; i < mixinList.length; i++) {\n        var item = mixinList[i];\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\n        if (item.propagateTo) {\n          this.buildInstancePropagation(classFunction, item);\n          classFunction.propagations.push(item);\n          classFunction.propagations[item.type.name] = true;\n        } else {\n          this.buildInstanceMixin(classFunction, item);\n          classFunction.mixins.push(item);\n          classFunction.mixins[item.type.name] = true;\n        }\n      };\n    },\n    buildInstanceMixin: function buildInstanceMixin(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i]);\n        }\n      }\n\n      if (typeObj.type.staticDefinitions) {\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\n          var itemName = staticDefs[i].name;\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n          }\n        }\n      }\n    },\n    buildInstancePropagation: function buildInstancePropagation(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\n        }\n      }\n    }\n\n  };\n  var Class;\n  $data.Class = Class = new ClassEngineBase();\n\n  $data.ContainerClass = _Container.ContainerCtor;\n\n  var c;\n  $data.Container = c = _Container.ContainerInstance;\n\n  $data.createContainer = function () {\n    return new _Container.ContainerCtor($data.Container);\n  };\n\n  var storeProperty = function storeProperty(memberDefinition, value) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    if (!this[backingFieldName]) {\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\n    } else {\n      this[backingFieldName] = value;\n    }\n  };\n  var retrieveProperty = function retrieveProperty(memberDefinition) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    return this[backingFieldName];\n  };\n\n  $data.Class.define('$data.Base', function Base() {}, null, {\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    setProperty: function setProperty(memberDefinition, value, callback) {\n      this[memberDefinition.name] = value;\n      callback();\n    },\n    getProperty: function getProperty(memberDefinition, callback) {\n      callback.apply(this, [this[memberDefinition.name]]);\n    }\n  }, {\n    create: function create() {\n      return Container.createInstance(this, arguments);\n    },\n    extend: function extend(name, container, instanceDefinition, classDefinition) {\n      if (container && !(container instanceof _Container.ContainerCtor)) {\n        classDefinition = instanceDefinition;\n        instanceDefinition = container;\n        container = undefined;\n      }\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n      return this.memberDefinitions.getMember(name);\n    },\n    addProperty: function addProperty(name, getterOrType, setterOrGetter, setter) {\n      var _getter = getterOrType;\n      var _setter = setterOrGetter;\n      var _type;\n      if (typeof _getter === 'string') {\n        _type = getterOrType;\n        _getter = setterOrGetter;\n        _setter = setter;\n      }\n\n      var propDef = {\n        notMapped: true,\n        storeOnObject: true,\n        get: typeof _getter === 'function' ? _getter : function () {},\n        set: typeof _setter === 'function' ? _setter : function () {},\n        type: _type\n      };\n\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\n      $data.Class.buildMember(this, memberDefinition);\n\n      this.memberDefinitions.clearCache();\n\n      return this;\n    },\n    addMember: function addMember(name, definition, isClassMember) {\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\n\n      if (isClassMember) {\n        memberDefinition.classMember = true;\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\n        this.staticDefinitions.clearCache();\n      } else {\n        $data.Class.buildMember(this, memberDefinition);\n        this.memberDefinitions.clearCache();\n      }\n      return this;\n    },\n    describeField: function describeField(name, definition) {\n      var memDef = this.memberDefinitions.getMember(name);\n      if (!memDef) {\n        this.addMember(name, definition);\n      } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\n      }\n      return this;\n    },\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    'from$data.Object': function from$dataObject(value) {\n      return value;\n    }\n  });\n\n  //override after typeSystem initialized\n\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\n    constructor: function constructor(paramIndex) {\n      ///<param name=\"paramIndex\" type=\"integer\" />\n      this.paramIndex = paramIndex;\n    },\n    paramIndex: {}\n  });\n})(_initializeJayData2.default);\n\n_initializeJayData2.default.defaultErrorCallback = function () {\n  //console.log('DEFAULT ERROR CALLBACK:');\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\n    (console.error || console.log).call(console, arguments[0]);\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\n  } else {\n    if (arguments[0] instanceof Error) {\n      _jaydataErrorHandler.Guard.raise(arguments[0]);\n    } else {\n      _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\n    }\n  }\n};\n_initializeJayData2.default.defaultSuccessCallback = function () {/*console.log('DEFAULT SUCCES CALLBACK');*/};\n_initializeJayData2.default.defaultNotifyCallback = function () {/*console.log('DEFAULT NOTIFY CALLBACK');*/};\n\n_initializeJayData2.default.typeSystem = {\n  __namespace: true,\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\n  //mix: function (type, mixin) {\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\n  //    type.mixins = type.mixins || [];\n  //    type.mixins.push(mixin);\n  //    return type;\n  //},\n  extend: function extend(target) {\n    /// <summary>\n    /// Extends an object with properties of additional parameters.\n    /// </summary>\n    /// <signature>\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\n    /// </signature>\n    /// <returns></returns>\n    if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && typeof target !== 'function') _jaydataErrorHandler.Guard.raise('Target must be object or function');\n\n    for (var i = 1; i < arguments.length; i++) {\n      var obj = arguments[i];\n      if (obj === null || typeof obj === 'undefined') continue;\n      for (var key in obj) {\n        target[key] = obj[key];\n      }\n    }\n    return target;\n  },\n  createCallbackSetting: function createCallbackSetting(callBack, defaultSetting) {\n    var setting = {\n      success: _initializeJayData2.default.defaultSuccessCallback,\n      error: _initializeJayData2.default.defaultErrorCallback,\n      notify: _initializeJayData2.default.defaultNotifyCallback\n    };\n\n    if (defaultSetting != undefined && defaultSetting != null) {\n      setting = defaultSetting;\n    }\n\n    var result;\n    if (callBack == null || callBack == undefined) {\n      result = setting;\n    } else if (typeof callBack == 'function') {\n      result = this.extend(setting, {\n        success: callBack\n      });\n    } else {\n      result = this.extend(setting, callBack);\n    }\n\n    function wrapCode(fn) {\n      var t = this;\n\n      function r() {\n        fn.apply(t, arguments);\n        fn = function fn() {};\n      }\n      return r;\n    }\n\n    if (typeof result.error === 'function') result.error = wrapCode(result.error);\n\n    return result;\n  },\n  createCtorParams: function createCtorParams(source, indexes, thisObj) {\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\n    ///<param name=\"indexes\" type=\"Array\" />\n    ///<param name=\"thisObj\" type=\"Object\" />\n    if (indexes) {\n      var paramArray = [];\n      for (var i = 0, l = indexes.length; i < l; i++) {\n        var item = i;\n        if (indexes[item] instanceof _initializeJayData2.default.Class.ConstructorParameter) paramArray.push(source[indexes[item].paramIndex]);else if (typeof indexes[item] === \"function\") paramArray.push(indexes[item].apply(thisObj));else paramArray.push(indexes[item]);\n      }\n      return paramArray;\n    }\n    return source;\n  },\n  writePropertyValues: function writePropertyValues(obj) {\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(function (md) {\n        return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\n      }));\n    }\n  },\n  writeProperties: function writeProperties(obj, members) {\n    var defines = {};\n    for (var i = 0, l = members.length; i < l; i++) {\n      var memDef = members[i];\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\n    }\n\n    Object.defineProperties(obj, defines);\n  },\n  writeProperty: function writeProperty(obj, member, value) {\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\n    if (memDef) {\n      var propDef = memDef.createPropertyDescriptor(null, value);\n      //////OPTIMIZATION\n      Object.defineProperty(obj, memDef.name, propDef);\n    }\n  }\n};\n\n_initializeJayData2.default.debug = function () {\n  (console.debug || console.log).apply(console, arguments);\n};\n\n_initializeJayData2.default.debugWith = function () {\n  var cArgs = arguments;\n  return function (r) {\n    (console.debug || console.log).apply(console, cArgs);\n    if (typeof Error !== 'undefined' && r instanceof Error || typeof _jaydataErrorHandler.Exception !== 'undefined' && r instanceof _jaydataErrorHandler.Exception) {\n      (console.error || console.log).apply(console, arguments);\n    } else {\n      (console.debug || console.log).apply(console, arguments);\n    }\n  };\n};\n\n_initializeJayData2.default.fdebug = {\n  success: _initializeJayData2.default.debugWith('success'),\n  error: _initializeJayData2.default.debugWith('error')\n};\n\nvar $C = exports.$C = function $C() {\n  _initializeJayData2.default.Class.define.apply(_initializeJayData2.default.Class, arguments);\n};\nvar Container = exports.Container = _initializeJayData2.default.Container;\nvar MemberDefinition = exports.MemberDefinition = _initializeJayData2.default.MemberDefinition;\nexports.default = _initializeJayData2.default;\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./Container.js\":17,\"./Extensions.js\":18,\"./initializeJayData.js\":32,\"_process\":3,\"jaydata-error-handler\":8}],22:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = require('jaydata-error-handler');\n\nvar _btoa = (typeof window !== \"undefined\" ? window['btoa'] : typeof global !== \"undefined\" ? global['btoa'] : null);\n\nvar _btoa2 = _interopRequireDefault(_btoa);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\n_TypeSystem2.default.Blob = function Blob() {};\n\n_TypeSystem2.default.Blob.createFromHexString = function (value) {\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]) {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('TypeError: ', 'value not convertable to $data.Blob', value));\n    } else {\n        //if (value.length & 1) value = '0' + value;\n        var arr = new bufferOrArray(value.length >> 1);\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\n        }\n\n        return arr;\n    }\n};\n\n_TypeSystem2.default.Blob.toString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += String.fromCharCode(value[i]);\n    }\n\n    return s;\n};\n\n_TypeSystem2.default.Blob.toBase64 = function (value) {\n    if (!value || !value.length) return null;\n    return (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Blob.toArray = function (src) {\n    if (!src || !src.length) return null;\n    var arr = new Array(src.length);\n    for (var i = 0; i < src.length; i++) {\n        arr[i] = src[i];\n    }\n\n    return arr;\n};\n\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\n\n_TypeSystem2.default.Blob.toHexString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += ('00' + value[i].toString(16)).slice(-2);\n    }\n\n    return s.toUpperCase();\n};\n\n_TypeSystem2.default.Blob.toDataURL = function (value) {\n    if (!value || !value.length) return null;\n    return 'data:application/octet-stream;base64,' + (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], _TypeSystem2.default.Blob);\n_TypeSystem2.default.Container.registerConverter('$data.Blob', {\n    '$data.String': function $dataString(value) {\n        if (value && value.length) {\n            var blob = new bufferOrArray(value.length);\n            for (var i = 0; i < value.length; i++) {\n                blob[i] = value.charCodeAt(i);\n            }\n\n            return blob;\n        } else return null;\n    },\n    '$data.Array': function $dataArray(value) {\n        return new bufferOrArray(value);\n    },\n    '$data.Number': function $dataNumber(value) {\n        return new bufferOrArray(_TypeSystem2.default.packIEEE754(value, 11, 52).reverse());\n    },\n    '$data.Boolean': function $dataBoolean(value) {\n        return new bufferOrArray([value | 0]);\n    },\n    'default': function _default(value) {\n        if (typeof Blob !== 'undefined' && value instanceof Blob) {\n            var req = new XMLHttpRequest();\n            req.open('GET', URL.createObjectURL(value), false);\n            req.send(null);\n            return _TypeSystem2.default.Container.convertTo(req.response, _TypeSystem2.default.Blob);\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n            return new bufferOrArray(new Uint8Array(value));\n        } else if (value instanceof Uint8Array) {\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\n            //else\n            return value;\n        } else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n               return value;\r\n               }else*/if (value.buffer) {\n                return new bufferOrArray(value);\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value instanceof Object) {\n                var arr = [];\n                for (var i in value) {\n                    arr[i] = value[i];\n                }\n                if (!arr.length) throw 0;\n                return new bufferOrArray(arr);\n            }\n        throw 0;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return _TypeSystem2.default.Blob.toString(value);\n    },\n    '$data.Array': function $dataArray(value) {\n        return _TypeSystem2.default.Blob.toArray(value);\n    }\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../TypeSystem.js\":21,\"jaydata-error-handler\":8}],23:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Container.registerConverter('$data.Boolean', {\n    '$data.String': function $dataString(value) {\n        if (value.toLowerCase() == 'true') return true;\n        if (value.toLowerCase() == 'false') return false;\n\n        return !!value;\n    },\n    'default': function _default(value) {\n        return !!value;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Integer', {\n    'default': function _default(value) {\n        if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY || value === Number.MAX_VALUE || value === Number.MIN_VALUE) {\n            return value;\n        }\n\n        var r = parseInt(+value, 10);\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int32', {\n    'default': function _default(value) {\n        return value | 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Number', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Byte', {\n    'default': function _default(value) {\n        return (value | 0) & 0xff;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Date', {\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.DateTimeOffset', {\n    '$data.Date': function $dataDate(value) {\n        return value;\n    },\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n(function () {\n    function parseFromString(value) {\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var time = '';\n        time += ('00' + matches[1]).slice(-2);\n        time += ':' + ('00' + matches[2]).slice(-2);\n        if (matches[4]) {\n            time += ':' + ('00' + matches[4]).slice(-2);\n        } else {\n            time += ':00';\n        }\n        if (matches[6]) time += '.' + (matches[6] + '000').slice(0, 3);\n\n        return time;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Time', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var metrics = [1000, 60, 60];\n            var result = [0, 0, 0, value | 0];\n\n            for (var i = 0; i < metrics.length; i++) {\n                result[metrics.length - (i + 1)] = result[metrics.length - i] / metrics[i] | 0;\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\n            }\n\n            var time = '';\n            for (var i = 0; i < result.length; i++) {\n                if (i < result.length - 1) {\n                    time += ('00' + result[i]).slice(-2);\n                    if (i < result.length - 2) time += ':';\n                } else {\n                    time += '.' + ('000' + result[i]).slice(-3);\n                }\n            }\n\n            return parseFromString(time);\n        },\n        '$data.Date': function $dataDate(value) {\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\n            var ms = value.getMilliseconds();\n            if (ms) {\n                val += '.' + ms;\n            }\n\n            return parseFromString(val);\n        }\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var date = matches[1];\n        date += ('0000' + matches[2]).slice(-4);\n        date += '-' + ('00' + matches[3]).slice(-2);\n        date += '-' + ('00' + matches[4]).slice(-2);\n        return date;\n    }\n    function parseFromDate(value) {\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\n        return parseFromString(val);\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Day', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var t = 1000 * 60 * 60 * 24;\n            var day = value * t;\n            if (isNaN(day)) throw 0;\n\n            return parseFromDate(new Date(day));\n        },\n        '$data.Date': parseFromDate\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        return value;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Duration', {\n        '$data.String': parseFromString\n    });\n})();\n_TypeSystem2.default.Container.registerConverter('$data.Decimal', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        return value.toString();\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.packIEEE754 = function (v, ebits, fbits) {\n    var bias = (1 << ebits - 1) - 1,\n        s,\n        e,\n        f,\n        ln,\n        i,\n        bits,\n        str,\n        bytes;\n\n    // Compute sign, exponent, fraction\n    if (v !== v) {\n        // NaN\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\n        e = (1 << bias) - 1;f = Math.pow(2, fbits - 1);s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n        e = (1 << bias) - 1;f = 0;s = v < 0 ? 1 : 0;\n    } else if (v === 0) {\n        e = 0;f = 0;s = 1 / v === -Infinity ? 1 : 0;\n    } else {\n        s = v < 0;\n        v = Math.abs(v);\n\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        } else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n\n    // Pack sign, exponent, fraction\n    bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    str = bits.join('');\n\n    // Bits to bytes\n    bytes = [];\n    while (str.length) {\n        bytes.push(parseInt(str.substring(0, 8), 2));\n        str = str.substring(8);\n    }\n\n    return bytes;\n};\n\n_TypeSystem2.default.unpackIEEE754 = function (bytes, ebits, fbits) {\n    // Bytes to bits\n    var bits = [],\n        i,\n        j,\n        b,\n        str,\n        bias,\n        s,\n        e,\n        f;\n\n    for (i = bytes.length; i; i -= 1) {\n        b = bytes[i - 1];\n        for (j = 8; j; j -= 1) {\n            bits.push(b % 2 ? 1 : 0);b = b >> 1;\n        }\n    }\n    bits.reverse();\n    str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    bias = (1 << ebits - 1) - 1;\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    e = parseInt(str.substring(1, 1 + ebits), 2);\n    f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n        return f !== 0 ? NaN : s * Infinity;\n    } else if (e > 0) {\n        // Normalized\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    } else if (f !== 0) {\n        // Denormalized\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    } else {\n        return s < 0 ? -0 : 0;\n    }\n};\n\n_TypeSystem2.default.IEEE754 = function (v, e, f) {\n    return _TypeSystem2.default.unpackIEEE754(_TypeSystem2.default.packIEEE754(v, e, f), e, f);\n};\n\n_TypeSystem2.default.Container.registerConverter('$data.Float', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return _TypeSystem2.default.IEEE754(r, 8, 23);\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int16', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xffff;\n        if (r >= 0x8000) return r - 0x10000;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int64', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        var r = value.toString();\n        if (r.indexOf('.') > 0) return r.split('.')[0];\n        if (r.indexOf('.') == 0) throw 0;\n        return r;\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        if (value.indexOf('.') > 0) return value.split('.')[0];\n        if (value.indexOf('.') == 0) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.SByte', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xff;\n        if (r >= 0x80) return r - 0x100;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.String', {\n    '$data.Date': function $dataDate(value) {\n        return value.toISOString();\n    },\n    '$data.ObjectID': function $dataObjectID(value) {\n        return btoa(value.toString());\n    },\n    'default': function _default(value) {\n        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return JSON.stringify(value);\n        return value.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Object', {\n    '$data.String': function $dataString(value) {\n        return JSON.parse(value);\n    },\n    '$data.Function': function $dataFunction() {\n        throw 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Array', {\n    '$data.String': function $dataString(value) {\n        var r = JSON.parse(value);\n        if (!Array.isArray(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.ObjectID', {\n    '$data.ObjectID': function $dataObjectID(value) {\n        try {\n            return btoa(value.toString());\n        } catch (e) {\n            return value;\n        }\n    },\n    '$data.String': function $dataString(id) {\n        return id;\n    }\n});\n\n_TypeSystem2.default.Container.proxyConverter = function (v) {\n    return v;\n};\n_TypeSystem2.default.Container.defaultConverter = function (type) {\n    return function (v) {\n        return _TypeSystem2.default.Container.convertTo(v, type);\n    };\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],24:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data) {\n\n    function Edm_Boolean() {};\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\n\n    function Edm_Binary() {};\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\n    $data.Container.mapType(Edm_Binary, $data.Blob);\n\n    function Edm_DateTime() {};\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\n    $data.Container.mapType(Edm_DateTime, $data.Date);\n\n    function Edm_DateTimeOffset() {};\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\n\n    function Edm_Time() {};\n    $data.Container.registerType('Edm.Time', Edm_Time);\n    $data.Container.mapType(Edm_Time, $data.Time);\n\n    function Edm_TimeOfDay() {};\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\n\n    function Edm_Date() {};\n    $data.Container.registerType('Edm.Date', Edm_Date);\n    $data.Container.mapType(Edm_Date, $data.Day);\n\n    function Edm_Duration() {};\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\n    $data.Container.mapType(Edm_Duration, $data.Duration);\n\n    function Edm_Decimal() {};\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\n\n    function Edm_Float() {};\n    $data.Container.registerType('Edm.Float', Edm_Float);\n    $data.Container.mapType(Edm_Float, $data.Float);\n\n    function Edm_Single() {};\n    $data.Container.registerType('Edm.Single', Edm_Single);\n    $data.Container.mapType(Edm_Single, $data.Float);\n\n    function Edm_Double() {};\n    $data.Container.registerType('Edm.Double', Edm_Double);\n    $data.Container.mapType(Edm_Double, $data.Number);\n\n    function Edm_Guid() {};\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\n    $data.Container.mapType(Edm_Guid, $data.Guid);\n\n    function Edm_Int16() {};\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\n    $data.Container.mapType(Edm_Int16, $data.Int16);\n\n    function Edm_Int32() {};\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\n    $data.Container.mapType(Edm_Int32, $data.Integer);\n\n    function Edm_Int64() {};\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\n    $data.Container.mapType(Edm_Int64, $data.Int64);\n\n    function Edm_Byte() {};\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\n    $data.Container.mapType(Edm_Byte, $data.Byte);\n\n    function Edm_SByte() {};\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\n    $data.Container.mapType(Edm_SByte, $data.SByte);\n\n    function Edm_String() {};\n    $data.Container.registerType('Edm.String', Edm_String);\n    $data.Container.mapType(Edm_String, $data.String);\n\n    function Edm_GeographyPoint() {};\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\n\n    function Edm_GeographyLineString() {};\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\n\n    function Edm_GeographyPolygon() {};\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\n\n    function Edm_GeographyMultiPoint() {};\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\n\n    function Edm_GeographyMultiLineString() {};\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\n\n    function Edm_GeographyMultiPolygon() {};\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\n\n    function Edm_GeographyCollection() {};\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\n\n    function Edm_GeometryPoint() {};\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\n\n    function Edm_GeometryLineString() {};\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\n\n    function Edm_GeometryPolygon() {};\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\n\n    function Edm_GeometryMultiPoint() {};\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\n\n    function Edm_GeometryMultiLineString() {};\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\n\n    function Edm_GeometryMultiPolygon() {};\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\n\n    function Edm_GeometryCollection() {};\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\n\n    $data.oDataEdmMapping = {\n        '$data.Byte': 'Edm.Byte',\n        '$data.SByte': 'Edm.SByte',\n        '$data.Decimal': 'Edm.Decimal',\n        '$data.Float': 'Edm.Float',\n        '$data.Int16': 'Edm.Int16',\n        '$data.Int64': 'Edm.Int64',\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\n        '$data.Time': 'Edm.TimeOfDay',\n        '$data.Day': 'Edm.Date',\n        '$data.Duration': 'Edm.Duration',\n        '$data.Boolean': 'Edm.Boolean',\n        '$data.Blob': 'Edm.Binary',\n        '$data.Date': 'Edm.DateTime',\n        '$data.Number': 'Edm.Double',\n        '$data.Integer': 'Edm.Int32',\n        '$data.Int32': 'Edm.Int32',\n        '$data.String': 'Edm.String',\n        '$data.ObjectID': 'Edm.String',\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\n        '$data.Guid': 'Edm.Guid'\n    };\n})(_TypeSystem2.default);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],25:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = require('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.GeographyBase */\n_TypeSystem2.default.GeographyBase = function GeographyBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeographyBase.defaultCrs;\n    _TypeSystem2.default.GeographyBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeographyBase.disableSRID = false;\n_TypeSystem2.default.GeographyBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:4326'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeographyBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeographyBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeographyBase) {\n            return type.parseFromString(strData);\n        } else {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeographyBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geography'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeographyBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeographyBase);\n\n    _TypeSystem2.default.GeographyBase.registered = _TypeSystem2.default.GeographyBase.registered || {};\n    _TypeSystem2.default.GeographyBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeographyBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeographyBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeographyBase', _TypeSystem2.default.GeographyBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeographyBase'], _TypeSystem2.default.GeographyBase);\n\n/* $data.GeographyPoint */\n_TypeSystem2.default.GeographyPoint = function GeographyPoint(lon, lat) {\n    if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && Array.isArray(lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: lon });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('longitude' in lon || 'latitude' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('lng' in lon || 'lat' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object') {\n        _TypeSystem2.default.GeographyBase.call(this, lon);\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\n    }\n};\n_TypeSystem2.default.GeographyPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeographyPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeographyPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Point', _TypeSystem2.default.GeographyPoint);\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'longitude', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'latitude', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], _TypeSystem2.default.GeographyPoint);\n_TypeSystem2.default.Geography = _TypeSystem2.default.GeographyPoint;\n\n/* $data.GeographyLineString */\n_TypeSystem2.default.GeographyLineString = function GeographyLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('LineString', _TypeSystem2.default.GeographyLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], _TypeSystem2.default.GeographyLineString);\n\n/* $data.GeographyPolygon */\n_TypeSystem2.default.GeographyPolygon = function GeographyPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeographyPoint ? data.topLeft : new _TypeSystem2.default.GeographyPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeographyPoint ? data.bottomRight : new _TypeSystem2.default.GeographyPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeographyPoint ? data.topRight : new _TypeSystem2.default.GeographyPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeographyPoint ? data.bottomLeft : new _TypeSystem2.default.GeographyPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeographyPolygon(data);\n};\n_TypeSystem2.default.GeographyPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Polygon', _TypeSystem2.default.GeographyPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], _TypeSystem2.default.GeographyPolygon);\n\n/* $data.GeographyMultiPoint */\n_TypeSystem2.default.GeographyMultiPoint = function GeographyMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPoint', _TypeSystem2.default.GeographyMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], _TypeSystem2.default.GeographyMultiPoint);\n\n/* $data.GeographyMultiLineString */\n_TypeSystem2.default.GeographyMultiLineString = function GeographyMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiLineString', _TypeSystem2.default.GeographyMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], _TypeSystem2.default.GeographyMultiLineString);\n\n/* $data.GeographyMultiPolygon */\n_TypeSystem2.default.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPolygon', _TypeSystem2.default.GeographyMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], _TypeSystem2.default.GeographyMultiPolygon);\n\n/* $data.GeographyCollection */\n_TypeSystem2.default.GeographyCollection = function GeographyCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeographyBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeographyBase.registerType('GeometryCollection', _TypeSystem2.default.GeographyCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], _TypeSystem2.default.GeographyCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21,\"jaydata-error-handler\":8}],26:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = require('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.Geometry */\n_TypeSystem2.default.GeometryBase = function GeometryBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeometryBase.defaultCrs;\n    _TypeSystem2.default.GeometryBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeometryBase.disableSRID = false;\n_TypeSystem2.default.GeometryBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:0'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeometryBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeometryBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeometryBase) {\n            return type.parseFromString(strData);\n        } else {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeometryBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geometry'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeometryBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeometryBase);\n\n    _TypeSystem2.default.GeometryBase.registered = _TypeSystem2.default.GeometryBase.registered || {};\n    _TypeSystem2.default.GeometryBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeometryBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeometryBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeometryBase', _TypeSystem2.default.GeometryBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeometryBase'], _TypeSystem2.default.GeometryBase);\n\n/* $data.GeometryPoint */\n_TypeSystem2.default.GeometryPoint = function GeometryPoint(x, y) {\n    var param = x;\n    if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && Array.isArray(param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: param });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && ('x' in param || 'y' in param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [param.x, param.y] });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object') {\n        _TypeSystem2.default.GeometryBase.call(this, param);\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\n    }\n};\n_TypeSystem2.default.GeometryPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeometryPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeometryPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Point', _TypeSystem2.default.GeometryPoint);\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'x', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'y', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], _TypeSystem2.default.GeometryPoint);\n\n/* $data.GeometryLineString */\n_TypeSystem2.default.GeometryLineString = function GeometryLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('LineString', _TypeSystem2.default.GeometryLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], _TypeSystem2.default.GeometryLineString);\n\n/* $data.GeometryPolygon */\n_TypeSystem2.default.GeometryPolygon = function GeometryPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeometryPoint ? data.topLeft : new _TypeSystem2.default.GeometryPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeometryPoint ? data.bottomRight : new _TypeSystem2.default.GeometryPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeometryPoint ? data.topRight : new _TypeSystem2.default.GeometryPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeometryPoint ? data.bottomLeft : new _TypeSystem2.default.GeometryPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeometryPolygon(data);\n};\n_TypeSystem2.default.GeometryPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Polygon', _TypeSystem2.default.GeometryPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], _TypeSystem2.default.GeometryPolygon);\n\n/* $data.GeometryMultiPoint */\n_TypeSystem2.default.GeometryMultiPoint = function GeometryMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPoint', _TypeSystem2.default.GeometryMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], _TypeSystem2.default.GeometryMultiPoint);\n\n/* $data.GeometryMultiLineString */\n_TypeSystem2.default.GeometryMultiLineString = function GeometryMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiLineString', _TypeSystem2.default.GeometryMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], _TypeSystem2.default.GeometryMultiLineString);\n\n/* $data.GeometryMultiPolygon */\n_TypeSystem2.default.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPolygon', _TypeSystem2.default.GeometryMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], _TypeSystem2.default.GeometryMultiPolygon);\n\n/* $data.GeometryCollection */\n_TypeSystem2.default.GeometryCollection = function GeometryCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeometryBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeometryBase.registerType('GeometryCollection', _TypeSystem2.default.GeometryCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], _TypeSystem2.default.GeometryCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21,\"jaydata-error-handler\":8}],27:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Geospatial = function Geospatial() {\n    this.type = this.constructor.type;\n    if (Array.isArray(this.constructor.validMembers)) {\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\n            var name = this.constructor.validMembers[i];\n            this[name] = undefined;\n        }\n    }\n\n    _TypeSystem2.default.SimpleBase.apply(this, arguments);\n    this.type = this.constructor.type || 'Unknown';\n};\n_TypeSystem2.default.SimpleBase.registerType('Geospatial', _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.Geospatial', 'Geospatial'], _TypeSystem2.default.Geospatial);\n\n_TypeSystem2.default.point = function (arg) {\n    if (arg && arg.crs) {\n        if (arg.crs.properties && arg.crs.properties.name === _TypeSystem2.default.GeometryBase.defaultCrs.properties.name) {\n            return new _TypeSystem2.default.GeometryPoint(arg);\n        } else {\n            return new _TypeSystem2.default.GeographyPoint(arg);\n        }\n    } else if (arg) {\n        if ('x' in arg && 'y' in arg) {\n            return new _TypeSystem2.default.GeometryPoint(arg.x, arg.y);\n        } else if ('longitude' in arg && 'latitude' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.longitude, arg.latitude);\n        } else if ('lng' in arg && 'lat' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.lng, arg.lat);\n        }\n    }\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],28:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value)) {\n        this.value = value || '00000000-0000-0000-0000-000000000000';\n    } else {\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\n    }\n};\n_TypeSystem2.default.Container.registerType(['$data.Guid', 'Guid', 'guid'], _TypeSystem2.default.Guid);\n_TypeSystem2.default.Container.registerConverter('$data.Guid', {\n    '$data.String': function $dataString(value) {\n        return value ? _TypeSystem2.default.parseGuid(value).toString() : value;\n    },\n    '$data.Guid': function $dataGuid(value) {\n        return value ? value.toString() : value;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return value ? value.toString() : value;\n    }\n});\n\n_TypeSystem2.default.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.NewGuid = function () {\n    return _TypeSystem2.default.createGuid();\n};\n\n_TypeSystem2.default.parseGuid = function (guid) {\n    return new _TypeSystem2.default.Guid(guid);\n};\n\n(function () {\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n      Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\n\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n    _TypeSystem2.default.createGuid = function (guidString) {\n        if (guidString) {\n            return new _TypeSystem2.default.Guid(guidString);\n        };\n\n        var len;\n        var chars = CHARS,\n            uuid = [],\n            i;\n        var radix = chars.length;\n\n        if (len) {\n            // Compact form\n            for (i = 0; i < len; i++) {\n                uuid[i] = chars[0 | Math.random() * radix];\n            }\n        } else {\n            // rfc4122, version 4 form\n            var r;\n\n            // rfc4122 requires these characters\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\n            // per rfc4122, sec. 4.1.5\n            for (i = 0; i < 36; i++) {\n                if (!uuid[i]) {\n                    r = 0 | Math.random() * 16;\n                    uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n                }\n            }\n        }\n\n        return _TypeSystem2.default.parseGuid(uuid.join(''));\n    };\n})();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],29:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.SimpleBase */\n_TypeSystem2.default.SimpleBase = function SimpleBase(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data) {\n        if (Array.isArray(this.constructor.validMembers)) {\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\n                var name = this.constructor.validMembers[i];\n\n                if (data[name] !== undefined) {\n                    this[name] = data[name];\n                }\n            }\n        } else {\n            delete data.type;\n            _TypeSystem2.default.typeSystem.extend(this, data);\n        }\n    }\n};\n_TypeSystem2.default.SimpleBase.registerType = function (name, type, base) {\n    base = base || _TypeSystem2.default.SimpleBase;\n\n    type.type = name;\n    type.prototype = Object.create(base.prototype);\n    type.prototype.constructor = type;\n};\n_TypeSystem2.default.Container.registerType(['$data.SimpleBase', 'SimpleBase'], _TypeSystem2.default.SimpleBase);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],30:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Number = typeof Number !== 'undefined' ? Number : function JayNumber() {};\n_TypeSystem2.default.Date = typeof Date !== 'undefined' ? Date : function JayDate() {};\n_TypeSystem2.default.String = typeof String !== 'undefined' ? String : function JayString() {};\n_TypeSystem2.default.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() {};\n_TypeSystem2.default.Array = typeof Array !== 'undefined' ? Array : function JayArray() {};\n_TypeSystem2.default.Object = typeof Object !== 'undefined' ? Object : function JayObject() {};\n_TypeSystem2.default.Function = Function;\n\n_TypeSystem2.default.Byte = function JayByte() {};\n_TypeSystem2.default.SByte = function JaySByte() {};\n_TypeSystem2.default.Decimal = function JayDecimal() {};\n_TypeSystem2.default.Float = _TypeSystem2.default.Single = function JayFloat() {};\n_TypeSystem2.default.Integer = function JayInteger() {};\n_TypeSystem2.default.Int16 = function JayInt16(v) {};\n_TypeSystem2.default.Int32 = function JayInt32() {};\n_TypeSystem2.default.Int64 = function JayInt64(v) {};\n_TypeSystem2.default.ObjectID = typeof _TypeSystem2.default.mongoDBDriver !== 'undefined' && typeof _TypeSystem2.default.mongoDBDriver.ObjectID !== 'undefined' ? _TypeSystem2.default.mongoDBDriver.ObjectID : function JayObjectID() {};\n_TypeSystem2.default.Time = function JayTime() {};\n_TypeSystem2.default.Day = function JayDay() {};\n_TypeSystem2.default.Duration = function JayDuration() {};\n_TypeSystem2.default.DateTimeOffset = function JayDateTimeOffset(val) {\n    this.value = val;\n};\n_TypeSystem2.default.DateTimeOffset.prototype.toJSON = function () {\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], _TypeSystem2.default.Number);\n_TypeSystem2.default.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], _TypeSystem2.default.Integer);\n_TypeSystem2.default.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], _TypeSystem2.default.Int32);\n_TypeSystem2.default.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], _TypeSystem2.default.Byte);\n_TypeSystem2.default.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], _TypeSystem2.default.SByte);\n_TypeSystem2.default.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], _TypeSystem2.default.Decimal);\n_TypeSystem2.default.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], _TypeSystem2.default.Float);\n_TypeSystem2.default.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], _TypeSystem2.default.Int16);\n_TypeSystem2.default.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], _TypeSystem2.default.Int64);\n_TypeSystem2.default.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], _TypeSystem2.default.String);\n_TypeSystem2.default.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], _TypeSystem2.default.Array, function () {\n    return _TypeSystem2.default.Array.apply(undefined, arguments);\n});\n_TypeSystem2.default.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], _TypeSystem2.default.Date);\n_TypeSystem2.default.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], _TypeSystem2.default.Time);\n_TypeSystem2.default.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], _TypeSystem2.default.Day);\n_TypeSystem2.default.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], _TypeSystem2.default.Duration);\n_TypeSystem2.default.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], _TypeSystem2.default.DateTimeOffset);\n_TypeSystem2.default.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], _TypeSystem2.default.Boolean);\n_TypeSystem2.default.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], _TypeSystem2.default.Object);\n_TypeSystem2.default.Container.registerType([\"$data.Function\", \"Function\", \"function\"], _TypeSystem2.default.Function);\n_TypeSystem2.default.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], _TypeSystem2.default.ObjectID);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":21}],31:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Container = exports.$C = exports.Exception = exports.Guard = undefined;\n\nvar _TypeSystem = require('./TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Types = require('./Types/Types.js');\n\nvar _Types2 = _interopRequireDefault(_Types);\n\nvar _Trace = require('./Trace/Trace.js');\n\nvar _Trace2 = _interopRequireDefault(_Trace);\n\nvar _Logger = require('./Trace/Logger.js');\n\nvar _Logger2 = _interopRequireDefault(_Logger);\n\nvar _SimpleBase = require('./Types/SimpleBase.js');\n\nvar _SimpleBase2 = _interopRequireDefault(_SimpleBase);\n\nvar _Geospatial = require('./Types/Geospatial.js');\n\nvar _Geospatial2 = _interopRequireDefault(_Geospatial);\n\nvar _Geography = require('./Types/Geography.js');\n\nvar _Geography2 = _interopRequireDefault(_Geography);\n\nvar _Geometry = require('./Types/Geometry.js');\n\nvar _Geometry2 = _interopRequireDefault(_Geometry);\n\nvar _Guid = require('./Types/Guid.js');\n\nvar _Guid2 = _interopRequireDefault(_Guid);\n\nvar _Blob = require('./Types/Blob.js');\n\nvar _Blob2 = _interopRequireDefault(_Blob);\n\nvar _EdmTypes = require('./Types/EdmTypes.js');\n\nvar _EdmTypes2 = _interopRequireDefault(_EdmTypes);\n\nvar _Converter = require('./Types/Converter.js');\n\nvar _Converter2 = _interopRequireDefault(_Converter);\n\nvar _jaydataErrorHandler = require('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Guard = exports.Guard = _jaydataErrorHandler.Guard;\n_TypeSystem2.default.Guard = _jaydataErrorHandler.Guard;\n\nvar Exception = exports.Exception = _jaydataErrorHandler.Exception;\n_TypeSystem2.default.Exception = _jaydataErrorHandler.Exception;\n\nvar $C = exports.$C = _TypeSystem.$C;\n_TypeSystem2.default.$C = _TypeSystem.$C;\n\nvar Container = exports.Container = _TypeSystem.Container;\nexports.default = _TypeSystem2.default;\n\n},{\"./Trace/Logger.js\":19,\"./Trace/Trace.js\":20,\"./TypeSystem.js\":21,\"./Types/Blob.js\":22,\"./Types/Converter.js\":23,\"./Types/EdmTypes.js\":24,\"./Types/Geography.js\":25,\"./Types/Geometry.js\":26,\"./Types/Geospatial.js\":27,\"./Types/Guid.js\":28,\"./Types/SimpleBase.js\":29,\"./Types/Types.js\":30,\"jaydata-error-handler\":8}],32:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _initializeJayDataClient = require('./initializeJayDataClient.js');\n\nvar _initializeJayDataClient2 = _interopRequireDefault(_initializeJayDataClient);\n\nvar _acorn = require('acorn');\n\nvar acorn = _interopRequireWildcard(_acorn);\n\nvar _package = require('../../package.json');\n\nvar pkg = _interopRequireWildcard(_package);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof console === 'undefined') {\n  console = {\n    warn: function warn() {},\n    error: function error() {},\n    log: function log() {},\n    dir: function dir() {},\n    time: function time() {},\n    timeEnd: function timeEnd() {}\n  };\n}\n\nif (!console.warn) console.warn = function () {};\nif (!console.error) console.error = function () {};\n\n(function ($data) {\n  ///<summary>\n  /// Collection of JayData services\n  ///</summary>\n  $data.__namespace = true;\n  $data.version = \"JayData \" + pkg.version;\n  $data.versionNumber = pkg.version;\n  $data.root = {};\n  $data.Acorn = acorn;\n})(_initializeJayDataClient2.default);\nexports.default = _initializeJayDataClient2.default;\n// Do not remove this block, it is used by jsdoc\n/**\r\n    @name $data.Base\r\n    @class base class\r\n*/\n\nmodule.exports = exports['default'];\n\n},{\"../../package.json\":15,\"./initializeJayDataClient.js\":33,\"acorn\":1}],33:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _data_handler;\nfunction _data_handler() {\n  console.log(\"@@@@\", this);\n  if (this instanceof _data_handler) {\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\n    return new type(arguments[1]);\n  } else {\n    return _data_handler[\"implementation\"].apply(this, arguments);\n  }\n};\nmodule.exports = exports['default'];\n\n},{}],34:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Access', null, null, {}, {\n    isAuthorized: function isAuthorized(access, user, sets, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n\n        //clbWrapper.error('Authorization failed', 'Access authorization');\n        clbWrapper.success(true);\n\n        return pHandlerResult;\n\n        /*var error;\r\n          if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n          var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n          if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n          if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n          if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n          var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n          var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n          var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n              if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n                  if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n          callbackFn();\r\n          return pHandlerResult;*/\n    },\n    getAccessBitmaskFromPermission: function getAccessBitmaskFromPermission(p) {\n        var access = _index2.default.Access.None;\n\n        if (p.Create) access |= _index2.default.Access.Create;\n        if (p.Read) access |= _index2.default.Access.Read;\n        if (p.Update) access |= _index2.default.Access.Update;\n        if (p.Delete) access |= _index2.default.Access.Delete;\n        if (p.DeleteBatch) access |= _index2.default.Access.DeleteBatch;\n        if (p.Execute) access |= _index2.default.Access.Execute;\n\n        return access;\n    },\n    None: { value: 0 },\n    Create: { value: 1 },\n    Read: { value: 2 },\n    Update: { value: 4 },\n    Delete: { value: 8 },\n    DeleteBatch: { value: 16 },\n    Execute: { value: 32 }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],35:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.ajax = _index2.default.ajax || function () {\n    var cfg = arguments[arguments.length - 1];\n    var clb = _index2.default.PromiseHandlerBase.createCallbackSettings(cfg);\n    clb.error(\"Not implemented\");\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof Ext !== 'undefined' && _typeof(Ext.Ajax)) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        Ext.Ajax.request(options);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],37:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        _index2.default.typeSystem.extend(options, {\n            dataType: 'json',\n            headers: {}\n        });\n        var dataTypes = {\n            'json': {\n                accept: 'application/json, text/javascript',\n                convert: JSON.parse\n            },\n            'text': {\n                accept: 'text/plain',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'html': {\n                accept: 'text/html',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'xml': {\n                accept: 'application/xml, text/xml',\n                convert: function convert(e) {\n                    // TODO?\n                    return e;\n                }\n            }\n        };\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\n\n        options.headers.Accept = dataTypeContext.accept;\n\n        var successClb = options.success || _index2.default.defaultSuccessCallback;\n        var errorClb = options.error || _index2.default.defaultErrorCallback;\n        var progressClb = options.progress;\n\n        var success = function success(r) {\n            var result = dataTypeContext.convert(r.responseText);\n            successClb(result);\n        };\n        var error = function error(r) {\n            var error = dataTypeContext.convert(r.responseText);\n            errorClb(error);\n        };\n        var progress = progressClb;\n\n        WinJS.xhr(options).done(success, error, progress);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],38:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\n    _index2.default.ajax = _index2.default.ajax || jQuery.ajax;\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],39:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.Anonymous\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {},\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        _index2.default.ajax(cfg);\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],40:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    Logout: function Logout() {\n        _index.Guard.raise(\"Pure class\");\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],41:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Username: '',\n            Password: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (callbacks && typeof callbacks.pending == \"function\") callbacks.pending();\n    },\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        var origBeforeSend = cfg.beforeSend;\n        cfg.beforeSend = function (xhr) {\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\n\n            if (typeof origBeforeSend == \"function\") origBeforeSend(xhr);\n        };\n\n        _index2.default.ajax(cfg);\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],42:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.FacebookAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Url_code: '',\n            type_code: '',\n            scope: '',\n            Url_token: '',\n            type_token: '',\n            access_token: '',\n            app_id: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (this.Authenticated) {\n            return;\n        }\n\n        var provider = this;\n        provider.configuration.stateCallbacks = callbacks || {};\n\n        _index2.default.ajax({\n            url: this.configuration.Url_code,\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(data) {\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\") provider.configuration.stateCallbacks.pending(data);\n                provider._processRequestToken(data);\n                provider.Authenticated = true;\n            },\n            error: function error() {\n                if (typeof provider.configuration.stateCallbacks.error == \"function\") provider.configuration.stateCallbacks.error(arguments);\n            }\n        });\n    },\n    Logout: function Logout() {\n        this.Authenticated = false;\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        if (cfg.url.indexOf('access_token=') === -1) {\n            if (cfg.url && this.Authenticated) {\n                var andChar = '?';\n                if (cfg.url.indexOf(andChar) > 0) andChar = '&';\n\n                if (this.configuration.access_token) cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\n            }\n        }\n\n        _index2.default.ajax(cfg);\n    },\n    _processRequestToken: function _processRequestToken(verification_data) {\n        var provider = this;\n\n        _index2.default.ajax({\n            url: provider.configuration.Url_token,\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(result) {\n                provider.configuration.access_token = result.access_token;\n                if (typeof provider.configuration.stateCallbacks.success == \"function\") provider.configuration.stateCallbacks.success(result);\n            },\n            error: function error(obj) {\n                var data = eval('(' + obj.responseText + ')');\n                if (data.error) {\n                    if (data.error.message == \"authorization_pending\") {\n                        setTimeout(function () {\n                            provider._processRequestToken(verification_data);\n                        }, 2000);\n                    } else if (\"authorization_declined\") {\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\") provider.configuration.stateCallbacks.abort(arguments);\n                    }\n                }\n            }\n        });\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],43:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Entity = exports.Event = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EventSubscriber = _index2.default.Class.define(\"EventSubscriber\", null, null, {\n    constructor: function constructor(handler, state, thisArg) {\n        /// <param name=\"handler\" type=\"Function\">\n        ///     <summary>event handler</summary>\n        ///     <signature>\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\n        ///         <param name=\"eventData\" type=\"EventData\" />\n        ///         <param name=\"state\" type=\"Object\" />\n        ///     </signature>\n        /// </param>\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\n        ///\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\n        this.handler = handler;\n        this.state = state;\n        this.thisArg = thisArg;\n    },\n    handler: {},\n    state: {},\n    thisArg: {}\n});\n\n_index2.default.Event = _index2.default.Class.define(\"$data.Event\", null, null, {\n    constructor: function constructor(name, sender) {\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\n        var subscriberList = null;\n        var parentObject = sender;\n\n        function detachHandler(list, handler) {\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\n            ///<param name=\"handler\" type=\"Function\" />\n            list.forEach(function (item, index) {\n                if (item.handler == handler) {\n                    list.splice(index, 1);\n                }\n            });\n        }\n\n        this.attach = function (handler, state, thisArg) {\n            ///<param name=\"handler\" type=\"Function\">\n            ///<signature>\n            ///<param name=\"sender\" type=\"Object\" />\n            ///<param name=\"eventData\" type=\"Object\" />\n            ///<param name=\"state\" type=\"Object\" />\n            ///</signature>\n            ///</param>\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\n            if (!subscriberList) {\n                subscriberList = [];\n            }\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\n        };\n        this.detach = function (handler) {\n            detachHandler(subscriberList, handler);\n        };\n        this.fire = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n        };\n        this.fireCancelAble = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            var isValid = true;\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n            return isValid;\n        };\n    }\n});\n\nvar EventData = _index2.default.Class.define(\"EventData\", null, null, {\n    eventName: {}\n});\n\nvar PropertyChangeEventData = _index2.default.Class.define(\"PropertyChangeEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {}\n});\n\nvar PropertyValidationEventData = _index2.default.Class.define(\"PropertyValidationEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue, errors) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n        this.errors = errors;\n        this.cancel = false;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {},\n    errors: {},\n    cancel: {}\n});\n\n_index2.default.Entity = _index2.default.Class.define(\"$data.Entity\", null, null, {\n    constructor: function constructor(initData, newInstanceOptions) {\n        /// <description>\n        ///     This class provide a light weight, object-relational interface between\n        ///     your javascript code and database.\n        /// </description>\n        ///\n        /// <signature>\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\n        ///     <example>\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\n        ///         $news.context.Categories.add(category);\n        ///     </example>\n        /// </signature>\n        ///\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\n        /// <field name=\"entityState\" type=\"Integer\"></field>\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\n\n        this.initData = {};\n        var thisType = this.getType();\n        if (thisType.__copyPropertiesToInstance) {\n            _index2.default.typeSystem.writePropertyValues(this);\n        }\n\n        var ctx = null;\n        this.context = ctx;\n        if (\"setDefaultValues\" in thisType) {\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\n                if (!initData || Object.keys(initData).length < 1) {\n                    initData = thisType.setDefaultValues(initData);\n                }\n            }\n        }\n\n        if ((typeof initData === \"undefined\" ? \"undefined\" : _typeof(initData)) === \"object\") {\n            var typeMemDefs = thisType.memberDefinitions;\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\n\n            for (var i in initData) {\n                if (memDefNames.indexOf(i) > -1) {\n                    var memberDef = typeMemDefs.getMember(i);\n                    var type = _index.Container.resolveType(memberDef.type);\n                    var value = initData[i];\n\n                    if (memberDef.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                        this.initData[i] = value;\n                    } else {\n                        if (newInstanceOptions && newInstanceOptions.converters) {\n                            var converter = newInstanceOptions.converters[_index.Container.resolveName(type)];\n                            if (converter) value = converter(value);\n                        }\n\n                        this.initData[i] = _index.Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\n                    }\n                }\n            }\n        }\n\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\n        }\n\n        this.changedProperties = undefined;\n        this.entityState = undefined;\n    },\n    toString: function toString() {\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\n        /// <returns type=\"String\"/>\n\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\";\n    },\n    toJSON: function toJSON() {\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\n        /// <returns type=\"Object\">JSON representation</returns>\n\n        var result = {};\n        var self = this;\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            if (self[memDef.name] instanceof Date && memDef.type && _index.Container.resolveType(memDef.type) === _index2.default.DateTimeOffset) {\n                result[memDef.name] = new _index2.default.DateTimeOffset(self[memDef.name]);\n            } else {\n                result[memDef.name] = self[memDef.name];\n            }\n        });\n        return result;\n    },\n    equals: function equals(entity) {\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\n\n        if (entity.getType() !== this.getType()) {\n            return false;\n        }\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\n        for (var i = 0; i < entityPk.length; i++) {\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    propertyChanging: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanging) this._propertyChanging = new _index2.default.Event('propertyChanging', this);\n\n            return this._propertyChanging;\n        },\n        set: function set(value) {\n            this._propertyChanging = value;\n        }\n    },\n\n    propertyChanged: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanged) this._propertyChanged = new _index2.default.Event('propertyChanged', this);\n\n            return this._propertyChanged;\n        },\n        set: function set(value) {\n            this._propertyChanged = value;\n        }\n    },\n\n    propertyValidationError: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyValidationError) this._propertyValidationError = new _index2.default.Event('propertyValidationError', this);\n\n            return this._propertyValidationError;\n        },\n        set: function set(value) {\n            this._propertyValidationError = value;\n        }\n    },\n\n    // protected\n    storeProperty: function storeProperty(memberDefinition, value) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n\n        if (memberDefinition.concurrencyMode !== _index2.default.ConcurrencyMode.Fixed) {\n            value = _index.Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\n        }\n\n        var eventData = null;\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\n            var origValue = this[memberDefinition.name];\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\n            if (this._propertyChanging) this.propertyChanging.fire(eventData);\n        }\n\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\n            var errors = _index2.default.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\n            if (errors.length > 0) {\n                var origValue = this[memberDefinition.name];\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\n\n                if (this._propertyValidationError) this.propertyValidationError.fire(errorEventData);\n                if (\"instancePropertyValidationError\" in this.constructor) this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\n\n                if (errorEventData.cancel == true) return;\n            }\n        }\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            this[backingFieldName] = value;\n        } else {\n            this.initData[memberDefinition.name] = value;\n        }\n        this.isValidated = false;\n\n        if (memberDefinition.monitorChanges != false && this.entityState == _index2.default.EntityState.Unchanged) this.entityState = _index2.default.EntityState.Modified;\n\n        this._setPropertyChanged(memberDefinition);\n\n        if (memberDefinition.monitorChanges != false) {\n            //if (!this.changedProperties) {\n            //    this.changedProperties = [];\n            //}\n\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\n            //    this.changedProperties.push(memberDefinition);\n\n            if (this._propertyChanged) this.propertyChanged.fire(eventData);\n\n            //TODO mixin framework\n            if (\"instancePropertyChanged\" in this.constructor) {\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\n            }\n        }\n    },\n    _setPropertyChanged: function _setPropertyChanged(memberDefinition) {\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\n            if (!this.changedProperties) {\n                this.changedProperties = [];\n            }\n\n            if (!this.changedProperties.some(function (memDef) {\n                return memDef.name == memberDefinition.name;\n            })) this.changedProperties.push(memberDefinition);\n        }\n    },\n\n    // protected\n    retrieveProperty: function retrieveProperty(memberDefinition) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            return this[backingFieldName];\n        } else {\n            return this.initData[memberDefinition.name];\n        }\n    },\n\n    // protected\n    getProperty: function getProperty(memberDefinition, callback, tran) {\n        /// <summary>Retrieve value of member</summary>\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"callback\" type=\"Function\">\n        ///     <signature>\n        ///         <param name=\"value\" />\n        ///     </signature>\n        /// </param>\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\n\n        callback = _index2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        if (this[memberDefinition.name] != undefined) {\n            if (tran instanceof _index2.default.Transaction) callback.success(this[memberDefinition.name], tran);else callback.success(this[memberDefinition.name]);\n            return;\n        }\n\n        var context = this.context;\n        if (!this.context) {\n            try {\n                var that = this;\n                var storeToken = this.storeToken || this.getType().storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    var ctx = storeToken.factory();\n                    return ctx.onReady().then(function (context) {\n                        return context.loadItemProperty(that, memberDefinition, callback);\n                    });\n                }\n            } catch (e) {}\n\n            _index.Guard.raise(new _index.Exception('Entity not in context', 'Invalid operation'));\n        } else {\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\n        }\n    },\n    // protected\n    setProperty: function setProperty(memberDefinition, value, callback, tran) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n        /// <param name=\"callback\" type=\"Function\">done</param>\n        this[memberDefinition.name] = value;\n\n        //callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        callback.success(this[memberDefinition.name]);\n        return pHandler.getPromise();\n    },\n\n    isValid: function isValid() {\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\n        /// <returns type=\"Boolean\" />\n\n        if (!this.isValidated) {\n            this.ValidationErrors = _index2.default.Validation.Entity.ValidateEntity(this);\n            this.isValidated = true;\n        }\n        return this.ValidationErrors.length == 0;\n    },\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\n    ValidationErrors: {\n        dataType: Array,\n        elementType: _index2.default.Validation.ValidationError,\n        storeOnObject: true,\n        monitorChanges: true,\n        notMapped: true,\n        enumerable: false\n    },\n\n    resetChanges: function resetChanges() {\n        /// <summary>reset changes</summary>\n\n        delete this._changedProperties;\n    },\n\n    changedProperties: {\n        dataType: Array,\n        elementType: _index.MemberDefinition,\n        storeOnObject: true,\n        monitorChanges: false,\n        notMapped: true,\n        enumerable: false\n    },\n\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\n    //,\n\n    //onReady: function (callback) {\n    //    this.__onReadyList = this.__onReadyList || [];\n    //    this.__onReadyList.push(callback);\n    //},\n\n    remove: function remove() {\n        if (_index2.default.ItemStore && 'EntityInstanceRemove' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRemove.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    save: function save() {\n        if (_index2.default.ItemStore && 'EntityInstanceSave' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceSave.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    refresh: function refresh() {\n        if (_index2.default.ItemStore && 'EntityInstanceRefresh' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRefresh.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\n\n    getFieldUrl: function getFieldUrl(field) {\n        if (this.context) {\n            return this.context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\n            var context = this.getType().storeToken.factory();\n            return context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken) {\n            try {\n                var ctx = _index2.default.ItemStore._getContextPromise('default', this.getType());\n                if (ctx instanceof _index2.default.EntityContext) {\n                    return ctx.getFieldUrl(this, field);\n                }\n            } catch (e) {}\n        }\n        return '#';\n    }\n}, {\n    //create get_[property] and set_[property] functions for properties\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\n    //copy public properties to current instance\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\n\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (_index2.default.ItemStore && 'EntityInheritedTypeProcessor' in _index2.default.ItemStore) _index2.default.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\n\n        //default value setter method factory\n        type.defaultValues = {};\n\n        type.memberDefinitions.asArray().forEach(function (pd) {\n            if (pd.hasOwnProperty(\"defaultValue\")) {\n                type.defaultValues[pd.name] = pd.defaultValue;\n            }\n        });\n\n        if (Object.keys(type.defaultValues).length > 0) {\n            type.setDefaultValues = function (initData, instance) {\n                initData = initData || {};\n                var dv = type.defaultValues;\n                for (var n in dv) {\n                    if (!(n in initData)) {\n                        var value = dv[n];\n                        if (\"function\" === typeof value) {\n                            initData[n] = dv[n](n, instance);\n                        } else {\n                            initData[n] = dv[n];\n                        }\n                    }\n                }\n                return initData;\n            };\n        }\n    },\n\n    //Type Events\n    addEventListener: function addEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            this[delegateName] = new _index2.default.Event(eventName, this);\n        }\n        this[delegateName].attach(fn);\n    },\n    removeEventListener: function removeEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].detach(fn);\n    },\n    raiseEvent: function raiseEvent(eventName, data) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].fire(data);\n    },\n\n    getFieldNames: function getFieldNames() {\n        return this.memberDefinitions.getPublicMappedPropertyNames();\n    },\n\n    'from$data.Object': function from$dataObject(value, type, t, options) {\n        if (!_index.Guard.isNullOrUndefined(value)) {\n            var newInstanceOptions;\n            if (options && options.converters) {\n                newInstanceOptions = {\n                    converters: options.converters\n                };\n            }\n\n            return new this(value, newInstanceOptions);\n        } else {\n            return value;\n        }\n    }\n\n});\n\n_index2.default.define = function (name, container, definition) {\n    if (container && !(container instanceof _index2.default.ContainerClass)) {\n        definition = container;\n        container = undefined;\n    }\n    if (!definition) {\n        throw new Error(\"json object type is not supported yet\");\n    }\n    var _def = {};\n    var hasKey = false;\n    var keyFields = [];\n    Object.keys(definition).forEach(function (fieldName) {\n        var propDef = definition[fieldName];\n        if ((typeof propDef === \"undefined\" ? \"undefined\" : _typeof(propDef)) === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\n\n            _def[fieldName] = propDef;\n            if (propDef.key) {\n                keyFields.push(propDef);\n            }\n\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\n                propDef.notMapped = true;\n                propDef.storeOnObject = true;\n            }\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\n                propDef.set = function () {};\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\n                propDef.get = function () {};\n            }\n        } else {\n            _def[fieldName] = { type: propDef };\n        }\n    });\n\n    if (keyFields.length < 1) {\n        var keyProp;\n        switch (true) {\n            case \"id\" in _def:\n                keyProp = \"id\";\n                break;\n            case \"Id\" in _def:\n                keyProp = \"Id\";\n                break;\n            case \"ID\" in _def:\n                keyProp = \"ID\";\n                break;\n        }\n        if (keyProp) {\n            _def[keyProp].key = true;\n            var propTypeName = _index2.default.Container.resolveName(_def[keyProp].type);\n            _def[keyProp].computed = true;\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\n            //}\n        } else {\n                _def.Id = { type: \"int\", key: true, computed: true };\n            }\n    }\n\n    var entityType = _index2.default.Entity.extend(name, container, _def);\n    return entityType;\n};\n_index2.default.implementation = function (name) {\n    return _index.Container.resolveType(name);\n};\n\nvar Event = exports.Event = _index2.default.Event;\nvar Entity = exports.Entity = _index2.default.Entity;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":31}],44:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\n    defaultMode: 'Default',\n    AllChanged: function AllChanged(data) {\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            data._setPropertyChanged(memDefs[i]);\n        }\n        data.entityState = _index2.default.EntityState.Modified;\n    },\n    KeepChanges: function KeepChanges(data) {\n        if (data.changedProperties && data.changedProperties.length > 0) {\n            data.entityState = _index2.default.EntityState.Modified;\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n        }\n    },\n    Default: function Default(data) {\n        data.entityState = _index2.default.EntityState.Unchanged;\n        data.changedProperties = undefined;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],45:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n\n    _index2.default.defaults = _index2.default.defaults || {};\n    _index2.default.defaults.defaultDatabaseName = 'JayDataDefault';\n    _index2.default.defaults.enableRelatedEntityReadMethods = true;\n    _index2.default.defaults.relatedEntityReadMethodPrefix = 'get';\n    _index2.default.defaults.relatedEntityProxyPrefix = '$relatedProxy';\n})();\n\n_index2.default.Class.define('$data.StorageModel', null, null, {\n    constructor: function constructor() {\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\n        this.ComplexTypes = [];\n        this.Enums = [];\n        this.Associations = [];\n    },\n    LogicalType: {},\n    LogicalTypeName: {},\n    PhysicalType: {},\n    PhysicalTypeName: {},\n    EventHandlers: {},\n    TableName: {},\n    TableOptions: { value: undefined },\n    ComplexTypes: {},\n    Enums: {},\n    Associations: {},\n    ContextType: {},\n    Roles: {}\n}, null);\n_index2.default.Class.define('$data.Association', null, null, {\n    constructor: function constructor(initParam) {\n        if (initParam) {\n            this.From = initParam.From;\n            this.FromType = initParam.FromType;\n            this.FromMultiplicity = initParam.FromMultiplicity;\n            this.FromPropertyName = initParam.FromPropertyName;\n            this.To = initParam.To;\n            this.ToType = initParam.ToType;\n            this.ToMultiplicity = initParam.ToMultiplicity;\n            this.ToPropertyName = initParam.ToPropertyName;\n        }\n    },\n    From: {},\n    FromType: {},\n    FromMultiplicity: {},\n    FromPropertyName: {},\n    To: {},\n    ToType: {},\n    ToMultiplicity: {},\n    ToPropertyName: {},\n    ReferentialConstraint: {}\n}, null);\n_index2.default.Class.define('$data.ComplexType', _index2.default.Association, null, {}, null);\n\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\n_index2.default.Class.define('$data.EntityContext', null, null, {\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\n    constructor: function constructor(storageProviderCfg) {\n        if (_index2.default.ItemStore && 'ContextRegister' in _index2.default.ItemStore) _index2.default.ItemStore.ContextRegister.apply(this, arguments);\n\n        if (storageProviderCfg.queryCache) this.queryCache = storageProviderCfg.queryCache;\n\n        if (\"string\" === typeof storageProviderCfg) {\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\n                storageProviderCfg = {\n                    name: \"oData\",\n                    oDataServiceHost: storageProviderCfg\n                };\n            } else {\n                storageProviderCfg = {\n                    name: \"local\",\n                    databaseName: storageProviderCfg\n                };\n            }\n        }\n\n        if (\"provider\" in storageProviderCfg) {\n            storageProviderCfg.name = storageProviderCfg.provider;\n        }\n\n        //Initialize properties\n        this.lazyLoad = false;\n        this.trackChanges = false;\n        this._entitySetReferences = {};\n        this._storageModel = [];\n\n        var ctx = this;\n        ctx._isOK = false;\n\n        var origSuccessInitProvider = this._successInitProvider;\n        this._successInitProvider = function (errorOrContext) {\n            if (errorOrContext instanceof _index2.default.EntityContext) {\n                origSuccessInitProvider(ctx);\n            } else {\n                origSuccessInitProvider(ctx, errorOrContext);\n            }\n        };\n\n        this._storageModel.getStorageModel = function (typeName) {\n            var name = _index.Container.resolveName(typeName);\n            return ctx._storageModel[name];\n        };\n        if (typeof storageProviderCfg.name === 'string') {\n            var tmp = storageProviderCfg.name;\n            storageProviderCfg.name = [tmp];\n        }\n        var i = 0,\n            providerType;\n        var providerList = [].concat(storageProviderCfg.name);\n        var callBack = _index2.default.PromiseHandlerBase.createCallbackSettings({ success: this._successInitProvider, error: this._successInitProvider });\n\n        this._initStorageModelSync();\n        ctx._initializeEntitySets(ctx.getType());\n\n        _index2.default.StorageProviderLoader.load(providerList, {\n            success: function success(providerType) {\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\n                ctx.storageProvider.setContext(ctx);\n                ctx.stateManager = new _index2.default.EntityStateManager(ctx);\n\n                var contextType = ctx.getType();\n                if (providerType.name in contextType._storageModelCache) {\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\n                } else {\n                    _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\n                    ctx._initializeStorageModel();\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\n                }\n                _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\n\n                //ctx._initializeEntitySets(contextType);\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\n\n                //ctx._isOK = false;\n                ctx._initializeStore(callBack);\n            },\n            error: function error() {\n                callBack.error('Provider fallback failed!');\n            }\n        });\n\n        this.addEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                this[delegateName] = new _index2.default.Event(eventName, this);\n            }\n            this[delegateName].attach(fn);\n        };\n\n        this.removeEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].detach(fn);\n        };\n\n        this.raiseEvent = function (eventName, data) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].fire(data);\n        };\n\n        this.ready = this.onReady({\n            success: _index2.default.defaultSuccessCallback,\n            error: function error() {\n                if (_index2.default.PromiseHandler !== _index2.default.PromiseHandlerBase) {\n                    _index2.default.defaultErrorCallback.apply(this, arguments);\n                } else {\n                    _index2.default.Trace.error(arguments);\n                }\n            }\n        });\n    },\n    beginTransaction: function beginTransaction() {\n        var tables = null;\n        var callBack = null;\n        var isWrite = false;\n\n        function readParam(value) {\n            if (_index.Guard.isNullOrUndefined(value)) return;\n\n            if (typeof value === 'boolean') {\n                isWrite = value;\n            } else if (Array.isArray(value)) {\n                tables = value;\n            } else {\n                callBack = value;\n            }\n        }\n\n        readParam(arguments[0]);\n        readParam(arguments[1]);\n        readParam(arguments[2]);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        callBack = pHandler.createCallback(callBack);\n\n        //callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\n        this.storageProvider._beginTran(tables, isWrite, callBack);\n\n        return pHandler.getPromise();\n    },\n    _isReturnTransaction: function _isReturnTransaction(transaction) {\n        return transaction instanceof _index2.default.Base || transaction === 'returnTransaction';\n    },\n    _applyTransaction: function _applyTransaction(scope, cb, args, transaction, isReturnTransaction) {\n        if (isReturnTransaction === true) {\n            if (transaction instanceof _index2.default.Transaction) {\n                Array.prototype.push.call(args, transaction);\n                cb.apply(scope, args);\n            } else {\n                this.beginTransaction(function (tran) {\n                    Array.prototype.push.call(args, tran);\n                    cb.apply(scope, args);\n                });\n            }\n        } else {\n            cb.apply(scope, args);\n        }\n    },\n\n    getDataType: function getDataType(dataType) {\n        // Obsolate\n        if (typeof dataType == \"string\") {\n            var memDef_dataType = this[dataType];\n            if (memDef_dataType === undefined || memDef_dataType === null) {\n                memDef_dataType = eval(dataType);\n            }\n            return memDef_dataType;\n        }\n        return dataType;\n    },\n    _initializeEntitySets: function _initializeEntitySets(ctor) {\n\n        for (var i = 0, l = this._storageModel.length; i < l; i++) {\n            var storageModel = this._storageModel[i];\n            this[storageModel.ItemName] = new _index2.default.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\n            var sm = this[storageModel.ItemName];\n            sm.name = storageModel.ItemName;\n            sm.tableName = storageModel.TableName;\n            sm.tableOptions = storageModel.TableOptions;\n            sm.eventHandlers = storageModel.EventHandlers;\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\n\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\n        }\n    },\n    _initializeStore: function _initializeStore(callBack) {\n        if (this.storageProvider) {\n            this.storageProvider.initializeStore(callBack);\n        }\n    },\n\n    _initStorageModelSync: function _initStorageModelSync() {\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        for (var i = 0; i < _memDefArray.length; i++) {\n            var item = _memDefArray[i];\n            if ('dataType' in item) {\n                var itemResolvedDataType = _index.Container.resolveType(item.dataType);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    var storageModel = new _index2.default.StorageModel();\n                    storageModel.TableName = item.tableName || item.name;\n                    storageModel.TableOptions = item.tableOptions;\n                    storageModel.ItemName = item.name;\n                    storageModel.LogicalType = elementType;\n                    storageModel.LogicalTypeName = elementType.name;\n                    storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                    storageModel.ContextType = this.getType();\n                    storageModel.Roles = item.roles;\n                    if (item.indices) {\n                        storageModel.indices = item.indices;\n                    }\n                    if (item.beforeCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\n                    }\n                    if (item.beforeRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\n                    }\n                    if (item.beforeUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\n                    }\n                    if (item.beforeDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\n                    }\n                    if (item.afterCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\n                    }\n                    if (item.afterRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterRead = item.afterRead;\n                    }\n                    if (item.afterUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\n                    }\n                    if (item.afterDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\n                    }\n                    this._storageModel.push(storageModel);\n                    var name = _index.Container.resolveName(elementType);\n                    this._storageModel[name] = storageModel;\n                }\n            }\n        }\n    },\n    _initializeStorageModel: function _initializeStorageModel() {\n\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        if (typeof intellisense !== 'undefined') return;\n\n        for (var i = 0; i < this._storageModel.length; i++) {\n            var storageModel = this._storageModel[i];\n\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\n            var dbEntityInstanceDefinition = {};\n\n            storageModel.Associations = storageModel.Associations || [];\n            storageModel.ComplexTypes = storageModel.ComplexTypes || [];\n            storageModel.Enums = storageModel.Enums || [];\n            for (var j = 0; j < storageModel.LogicalType.memberDefinitions.getPublicMappedProperties().length; j++) {\n                var memDef = storageModel.LogicalType.memberDefinitions.getPublicMappedProperties()[j];\n                ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\n\n                var memDefResolvedDataType = _index.Container.resolveType(memDef.dataType);\n\n                if ((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1 || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) && _index.Guard.isNullOrUndefined(memDef.inverseProperty)) {\n                    //copy member definition\n                    var t = JSON.parse(JSON.stringify(memDef));\n                    //change datatype to resolved type\n                    t.dataType = memDefResolvedDataType;\n                    dbEntityInstanceDefinition[memDef.name] = t;\n\n                    if (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) {\n                        this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                    }\n\n                    continue;\n                }\n\n                this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\n\n                //var memDef_dataType = this.getDataType(memDef.dataType);\n                if ((memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) && memDef.inverseProperty && memDef.inverseProperty !== '$$unbound') {\n                    this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                } else {\n                    if (memDef.inverseProperty) {\n                        if (memDef.inverseProperty === '$$unbound') {\n                            //member definition is navigation but not back reference\n                            if (memDefResolvedDataType === _index2.default.Array) {\n                                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            } else {\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            }\n                        } else {\n                            //member definition is navigation property one..one or one..many case\n                            var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\n                            if (fields) {\n                                if (fields.elementType) {\n                                    //member definition is one..many connection\n                                    var referealResolvedType = _index.Container.resolveType(fields.elementType);\n                                    if (referealResolvedType === storageModel.LogicalType) {\n                                        this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                                    } else {\n                                        if (typeof intellisense === 'undefined') {\n                                            _index.Guard.raise(new _index.Exception('Inverse property not valid, refereed item element type not match: ' + storageModel.LogicalTypeName, ', property: ' + memDef.name));\n                                        }\n                                    }\n                                } else {\n                                    //member definition is one..one connection\n                                    this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                                }\n                            } else {\n                                if (typeof intellisense === 'undefined') {\n                                    _index.Guard.raise(new _index.Exception('Inverse property not valid'));\n                                }\n                            }\n                        }\n                    } else {\n                        //member definition is a complex type\n                        this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                    }\n                }\n            }\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\n            var dbEntityClassDefinition = {};\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\n\n            //create physical type\n            //TODO\n            storageModel.PhysicalType = _index2.default.Class.define(storageModel.PhysicalTypeName, _index2.default.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\n        }\n    },\n    _initializeActions: function _initializeActions(es, ctor, esDef) {\n        if (esDef && esDef.actions) {\n            var actionKeys = Object.keys(esDef.actions);\n            for (var i = 0; i < actionKeys.length; i++) {\n                var actionName = actionKeys[i];\n                var action = esDef.actions[actionName];\n                if (typeof action === 'function') {\n                    es[actionName] = action;\n                } else {\n                    var actionDef = _index2.default.MemberDefinition.translateDefinition(action, actionName, ctor);\n                    if (actionDef instanceof _index2.default.MemberDefinition && actionDef.kind === _index2.default.MemberTypes.method) {\n                        es[actionName] = actionDef.method;\n                    }\n                }\n            }\n        }\n    },\n    _buildDbType_navigationPropertyComplite: function _buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel) {\n        if (!memDef.inverseProperty) {\n            var refMemDefs = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                var refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === _index.Container.resolveType(storageModel.LogicalType)) refMemDefs.push(m);\n                    }\n                }\n            } else {\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.elementType && m.inverseProperty == memDef.name && _index.Container.resolveType(m.elementType) === storageModel.LogicalType) refMemDefs.push(m);else if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === storageModel.LogicalType) refMemDefs.push(m);\n                    }\n                }\n            }\n            if (refMemDefs) {\n                if (refMemDefs.length > 1) {\n                    if (typeof intellisense !== 'undefined') {\n                        _index.Guard.raise(new _index.Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + _index.Container.resolveName(storageModel.LogicalType)));\n                    }\n                }\n                var refMemDef = refMemDefs.pop();\n                if (refMemDef) {\n                    memDef.inverseProperty = refMemDef.name;\n                }\n            }\n        } else {\n            var refStorageModel = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n            } else {\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n            }\n\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n            if (p) {\n                if (p.inverseProperty) {\n                    if (p.inverseProperty != memDef.name) {\n                        if (typeof intellisense === 'undefined') {\n                            _index.Guard.raise(new _index.Exception('Inverse property mismatch'));\n                        }\n                    }\n                } else {\n                    p.inverseProperty = memDef.name;\n                }\n            }\n        }\n    },\n    _buildDbType_generateConvertToFunction: function _buildDbType_generateConvertToFunction(storageModel) {\n        return function (instance) {\n            return instance;\n        };\n    },\n    _buildDbType_modifyInstanceDefinition: function _buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_modifyClassDefinition: function _buildDbType_modifyClassDefinition(classDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_addComplexTypePropertyDefinition: function _buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, _index2.default.MemberTypes.complexProperty);\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\n        storageModel.ComplexTypes[memDef.name] = complexType;\n        storageModel.ComplexTypes.push(complexType);\n    },\n    _buildDbType_Collection_OneManyDefinition: function _buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.elementType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneManyDefinition: function _buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneOneDefinition: function _buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n        if (!refereedMemberDefinition.required && !memDef.required) {\n            if (typeof intellisense === 'undefined') {\n                if (typeof intellisense === 'undefined') {\n                    _index.Guard.raise(new _index.Exception('In one to one connection, one side must required!', 'One to One connection', memDef));\n                }\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n\n        var association = this._addAssociationElement(storageModel.LogicalType, memDef.required ? \"0..1\" : \"1\", memDef.name, refereedStorageModel.LogicalType, memDef.required ? \"1\" : \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _addNavigationPropertyDefinition: function _addNavigationPropertyDefinition(definition, member, associationName, kind) {\n        var t = JSON.parse(JSON.stringify(member));\n        t.dataType = _index2.default.EntitySet;\n        t.notMapped = true;\n        t.kind = kind ? kind : _index2.default.MemberTypes.navProperty;\n        t.association = associationName;\n        definition[member.name] = t;\n    },\n    _addAssociationElement: function _addAssociationElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.Association({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _createComplexElement: function _createComplexElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.ComplexType({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _build_EnumDefinition: function _build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\n        storageModel.Enums.push(memDefResolvedDataType);\n\n        var typeName = _index.Container.resolveName(memDefResolvedDataType);\n        var converterGroups = this.storageProvider.fieldConverter;\n\n        var createEnumConverter = function createEnumConverter(converterGroup) {\n            converterGroup[typeName] = function (value) {\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\n            };\n        };\n\n        for (var i in converterGroups) {\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\n                createEnumConverter(converterGroups[i]);\n            }\n        }\n    },\n\n    _successInitProvider: function _successInitProvider(context, error) {\n        if (context instanceof _index2.default.EntityContext && context._isOK !== undefined) {\n            if (!error) {\n                context._isOK = true;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].success(context);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            } else {\n                context._isOK = error;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].error(error);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            }\n        }\n    },\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\n    onReady: function onReady(fn) {\n        /// <signature>\n        ///     <summary>\n        ///\n        ///     </summary>\n        ///     <param name=\"successCallback\" type=\"Function\">\n        ///         <summary>Success callback</summary>\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\n        ///     </param>\n        ///     <returns type=\"\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\n        ///     </summary>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        var pHandler = new _index2.default.PromiseHandler();\n        var callBack = pHandler.createCallback(fn);\n        if (this._isOK === true) {\n            callBack.success(this);\n        } else if (this._isOK !== false) {\n            callBack.error(this._isOK);\n        } else {\n            this.onReadyFunction = this.onReadyFunction || [];\n            this.onReadyFunction.push(callBack);\n        }\n\n        return pHandler.getPromise();\n    },\n    ready: { type: _index2.default.Promise },\n    getEntitySetFromElementType: function getEntitySetFromElementType(elementType) {\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"Function\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"String\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        var result = this._entitySetReferences[elementType];\n        if (!result) {\n            try {\n                result = this._entitySetReferences[eval(elementType).name];\n            } catch (ex) {}\n        }\n        return result;\n    },\n    executeQuery: function executeQuery(queryable, callBack, transaction) {\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        query.transaction = transaction instanceof _index2.default.Transaction ? transaction : undefined;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        var that = this;\n        var clbWrapper = {};\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\n\n        var sets = query.getEntitySets();\n\n        var authorizedFn = function authorizedFn() {\n            var ex = true;\n            var wait = false;\n            var ctx = that;\n\n            var readyFn = function readyFn(cancel) {\n                if (cancel === false) ex = false;\n\n                if (ex) {\n                    if (query.transaction) {\n                        if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                            _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                        } else {\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\n                        }\n                    } else {\n                        ctx.beginTransaction(function (tran) {\n                            query.transaction = tran;\n                            if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                                _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                            } else {\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\n                            }\n                        });\n                    }\n                } else {\n                    query.rawDataList = [];\n                    query.result = [];\n                    clbWrapper.success(query);\n                }\n            };\n\n            var i = 0;\n            var callbackFn = function callbackFn(cancel) {\n                if (cancel === false) ex = false;\n\n                var es = sets[i];\n                if (es.beforeRead) {\n                    i++;\n                    var r = es.beforeRead.call(this, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length && ex ? callbackFn : readyFn, sets, query);\n                    } else {\n                        if (r === false) ex = false;\n\n                        if (i < sets.length && ex) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete ? _index2.default.Access.DeleteBatch : _index2.default.Access.Read, this.user, sets, {\n                success: authorizedFn,\n                error: clbWrapper.error\n            });\n        } else authorizedFn();\n    },\n    executeQuerySuccess: function executeQuerySuccess(that, returnTransaction, callBack) {\n        return function (query) {\n            if (_index2.default.QueryCache && _index2.default.QueryCache.isCacheable(that, query)) {\n                _index2.default.QueryCache.addToCache(that, query);\n            }\n\n            query.buildResultSet(that);\n\n            if (_index2.default.ItemStore && 'QueryResultModifier' in _index2.default.ItemStore) _index2.default.ItemStore.QueryResultModifier.call(that, query);\n\n            var successResult;\n\n            if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.Single || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Find || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Count || query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Some || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Every) {\n                if (query.result.length !== 1) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.First) {\n                if (query.result.length === 0) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else {\n                if (typeof query.__count === 'number' && query.result) query.result.totalCount = query.__count;\n\n                that.storageProvider._buildContinuationFunction(that, query);\n\n                successResult = query.result;\n            }\n\n            var readyFn = function readyFn() {\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\n\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\n            };\n\n            var i = 0;\n            var sets = query.getEntitySets();\n\n            var callbackFn = function callbackFn() {\n                var es = sets[i];\n                if (es.afterRead) {\n                    i++;\n                    var r = es.afterRead.call(this, successResult, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\n                    } else {\n                        if (i < sets.length) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n    },\n    executeQueryError: function executeQueryError(that, returnTransaction, callBack) {\n        return function () {\n            if (returnTransaction) callBack.error.apply(this, arguments);else callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                return !(p instanceof _index2.default.Transaction);\n            }));\n        };\n    },\n\n    batchExecuteQuery: function batchExecuteQuery(queryableOptions, callBack, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(callBack);\n\n        var self = this;\n        var methodOperationMappings = {\n            count: 'length',\n            length: 'length',\n            forEach: 'forEach',\n            toArray: 'toArray',\n            single: 'single',\n            some: 'some',\n            every: 'every',\n            first: 'first',\n            removeAll: 'batchDelete'\n        };\n        var methodFrameMappings = {\n            count: 'CountExpression',\n            length: 'CountExpression',\n            forEach: 'ForEachExpression',\n            toArray: 'ToArrayExpression',\n            single: 'SingleExpression',\n            some: 'SomeExpression',\n            every: 'EveryExpression',\n            first: 'FirstExpression',\n            removeAll: 'BatchDeleteExpression'\n        };\n\n        var returnFunc = function returnFunc() {\n            return pHandler.getPromise();\n        };\n\n        if (typeof queryableOptions.length != \"number\") {\n            cbWrapper.error(new _index.Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\n            return returnFunc();\n        }\n\n        var qOptions = [];\n        for (var i = 0; i < queryableOptions.length; i++) {\n            var queryOption = {};\n            if (queryableOptions[i] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i];\n                queryOption.method = 'toArray';\n            } else if (queryableOptions[i].queryable instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i].queryable;\n                queryOption.method = queryableOptions[i].method || 'toArray';\n            } else if (queryableOptions[i][0] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i][0];\n                queryOption.method = queryableOptions[i][1] || 'toArray';\n            } else {\n                cbWrapper.error(new _index.Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            if (queryOption.queryable.entityContext !== self) {\n                cbWrapper.error(new _index.Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\n            qOptions.push(queryOption);\n        }\n\n        var executableQueries = [];\n        for (var i = 0; i < qOptions.length; i++) {\n            var queryOption = qOptions[i];\n\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\n            if (frameExpressionName && _index2.default.Expressions[frameExpressionName] && _index2.default.Expressions[frameExpressionName].isAssignableTo(_index2.default.Expressions.FrameOperator)) {\n\n                var queryExpression = _index.Container['create' + frameExpressionName](queryOption.queryable.expression);\n                var preparator = _index.Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\n\n                try {\n                    var expression = preparator.Visit(queryExpression);\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                    var queryable = _index.Container.createQueryable(queryOption.queryable, expression);\n                    executableQueries.push(queryable);\n                } catch (e) {\n                    cbWrapper.error(e);\n                    return returnFunc();\n                }\n            } else {\n                cbWrapper.error(new _index.Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n        }\n\n        var queryResults = [];\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\n            //wrap queries\n            var batchExecuteQueryExpression = _index.Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\n                return new _index2.default.Query(queryable.expression, queryable.defaultType, self);\n            }));\n\n            var batchExecuteQuery = _index.Container.createQueryable(self, batchExecuteQueryExpression);\n            self.executeQuery(batchExecuteQuery, {\n                success: function success(results) {\n                    var batchResult = [];\n                    var hasError = false;\n                    var errorValue = null;\n                    for (var i = 0; i < results.length && !hasError; i++) {\n                        var query = results[i];\n                        self.executeQuerySuccess(self, returnTransaction, {\n                            success: function success(result) {\n                                batchResult.push(result);\n                            },\n                            error: function error(err) {\n                                hasError = true;\n                                errorValue = err;\n                            }\n                        })(query);\n                    }\n                    if (!hasError) {\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\n                    } else {\n                        cbWrapper.error(errorValue);\n                    }\n                },\n                error: cbWrapper.error\n            }, transaction);\n        } else {\n            var returnTransaction = this._isReturnTransaction(transaction);\n\n            var readIterator = function readIterator(queries, index, iteratorCallback, itTransaction) {\n                var query = queries[index];\n                if (!query) {\n                    return iteratorCallback.success(itTransaction);\n                }\n\n                self.executeQuery(executableQueries[index], {\n                    success: function success(result, tr) {\n                        queryResults.push(result);\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\n                    },\n                    error: iteratorCallback.error\n                }, itTransaction);\n            };\n\n            readIterator(executableQueries, 0, {\n                success: function success(lastTran) {\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\n                },\n                error: cbWrapper.error\n            }, transaction);\n        }\n        return returnFunc();\n    },\n\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\n    saveChanges: function saveChanges(callback, transaction) {\n        if (_index2.default.QueryCache) {\n            _index2.default.QueryCache.reset(this);\n        }\n\n        var changedEntities = [];\n        var trackedEntities = this.stateManager.trackedEntities;\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        var skipItems = [];\n        while (trackedEntities.length > 0) {\n            var additionalEntities = [];\n            //trackedEntities.forEach(function (entityCachedItem) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entityCachedItem = trackedEntities[i];\n\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\n                if (entityCachedItem.data.entityState == _index2.default.EntityState.Unchanged) {\n                    entityCachedItem.skipSave = true;\n                    skipItems.push(entityCachedItem.data);\n                } else {\n                    if (entityCachedItem.data.entityState == _index2.default.EntityState.Modified) {\n                        if (entityCachedItem.data.changedProperties) {\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\n                                if (pMemDef.kind == _index2.default.MemberTypes.navProperty) {\n                                    var a = sModel.Associations[pMemDef.association];\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\n                                    return multiplicity == '*0..1' || multiplicity == '0..11';\n                                }\n                                return true;\n                            });\n                            if (!changeStoredProperty) {\n                                entityCachedItem.skipSave = true;\n                                skipItems.push(entityCachedItem.data);\n                            }\n                        } else {\n                            entityCachedItem.skipSave = true;\n                            skipItems.push(entityCachedItem.data);\n                        }\n                    }\n                }\n\n                //type before events with items\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\n\n                var navigationProperties = [];\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\n                    var p = smPhyMemDefs[ism];\n                    if (p.kind == _index2.default.MemberTypes.navProperty) navigationProperties.push(p);\n                }\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\n                //navigationProperties.forEach(function (navProp) {\n                for (var j = 0; j < navigationProperties.length; j++) {\n                    var navProp = navigationProperties[j];\n\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\n                    var name = navProp.name; //eg.: \"Profile\"\n                    var navPropertyName = association.ToPropertyName; //eg.: User\n\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\n                    //connectedDataList.forEach(function (data) {\n                    for (var k = 0; k < connectedDataList.length; k++) {\n                        var data = connectedDataList[k];\n\n                        if (data) {\n                            var value = data[navPropertyName];\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\n                            if (association.FromMultiplicity === '$$unbound') {\n                                if (data instanceof _index2.default.Array) {\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                    //data.forEach(function (dataItem) {\n                                    for (var l = 0; l < data.length; l++) {\n                                        var dataItem = data[l];\n\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                                    //}, this);\n                                } else {\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                            } else {\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                        //Array\n                                        if (value) {\n                                            if (value instanceof Array) {\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\n                                                    value.push(entityCachedItem.data);\n                                                    data.initData[navPropertyName] = value;\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                                }\n                                            } else {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Item must be array or subtype of array\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                    default:\n                                        //Item\n                                        if (value) {\n                                            if (value !== entityCachedItem.data) {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Integrity check error! Item assigned to another entity!\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                }\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                    case \"0..11\":\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                        break;\n                                }\n                            }\n                            if (!data.entityState) {\n                                //if (data.storeToken === this.storeToken) {\n                                //    data.entityState = $data.EntityState.Modified;\n                                //} else {\n                                //    data.entityState = $data.EntityState.Added;\n                                //}\n                                this.discoverDependentItemEntityState(data);\n                            }\n                            if (additionalEntities.indexOf(data) == -1) {\n                                additionalEntities.push(data);\n                            }\n                        }\n                    }\n                    //}, this);\n                }\n                //}, this);\n            }\n            //}, this);\n\n            //trackedEntities.forEach(function (entity) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entity = trackedEntities[i];\n\n                if (entity.skipSave !== true) {\n                    changedEntities.push(entity);\n                }\n            }\n            //});\n\n            trackedEntities = [];\n            //additionalEntities.forEach(function (item) {\n            for (var i = 0; i < additionalEntities.length; i++) {\n                var item = additionalEntities[i];\n\n                if (!skipItems.some(function (entity) {\n                    return entity == item;\n                })) {\n                    if (!changedEntities.some(function (entity) {\n                        return entity.data == item;\n                    })) {\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\n                    }\n                }\n            }\n            //}, this);\n        }\n\n        //changedEntities.forEach(function (d) {\n        for (var j = 0; j < changedEntities.length; j++) {\n            var d = changedEntities[j];\n\n            if (d.dependentOn) {\n                var temp = [];\n                for (var i = 0; i < d.dependentOn.length; i++) {\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\n                        temp.push(d.dependentOn[i]);\n                    } else {\n                        d.additionalDependentOn = d.additionalDependentOn || [];\n                        d.additionalDependentOn.push(d.dependentOn[i]);\n                    }\n                }\n                d.dependentOn = temp;\n            }\n        }\n        //});\n        skipItems = null;\n        var ctx = this;\n        if (changedEntities.length == 0) {\n            this.stateManager.trackedEntities.length = 0;\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\n            return pHandlerResult;\n        }\n\n        //validate entities\n        var errors = [];\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (entity.data.entityState === _index2.default.EntityState.Added) {\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\n\n                    var memDefType = _index.Container.resolveType(memDef.type);\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\n                        switch (memDefType) {\n                            case _index2.default.String:\n                            case _index2.default.Number:\n                            case _index2.default.Float:\n                            case _index2.default.Decimal:\n                            case _index2.default.Integer:\n                            case _index2.default.Int16:\n                            case _index2.default.Int32:\n                            case _index2.default.Int64:\n                            case _index2.default.Byte:\n                            case _index2.default.SByte:\n                            case _index2.default.Date:\n                            case _index2.default.Boolean:\n                                entity.data[memDef.name] = _index.Container.getDefault(memDef.dataType);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n                //}, this);\n            }\n            if ((entity.data.entityState === _index2.default.EntityState.Added || entity.data.entityState === _index2.default.EntityState.Modified) && !entity.data.isValid()) {\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\n            }\n        }\n        //});\n        if (errors.length > 0) {\n            clbWrapper.error(errors);\n            return pHandlerResult;\n        }\n\n        var access = _index2.default.Access.None;\n\n        var eventData = {};\n        var sets = [];\n        for (var i = 0; i < changedEntities.length; i++) {\n            var it = changedEntities[i];\n            var n = it.entitySet.elementType.name;\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\n            var es = this._entitySetReferences[n];\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || this.user && this.checkPermission) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (it.data.entityState) {\n                    case _index2.default.EntityState.Added:\n                        access |= _index2.default.Access.Create;\n                        if (es.beforeCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        access |= _index2.default.Access.Update;\n                        if (es.beforeUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        access |= _index2.default.Access.Delete;\n                        if (es.beforeDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(it);\n                        }\n                        break;\n                }\n            }\n        }\n\n        var readyFn = function readyFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n            }\n\n            if (changedEntities.length) {\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\n\n                var innerCallback = {\n                    success: function success(tran) {\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\n                    },\n                    error: function error() {\n                        //TODO remove trans from args;\n                        if (returnTransaction) clbWrapper.error.apply(this, arguments);else clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                            return !(p instanceof _index2.default.Transaction);\n                        }));\n                    }\n                };\n\n                if (transaction instanceof _index2.default.Transaction) {\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\n                } else {\n                    ctx.beginTransaction(true, function (tran) {\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\n                    });\n                }\n            } else if (cancelEvent) {\n                clbWrapper.error(new _index.Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\n            } else {\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\n            };\n\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\n        };\n\n        var cancelEvent;\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n        var cmdAll = {\n            beforeCreate: 'createAll',\n            beforeDelete: 'deleteAll',\n            beforeUpdate: 'modifyAll'\n        };\n\n        var callbackFn = function callbackFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n\n                readyFn(cancel);\n                return;\n            }\n\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length && !cancelEvent ? callbackFn : readyFn, m);\n                } else if (r === false) {\n                    cancelEvent = es.name + '.' + c;\n                    //all.forEach(function (it) {\n                    for (var index = 0; index < all.length; index++) {\n                        var it = all[index];\n\n                        var ix = changedEntities.indexOf(it);\n                        changedEntities.splice(ix, 1);\n                    }\n                    //});\n\n                    readyFn();\n                } else {\n                    if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n            }\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(access, this.user, sets, {\n                success: function success() {\n                    if (i < ies.length) callbackFn();else readyFn();\n                },\n                error: clbWrapper.error\n            });\n        } else {\n            if (i < ies.length) callbackFn();else readyFn();\n        }\n\n        return pHandlerResult;\n    },\n    discoverDependentItemEntityState: function discoverDependentItemEntityState(data) {\n        if (data.storeToken === this.storeToken) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else {\n            data.entityState = _index2.default.EntityState.Added;\n        }\n    },\n\n    processEntityTypeBeforeEventHandler: function processEntityTypeBeforeEventHandler(skipItems, entityCachedItem) {\n        if (!entityCachedItem.skipSave) {\n            var entity = entityCachedItem.data;\n            var entityType = entity.getType();\n            var state = entity.entityState;\n\n            switch (true) {\n                case state === _index2.default.EntityState.Added && entityType.onbeforeCreate instanceof _index2.default.Event:\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Modified && entityType.onbeforeUpdate instanceof _index2.default.Event:\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Deleted && entityType.onbeforeDelete instanceof _index2.default.Event:\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    },\n    processEntityTypeAfterEventHandler: function processEntityTypeAfterEventHandler(entityCachedItem) {\n        var entity = entityCachedItem.data;\n        var entityType = entity.getType();\n        var state = entity.entityState;\n\n        switch (true) {\n            case state === _index2.default.EntityState.Added && entityType.onafterCreate instanceof _index2.default.Event:\n                entityType.onafterCreate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Modified && entityType.onafterUpdate instanceof _index2.default.Event:\n                entityType.onafterUpdate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Deleted && entityType.onafterDelete instanceof _index2.default.Event:\n                entityType.onafterDelete.fire(entity);\n                break;\n            default:\n                break;\n        }\n    },\n\n    bulkInsert: function bulkInsert(entitySet, fields, datas, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        if (typeof entitySet === 'string') {\n            var currentEntitySet;\n\n            for (var entitySetName in this._entitySetReferences) {\n                var actualEntitySet = this._entitySetReferences[entitySetName];\n                if (actualEntitySet.tableName === entitySet) {\n                    currentEntitySet = actualEntitySet;\n                    break;\n                }\n            }\n\n            if (!currentEntitySet) currentEntitySet = this[entitySet];\n\n            entitySet = currentEntitySet;\n        }\n        if (entitySet) {\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\n        } else {\n            callback.error(new _index.Exception('EntitySet not found'));\n        }\n        return pHandler.getPromise();\n    },\n\n    prepareRequest: function prepareRequest() {},\n    _postProcessSavedItems: function _postProcessSavedItems(callBack, changedEntities, transaction, returnTransaction) {\n        if (this.ChangeCollector && this.ChangeCollector instanceof _index2.default.Notifications.ChangeCollectorBase) this.ChangeCollector.processChangedData(changedEntities);\n\n        var eventData = {};\n        var ctx = this;\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (!entity.data.storeToken) entity.data.storeToken = ctx.storeToken;\n\n            //type after events with items\n            this.processEntityTypeAfterEventHandler(entity);\n\n            var oes = entity.data.entityState;\n\n            entity.data.entityState = _index2.default.EntityState.Unchanged;\n            entity.data.changedProperties = [];\n            entity.physicalData = undefined;\n\n            var n = entity.entitySet.elementType.name;\n            var es = ctx._entitySetReferences[n];\n\n            var eventName = undefined;\n            switch (oes) {\n                case _index2.default.EntityState.Added:\n                    eventName = 'added';\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    eventName = 'deleted';\n                    break;\n                case _index2.default.EntityState.Modified:\n                    eventName = 'updated';\n                    break;\n            }\n            if (eventName) {\n                this.raiseEvent(eventName, entity);\n            }\n\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (oes) {\n                    case _index2.default.EntityState.Added:\n                        if (es.afterCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        if (es.afterUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        if (es.afterDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(entity);\n                        }\n                        break;\n                }\n            }\n        }\n        //});\n\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var ctx = this;\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n        var cmdAll = {\n            afterCreate: 'createAll',\n            afterDelete: 'deleteAll',\n            afterUpdate: 'modifyAll'\n        };\n\n        var readyFn = function readyFn() {\n            if (!ctx.trackChanges) {\n                ctx.stateManager.reset();\n            }\n\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\n\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\n        };\n\n        var callbackFn = function callbackFn() {\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\n                } else {\n                    if (i < ies.length) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                if (i < ies.length) callbackFn();else readyFn();\n            }\n        };\n\n        if (i < ies.length) callbackFn();else readyFn();\n    },\n    forEachEntitySet: function forEachEntitySet(fn, ctx) {\n        /// <summary>\n        ///     Iterates over the entity sets' of current EntityContext.\n        /// </summary>\n        /// <param name=\"fn\" type=\"Function\">\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\n        /// </param>\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\n        for (var entitySetName in this._entitySetReferences) {\n            var actualEntitySet = this._entitySetReferences[entitySetName];\n            fn.call(ctx, actualEntitySet);\n        }\n    },\n\n    loadItemProperty: function loadItemProperty(entity, property, callback, transaction) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>C  allback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        _index.Guard.requireType('entity', entity, _index2.default.Entity);\n\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        if (entity[memberDefinition.name] != undefined) {\n\n            var pHandler = new _index2.default.PromiseHandler();\n            var callBack = pHandler.createCallback(callback);\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\n\n            return pHandler.getPromise();\n        }\n\n        var isSingleSide = true;\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\n        var elementType = _index.Container.resolveType(memberDefinition.dataType);\n        if (elementType === _index2.default.Array || elementType.isAssignableTo && elementType.isAssignableTo(_index2.default.EntitySet)) {\n            elementType = _index.Container.resolveType(memberDefinition.elementType);\n\n            isSingleSide = false;\n        } else {\n            var associations;\n            for (var i = 0; i < storageModel.Associations.length; i++) {\n                var assoc = storageModel.Associations[i];\n                if (assoc.FromPropertyName == memberDefinition.name) {\n                    associations = assoc;\n                    break;\n                }\n            }\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\") isSingleSide = false;\n        }\n\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\n        if (isSingleSide === true) {\n            //singleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\n            return entitySet.map('function (e) { return e.' + memberDefinition.name + ' }').single(filterFunc, filterParams, callback, transaction);\n        } else {\n            //multipleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(elementType);\n            return entitySet.filter(filterFunc, filterParams).toArray(callback, transaction);\n        }\n    },\n\n    getTraceString: function getTraceString(queryable) {\n        /// <summary>\n        /// Returns a trace string. Used for debugging purposes!\n        /// </summary>\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\n        /// <returns>Trace string</returns>\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        return this.storageProvider.getTraceString(query);\n    },\n    log: function log(logInfo) {\n        //noop as do nothing\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\n    },\n    resolveFieldOperation: function resolveFieldOperation(operation, expression, frameType) {\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\n    },\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\n    },\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\n    },\n\n    _generateServiceOperationQueryable: function _generateServiceOperationQueryable(functionName, returnEntitySet, arg, parameters) {\n        if (typeof console !== 'undefined' && console.log) console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\n\n        var params = [];\n        for (var i = 0; i < parameters.length; i++) {\n            var obj = {};\n            obj[parameters[i]] = _index.Container.resolveType(_index.Container.getTypeName(arg[i]));\n            params.push(obj);\n        }\n\n        var tempOperation = _index2.default.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: _index2.default.Queryable, elementType: this[returnEntitySet].elementType, params: params });\n        return tempOperation.apply(this, arg);\n    },\n    attach: function attach(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attach(entity, mode);\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attachOrGet(entity, mode);\n    },\n\n    addMany: function addMany(entities) {\n        /// <summary>\n        ///     Adds several entities to their matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"Array\" />\n        /// <returns type=\"Array\">Returns the added entities.</returns>\n        var self = this;\n        entities.forEach(function (entity) {\n            self.add(entity);\n        });\n        return entities;\n    },\n\n    add: function add(entity) {\n        /// <summary>\n        ///     Adds a new entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.add(entity);\n    },\n    remove: function remove(entity) {\n        /// <summary>\n        ///     Removes an entity from its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.remove(entity);\n    },\n    storeToken: { type: Object },\n\n    getFieldUrl: function getFieldUrl(entity, member, collection) {\n        try {\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\n            var fieldName = typeof member === 'string' ? member : member.name;\n            if (entity instanceof _index2.default.Entity) {\n                entitySet = this.getEntitySetFromElementType(entity.getType());\n            } else if (!_index.Guard.isNullOrUndefined(entity) && entity.constructor !== _index2.default.Object) {\n                //just a single key\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\n                var key = {};\n                key[keyDef.name] = entity;\n                entity = key;\n            }\n\n            //key object\n            if (!(entity instanceof _index2.default.Entity)) {\n                entity = new entitySet.elementType(entity);\n            }\n\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\n        } catch (e) {}\n        return '#';\n    },\n\n    //xxxx\n    _applyRelatedEntityMethodsToContext: function _applyRelatedEntityMethodsToContext() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                var es = this._entitySetReferences[esName];\n                var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + es.name;\n                //EntitiySets\n                if (!(newMemberName in es)) {\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n                //Context\n                if (!(newMemberName in this)) {\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n            }\n        }\n    },\n    _applyRelatedEntityMethodsToTypes: function _applyRelatedEntityMethodsToTypes() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                //add to Type\n                var elementType = this._entitySetReferences[esName].elementType;\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\n                for (var i = 0; i < members.length; i++) {\n                    var member = members[i];\n                    var memberElementType = null;\n                    if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                        var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                        if (!elementType.getMemberDefinition(newMemberName)) {\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member));\n                        }\n                    }\n                }\n            }\n        }\n    },\n    _createRelatedEntityProxyClass: function _createRelatedEntityProxyClass(type) {\n        var proxyClassName = type.namespace + _index2.default.defaults.relatedEntityProxyPrefix + type.name;\n        if (!_index.Container.isTypeRegistered(proxyClassName)) {\n            var definition = {};\n            var members = type.memberDefinitions.getPublicMappedProperties();\n            for (var i = 0; i < members.length; i++) {\n                var member = members[i];\n                var memberElementType = null;\n                if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                    var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member);\n                }\n            }\n            _index2.default.Class.define(proxyClassName, _index2.default.RelatedEntityProxy, null, definition, null);\n        }\n\n        return _index.Container.resolveType(proxyClassName);\n    },\n    _relatedEntityGetMethod: function _relatedEntityGetMethod(targetType, navigation, context) {\n        var that = this;\n        var keys = targetType.memberDefinitions.getKeyProperties();\n\n        return function (keyValue) {\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof _index2.default.EntityContext ? this.context : undefined));\n            }\n        };\n    }\n}, {\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (type.resolveForwardDeclarations) {\n            type.resolveForwardDeclarations();\n        }\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity) {\n                    if (!cfg.method) {\n                        cfg.method = 'POST';\n                    }\n\n                    if (this.context) {\n                        context = this.context;\n                    } else {\n                        _index.Guard.raise('entity not attached into context');\n                        return;\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: context.getEntitySetFromElementType(this.getType())\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    for (var i = 0; i < cfg.params.length; i++) {\n                        //TODO: check params type\n                        for (var name in cfg.params[i]) {\n                            paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(cfg.params[i][name]), name));\n                        }\n                    }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (typeof clb !== 'function') {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = [];\n        if (cfg.params) {\n            for (var i = 0; i < cfg.params.length; i++) {\n                var param = cfg.params[i];\n                for (var name in param) {\n                    params.push({\n                        name: name,\n                        type: param[name]\n                    });\n                }\n            }\n        }\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    },\n    _convertLogicalTypeNameToPhysical: function _convertLogicalTypeNameToPhysical(name) {\n        return name + '_$db$';\n    },\n    _storageModelCache: {\n        get: function get() {\n            if (!this.__storageModelCache) this.__storageModelCache = {};\n            return this.__storageModelCache;\n        },\n        set: function set() {\n            //todo exception\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],46:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n///EntitySet is responsible for\n/// -creating and holding entityType through schema\n/// - provide Add method\n/// - provide Delete method\n/// - provide Update method\n/// - provide queryProvider for queryable\n\n_index2.default.EntitySchemaConfig = function EntitySchemaConfig() {\n    this.Name = \"\";\n};\n_index2.default.entitySetState = { created: 0, defined: 1, active: 2 };\n\n_index2.default.Class.defineEx('$data.EntitySet', [{ type: _index2.default.Queryable, params: [new _index2.default.Class.ConstructorParameter(1)] }], null, {\n    constructor: function constructor(elementType, context, collectionName, eventHandlers, roles) {\n        /// <signature>\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\n        /// </signature>\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\n        var self = this;\n        context['createAdd' + elementType.name] = function (initData) {\n            var entity = new elementType(initData);\n            return self.add(entity);\n        };\n        this.stateManager = new _index2.default.EntityStateManager(this);\n\n        this.collectionName = collectionName;\n        this.roles = roles;\n\n        for (var i in eventHandlers) {\n            this[i] = eventHandlers[i];\n        }\n    },\n\n    addNew: function addNew(item, cb) {\n        var callback = _index2.default.PromiseHandlerBase.createCallbackSettings(cb);\n        var _item = new this.createNew(item);\n        this.entityContext.saveChanges(cb);\n        return _item;\n    },\n\n    executeQuery: function executeQuery(expression, on_ready) {\n        //var compiledQuery = this.entityContext\n        var callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(on_ready);\n        this.entityContext.executeQuery(expression, callBack);\n    },\n    getTraceString: function getTraceString(expression) {\n        return this.entityContext.getTraceString(expression);\n    },\n    setContext: function setContext(entityContext) {\n        this.entitySetState = _index2.default.entitySetState.active;\n        this.entityContext = entityContext;\n        this.entityContext[this.schema.name] = this[this.schema.name];\n    },\n    _trackEntity: function _trackEntity(entity) {\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEntities.length; i++) {\n            if (trackedEntities[i].data === entity) return;\n        }\n        trackedEntities.push({ entitySet: this, data: entity });\n    },\n    add: function add(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds the given entity to the context.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\n        ///     <example>\n        ///\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\n        ///\n        ///     </example>\n        ///     <example>\n        ///\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///         Persons.add(person);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Added;\n        data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n\n    addMany: function addMany(entities) {\n        var result = [];\n        var self = this;\n        entities.forEach(function (entity) {\n            result.push(self.add(entity));\n        });\n        return result;\n    },\n    remove: function remove(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\n        ///         Persons.remove({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Marks the given entity as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\n        ///     <example>\n        ///\n        ///         Persons.remove(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Deleted;\n        data.changedProperties = undefined;\n        this._trackEntity(data);\n    },\n    attach: function attach(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\n        ///     <example>\n        ///\n        ///         Persons.attach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Set an entity's related entities without loading\n        ///\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\n        ///         Category.attach(categoryPromo);\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\n        ///         Article.attach(article);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\n            var current = this.entityContext.stateManager.trackedEntities[i];\n            if (current.data === data) break;\n            if (current.data.equals(data)) {\n                _index.Guard.raise(new _index.Exception(\"Context already contains this entity!!!\"));\n            }\n        }\n\n        if (mode === true) {\n            if (data.changedProperties && data.changedProperties.length > 0) {\n                data.entityState = _index2.default.EntityState.Modified;\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n            }\n        } else {\n            if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n            var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n            if (typeof attachMode === \"function\") {\n                attachMode.call(_index2.default.EntityAttachMode, data);\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n                data.changedProperties = undefined;\n            }\n        }\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\n        data.context = this.entityContext;\n        this._trackEntity(data);\n    },\n    detach: function detach(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\n        ///         Persons.detach({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Detach from the context and sets state Detached.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <example>\n        ///\n        ///         Persons.detach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\n            entity.entityState = _index2.default.EntityState.Detached;\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\n            return;\n        }\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var person = Persons.attachOrGet({ Id: 5  });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///\n        ///         var attachedPerson = Persons.attachOrGet(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var p = new $news.Types.Person({ Id: 5 });\n        ///         var attachedPerson = Persons.attachOrGet(p);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            return existsItem.data;\n        }\n\n        if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n        var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n        if (typeof attachMode === \"function\") {\n            attachMode.call(_index2.default.EntityAttachMode, data);\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n            data.changedProperties = undefined;\n        }\n        //data.entityState = $data.EntityState.Unchanged;\n        //data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n    //find: function (keys) {\n    //    //todo global scope\n    //    if (!this.entityKeys) {\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\n    //    }\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\n    //        if (item.entitySet == this) {\n    //            var isOk = true;\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\n    //            if (isOk) {\n    //                return item.data;\n    //            }\n    //        }\n    //    }, this);\n    //    //TODO: db call\n    //    return null;\n    //},\n    loadItemProperty: function loadItemProperty(entity, memberDefinition, callback) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\n    },\n    saveChanges: function saveChanges() {\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\n    },\n    addProperty: function addProperty(name, getter, setter) {\n        return this.elementType.addProperty.apply(this.elementType, arguments);\n    },\n    expression: {\n        get: function get() {\n            if (!this._expression) {\n                var ec = _index.Container.createEntityContextExpression(this.entityContext);\n                //var name = entitySet.collectionName;\n                //var entitySet = this.entityContext[entitySetName];\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\n                var es = _index.Container.createEntitySetExpression(ec, _index.Container.createMemberInfoExpression(memberdef), null, this);\n                this._expression = es;\n            }\n\n            return this._expression;\n        },\n        set: function set(value) {\n            this._expression = value;\n        }\n    },\n    getFieldUrl: function getFieldUrl(keys, field) {\n        return this.entityContext.getFieldUrl(keys, field, this);\n    },\n    bulkInsert: function bulkInsert(fields, datas, callback) {\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],47:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.EntityState = {\n    Detached: 0,\n    Unchanged: 10,\n    Added: 20,\n    Modified: 30,\n    Deleted: 40\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],48:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.EntityStateManager', null, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = null;\n        this.trackedEntities = [];\n        this.init(entityContext);\n    },\n    init: function init(entityContext) {\n        this.entityContext = entityContext;\n    },\n    reset: function reset() {\n        this.trackedEntities = [];\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],49:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Base.extend('$data.EntityWrapper', {\n    getEntity: function getEntity() {\n        _index.Guard.raise(\"pure object\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],50:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Enum = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.createEnum = function (name, container, enumType, enumDefinition) {\n    return _index2.default.Enum.extend(name, container, enumType, enumDefinition);\n};\n\n_index2.default.Enum = _index2.default.Class.define(\"$data.Enum\", null, null, {\n    constructor: function constructor() {\n        return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Cannot create instance from enum type!\"));\n    }\n}, {\n    extend: function extend(name, container, enumType, enumDefinition) {\n        if (!enumDefinition) {\n            if (!enumType) {\n                enumDefinition = container;\n                container = undefined;\n            } else {\n                enumDefinition = enumType;\n                enumType = container;\n                container = undefined;\n            }\n        }\n\n        enumType = enumType || _index2.default.Integer;\n        enumType = _index.Container.resolveType(enumType);\n        var classDefinition = {\n            __enumType: { get: function get() {\n                    return enumType;\n                }, set: function set() {}, enumerable: false, writable: false }\n        };\n\n        var getEnumDef = function getEnumDef(value, index) {\n            return { get: function get() {\n                    return value;\n                }, set: function set() {}, enumMember: true, index: index };\n        };\n\n        var defaultValue = 0;\n        var isValueCalculation = [_index2.default.Byte, _index2.default.SByte, _index2.default.Int16, _index2.default.Integer, _index2.default.Int64].indexOf(enumType) >= 0;\n        var hasIndex = false;\n\n        var enumDef = [];\n        if (Array.isArray(enumDefinition)) {\n            for (var i = 0; i < enumDefinition.length; i++) {\n                var enumValA = enumDefinition[i];\n                if ((typeof enumValA === \"undefined\" ? \"undefined\" : _typeof(enumValA)) === \"object\" && typeof enumValA.name === \"string\") {\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\n                    if (typeof enumValA.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else if (typeof enumValA === \"string\") {\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\n                } else {\n                    return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Invalid enum member\"));\n                }\n            }\n        } else if ((typeof enumDefinition === \"undefined\" ? \"undefined\" : _typeof(enumDefinition)) === \"object\") {\n            for (var enumName in enumDefinition) {\n                var enumValO = enumDefinition[enumName];\n                if ((typeof enumValO === \"undefined\" ? \"undefined\" : _typeof(enumValO)) === \"object\") {\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\n                    if (typeof enumValO.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else {\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\n                }\n            }\n        }\n\n        if (hasIndex) {\n            enumDef.sort(function (a, b) {\n                if (a.index < b.index) return -1;\n                if (a.index > b.index) return 1;\n                return 0;\n            });\n        }\n\n        var enumOptions = [];\n        for (var i = 0; i < enumDef.length; i++) {\n            var enumVal = enumDef[i];\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\n                enumVal.value = defaultValue;\n            }\n            if (typeof enumVal.value === \"number\") {\n                defaultValue = enumVal.value;\n            }\n            defaultValue++;\n            enumOptions.push(enumVal.name);\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\n        }\n\n        var enumClass = _index2.default.Base.extend.call(this, name, container, {}, classDefinition);\n\n        _index2.default.Container.registerConverter(name, {\n            'default': function _default(value) {\n                if (typeof value == \"string\" && enumOptions.indexOf(value) >= 0) {\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\n                    if (enumMember) {\n                        return enumMember.get();\n                    }\n                }\n\n                for (var i = 0; i < enumDef.length; i++) {\n                    var enumVal = enumDef[i];\n                    if (enumVal.value === value) return value;\n                }\n\n                throw 0;\n            }\n        });\n\n        return enumClass;\n    }\n});\n\nvar Enum = exports.Enum = _index2.default.Enum;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":31}],51:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ArrayLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(items) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\n        this.items = items || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ArrayLiteral, writable: true },\n\n    items: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ExpressionNode },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        ///<var nam\n        var result = \"[\" + this.items.map(function (item) {\n            return item.toString();\n        }).join(\",\") + \"]\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],52:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CallExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member, args) {\n        ///<summary>Represents a call to an object or global method</summary>\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\n        this.expression = expression;\n        this.member = member;\n        this.args = args;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.Call\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (thisObj, method, args) {\n                if (typeof method !== 'function') {\n                    method = thisObj[method];\n                }\n                _index.Guard.requireType(\"method\", method, Function);\n                return method.apply(thisObj, args);\n            };\n        },\n        set: function set(value) {\n            _index.Guard.raise(\"Property can not be set\");\n        }\n    },\n\n    toString: function toString(debug) {\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],53:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeParser', null, null, {\n\n    constructor: function constructor(scopeContext) {\n        ///<signature>\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        ///</signature>\n        ///<signature>\n        ///</signature>\n        this.scopeContext = scopeContext;\n        this.lambdaParams = [];\n    },\n\n    log: function log(logInfo) {\n        if (this.scopeContext) this.scopeContext.log(logInfo);\n    },\n\n    parseExpression: function parseExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        if ((typeof code === 'undefined' ? 'undefined' : _typeof(code)) === 'object') {\n            code = '';\n        }\n        var result = {\n            success: true,\n            errorMessage: '',\n            errorDetails: ''\n        };\n        ///<var name=\"AST\" type=\"Date\" />\n\n        //console.log(code.toString());\n        if (_index2.default.Acorn) {\n            //console.log('using acorn.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else if (_index2.default.Esprima) {\n            //console.log('using esprima.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else {\n            //console.log('using JayLint');\n            var AST = _index2.default.ASTParser.parseCode(code);\n            this.log({ event: \"AST\", data: AST });\n            if (!AST.success) {\n                return {\n                    success: false,\n                    error: \"ASTParser error\",\n                    errorMessage: AST.errors ? JSON.stringify(AST.errors) : \"could not get code\"\n                };\n            }\n            var b = this.Build2(AST.tree.first[0]);\n            result = { success: true, expression: b, errors: AST.errors };\n            return result;\n        }\n    },\n\n    createExpression: function createExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n\n        var result = this.parseExpression(code, resolver);\n        if (!result.success) {\n            _index.Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\n        }\n        return result.expression;\n    },\n\n    ParserBuild: function ParserBuild(node) {\n        //console.log(node);\n        return this['Parser' + node.type](node);\n    },\n\n    ParserExpressionStatement: function ParserExpressionStatement(node) {\n        return this.ParserBuild(node.expression);\n    },\n\n    ParserBlockStatement: function ParserBlockStatement(node) {\n        return this.ParserBuild(node.body[0]);\n    },\n\n    ParserReturnStatement: function ParserReturnStatement(node) {\n        return this.ParserBuild(node.argument);\n    },\n\n    ParserMemberExpression: function ParserMemberExpression(node) {\n        return new _index2.default.Expressions.PropertyExpression(this.ParserBuild(node.object), new _index2.default.Expressions.ConstantExpression(node.property.name || node.property.value, _typeof(node.property.name || node.property.value)));\n    },\n\n    ParserIdentifier: function ParserIdentifier(node) {\n        return this.ParserParameter(node, this.lambdaParams.indexOf(node.name) > -1 ? _index2.default.Expressions.ExpressionType.LambdaParameterReference : _index2.default.Expressions.ExpressionType.ParameterReference);\n    },\n\n    ParserObjectExpression: function ParserObjectExpression(node) {\n        var props = new Array(node.properties.length);\n        for (var i = 0; i < node.properties.length; i++) {\n            props[i] = this.ParserProperty(node.properties[i]);\n        }\n\n        return new _index2.default.Expressions.ObjectLiteralExpression(props);\n    },\n\n    ParserArrayExpression: function ParserArrayExpression(node) {\n        var items = new Array(node.elements.length);\n        for (var i = 0; i < node.elements.length; i++) {\n            items[i] = this.ParserBuild(node.elements[i]);\n        }\n\n        return new _index2.default.Expressions.ArrayLiteralExpression(items);\n    },\n\n    ParserProperty: function ParserProperty(node) {\n        return new _index2.default.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\n    },\n\n    ParserArrowFunctionExpression: function ParserArrowFunctionExpression(node) {\n        return this.ParserFunctionExpression(node);\n    },\n\n    ParserFunctionExpression: function ParserFunctionExpression(node) {\n        var params = new Array(node.params.length);\n        for (var i = 0; i < node.params.length; i++) {\n            if (i === 0 || _index2.default.defaults.parameterResolutionCompatibility) {\n                this.lambdaParams.push(node.params[i].name);\n                params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.LambdaParameter);\n            } else {\n                params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.Parameter);\n            }\n            params[i].owningFunction = result;\n        }\n        var result = new _index2.default.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\n\n        return result;\n    },\n\n    ParserParameter: function ParserParameter(node, nodeType) {\n        var result = new _index2.default.Expressions.ParameterExpression(node.name, null, nodeType);\n        if (nodeType == _index2.default.Expressions.ExpressionType.LambdaParameterReference) {\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\n        }\n\n        return result;\n    },\n\n    ParserLogicalExpression: function ParserLogicalExpression(node) {\n        return this.ParserBinaryExpression(node);\n    },\n\n    ParserOperators: {\n        value: {\n            \"==\": { expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a == b;\n                } },\n            \"===\": { expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a === b;\n                } },\n            \"!=\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a != b;\n                } },\n            \"!==\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a !== b;\n                } },\n            \">\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a > b;\n                } },\n            \">=\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a >= b;\n                } },\n            \"<=\": { expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a <= b;\n                } },\n            \"<\": { expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a < b;\n                } },\n            \"&&\": { expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a && b;\n                } },\n            \"||\": { expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a || b;\n                } },\n            \"&\": { expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a & b;\n                } },\n            \"|\": { expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a | b;\n                } },\n            \"+\": { expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n                    return a + b;\n                } },\n            \"-\": { expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n                    return a - b;\n                } },\n            \"/\": { expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n                    return a / b;\n                } },\n            \"%\": { expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n                    return a % b;\n                } },\n            \"*\": { expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n                    return a * b;\n                } },\n            \"[\": { expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n                    return a[b];\n                } },\n            \"in\": { expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n                    return a in b;\n                } }\n        }\n    },\n\n    ParserUnaryOperators: {\n        value: {\n            \"+\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n                    return +operand;\n                } },\n            \"-\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n                    return -operand;\n                } },\n            \"++true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return ++operand;\n                } },\n            \"--true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return --operand;\n                } },\n            \"++false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return operand++;\n                } },\n            \"!\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n                    return !operand;\n                } },\n            \"--false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return operand--;\n                } }\n        }\n    },\n\n    ParserUnaryExpression: function ParserUnaryExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\n    },\n\n    ParserUpdateExpression: function ParserUpdateExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\n    },\n\n    ParserBinaryExpression: function ParserBinaryExpression(node) {\n        return new _index2.default.Expressions.SimpleBinaryExpression(this.ParserBuild(node.left), this.ParserBuild(node.right), this.ParserOperators[node.operator].expressionType, node.operator, this.ParserOperators[node.operator].type);\n    },\n\n    ParserThisExpression: function ParserThisExpression(node) {\n        return new _index2.default.Expressions.ThisExpression();\n    },\n\n    ParserLiteral: function ParserLiteral(node) {\n        return new _index2.default.Expressions.ConstantExpression(node.value, _typeof(node.value));\n    },\n\n    ParserCallExpression: function ParserCallExpression(node) {\n        var method = this.ParserBuild(node.callee);\n        var args = new Array(node.arguments.length);\n        for (var i = 0; i < node.arguments.length; i++) {\n            args[i] = this.ParserBuild(node.arguments[i]);\n        }\n\n        var member;\n        var expression;\n        switch (true) {\n            case method instanceof _index2.default.Expressions.PropertyExpression:\n                expression = method.expression;\n                member = method.member;\n                break;\n            case method instanceof _index2.default.Expressions.ParameterExpression:\n                expression = new _index2.default.Expressions.ConstantExpression(null, _typeof(null));\n                member = method;\n                break;\n        }\n\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    } /*,\r\n       Build2: function (node) {\r\n         ///<param name=\"node\" type=\"Lint\" />\r\n         ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n         var n;\r\n         switch (node.arity) {\r\n             case \"number\":\r\n             case \"string\":\r\n                 n = this.BuildConstant(node);\r\n                 break;\r\n             case \"prefix\":\r\n                 switch (node.value) {\r\n                     case \"{\":\r\n                         n = this.BuildObjectLiteral(node);\r\n                         break;\r\n                     case \"[\":\r\n                         n = this.BuildArrayLiteral(node);\r\n                         break;\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     //TODO: default case\r\n                 }\r\n                 break;\r\n             case \"suffix\":\r\n                 switch (node.value) {\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     default:\r\n                         Guard.raise(\"Unknown suffix: \" + node.value);\r\n                 }\r\n                 break;\r\n             case \"infix\":\r\n                 switch (node.value) {\r\n                     case \"[\":\r\n                         n = this.BuildArray(node);\r\n                         break;\r\n                     case $data.binaryOperators.resolve(node.value):\r\n                         n = this.BuildSimpleBinary(node);\r\n                         break;\r\n                     case \"function\":\r\n                         Guard.raise(\"Unexpected function arity\");\r\n                     case \"(\":\r\n                         n = this.BuildCall(node);\r\n                         break;\r\n                     case \".\":\r\n                         n = this.BuildProperty(node);\r\n                         break;\r\n                     default:\r\n                         debugger;\r\n                         //TODO: remove debugger, throw exception or break\r\n                 }\r\n                 break;\r\n             case \"statement\":\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         //TODO: consider adding break\r\n                 }\r\n                 break;\r\n             default:\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         break;\r\n                     case \"true\":\r\n                     case \"false\":\r\n                     case \"null\":\r\n                         n = this.BuildConstant(node);\r\n                         break;\r\n                     case \"this\":\r\n                         n = this.BuildThis(node);\r\n                         break;\r\n                     default:\r\n                         n = this.BuildParameter(node);\r\n                         break;\r\n                 }\r\n         }\r\n         return n;\r\n      },\r\n       BuildThis: function (node) {\r\n         var result = Container.createThisExpression();\r\n         return result;\r\n      },\r\n       BuildConstant: function (node) {\r\n         ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n         var value = node.value;\r\n         var type = node.type;\r\n         if (node.reserved === true) {\r\n             switch (node.value) {\r\n                 case \"true\": value = true; type = typeof true; break;\r\n                 case \"false\": value = false; type = typeof false; break;\r\n                 case \"null\": value = null; type = typeof null; break;\r\n                 //TODO: missing default case\r\n             }\r\n         }\r\n         var result = new $data.Expressions.ConstantExpression(value, type);\r\n         return result;\r\n      },\r\n       BuildFunctionParameter: function (node) {\r\n       },\r\n       BuildArray: function (node) {\r\n         switch (node.second.type) {\r\n             case \"string\":\r\n                 return this.BuildProperty(node);\r\n             case \"number\":\r\n             default:\r\n                 return this.BuildSimpleBinary(node);\r\n         }\r\n      },\r\n       BuildParameter: function (node) {\r\n         ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n         ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n         var paramName = node.value;\r\n         //TODO\r\n         //var paramType = this.resolver.resolveParameterType(node);\r\n         var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                     this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                 $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n         var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n           if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n             result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n         }\r\n           return result;\r\n      },\r\n       BuildArrayLiteral: function(node) {\r\n         var self = this;\r\n         var items = node.first.map(function (item) { return self.Build2(item); });\r\n         var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n         return result;\r\n      },\r\n       BuildObjectLiteral: function (node) {\r\n         var self = this;\r\n         var fields = node.first.map(function (item) {\r\n             var eItem = self.Build2(item.first);\r\n             var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n             return result;\r\n         });\r\n         var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n         return result;\r\n      },\r\n       BuildFunction: function (node) {\r\n         ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n         ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n         var self = this;\r\n         var paramStack = [];\r\n         var params = node.first && node.first.map(function (paramNode) {\r\n             //paramStack.push(paramNode.value);\r\n             this.lambdaParams.push(paramNode.value);\r\n             return self.BuildParameter(paramNode);\r\n         }, this);\r\n         params = params || [];\r\n           //skipping return for convenience\r\n         //Possible we should raise an error as predicates and selectors can\r\n         //not be code blocks just expressions\r\n           var hasReturn = node.block.length == 0 ? false :\r\n             node.block[0].value === \"return\" ? true : false;\r\n         var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n           paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n           var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n         params.forEach(function (param) {\r\n             param.owningFunction = result;\r\n         });\r\n           //TODO place on prototyope\r\n         result.name = node.name;\r\n         return result;\r\n      },\r\n       BuildCall: function (node) {\r\n         var self = this;\r\n         var method = self.Build2(node.first);\r\n         var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n         var member;\r\n         var expression;\r\n         switch(true){\r\n             case method instanceof $data.Expressions.PropertyExpression:\r\n                 expression = method.expression;\r\n                 member = method.member;\r\n                 break;\r\n             case method instanceof $data.Expressions.ParameterExpression:\r\n                 expression = Container.createConstantExpression(null, typeof null);\r\n                 member = method;\r\n                 break;\r\n             //TODO: missing default case\r\n         }\r\n           var result = Container.createCallExpression(expression, member, args);\r\n         return result;\r\n      },\r\n       BuildProperty: function (node) {\r\n         ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n         ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n         ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n         var expression = this.Build2(node.first);\r\n         //TODO\r\n         //var type = expression.type;\r\n         //var member = type.getMemberDefinition()\r\n         //TODO how to not if?????\r\n         var member;\r\n         if (node.second.identifier) {\r\n             member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n         } else {\r\n             member = this.Build2(node.second);\r\n         }\r\n         var result = new $data.Expressions.PropertyExpression(expression, member);\r\n         return result;\r\n      },\r\n         BuildUnary: function(node) {\r\n         var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n         var nodeType = operator.expressionType;\r\n         var operand = this.Build2(node.first);\r\n         var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n         return result;\r\n      },\r\n       BuildSimpleBinary: function (node) {\r\n         ///<param name=\"node\" type=\"LintInflixNode\" />\r\n           var operator = $data.binaryOperators.getOperator(node.value);\r\n         var nodeType = operator.expressionType;\r\n           var left = this.Build2(node.first || node.left);\r\n         var right = this.Build2(node.second || node.right);\r\n         var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n         return result;\r\n      }\r\n       //Build: function (node, expNode) {\r\n      //    var n;\r\n      //    switch (node.arity) {\r\n      //        case \"ternary\":\r\n      //            if (node.value == \"?\")\r\n      //                n = this.BuildDecision(node, expNode);\r\n      //            else\r\n      //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n      //            break;\r\n      //        case null:\r\n      //        default:\r\n      //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n      //    }\r\n      //    return n;\r\n      //},*/\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],54:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ConstantExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(value, type, name, elementType) {\n        this.value = value;\n        //TODO\n        //this.type = Container.getTypeName(value);\n\n        this.type = type;\n        this.name = name;\n        this.elementType = elementType;\n        if (!_index.Guard.isNullOrUndefined(this.value)) {\n            this.type = _index.Container.resolveType(this.type);\n            if (this.type === _index2.default.Array && this.elementType || _index.Container.resolveType(_index.Container.getTypeName(this.value)) !== this.type) this.value = _index.Container.convertTo(value, this.type, this.elementType);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Constant, enumerable: true },\n    type: { value: Object, writable: true },\n    elementType: { value: Object, writable: true },\n    value: { value: undefined, writable: true },\n    toString: function toString(debug) {\n        //return \"[constant: \" + this.value.toString() + \"]\";\n        return this.value.toString();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],55:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ContinuationExpressionBuilder', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(mode) {\n        this.mode = mode;\n    },\n    compile: function compile(query) {\n\n        var findContext = { mode: \"find\", skipExists: false };\n        this.Visit(query.expression, findContext);\n\n        var result = {\n            skip: findContext.skipSize,\n            take: findContext.pageSize,\n            message: ''\n        };\n\n        if ('pageSize' in findContext) {\n            var expression;\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\n\n            if (!findContext.skipExists && findContext.pageSize) {\n                context.append = true;\n                expression = this.Visit(query.expression, context);\n            } else if (findContext.skipExists) {\n                expression = this.Visit(query.expression, context);\n            }\n\n            if (!context.abort) {\n                result.expression = expression;\n            } else {\n                result.skip = (result.skip || 0) - result.take;\n                result.message = 'Invalid skip value!';\n            }\n        } else {\n            result.message = 'take expression not defined in the chain!';\n        }\n\n        return result;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n\n        switch (context.mode) {\n            case 'find':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Take) {\n                    context.pageSize = expression.amount.value;\n                } else {\n                    context.skipSize = expression.amount.value;\n                    context.skipExists = true;\n                }\n                break;\n            case 'prev':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = expression.amount.value - context.pageSize;\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\n\n                    var constExp = _index.Container.createConstantExpression(Math.max(amount, 0), \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0, no prev\n                    context.abort = true;\n                }\n                break;\n            case 'next':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = context.pageSize + expression.amount.value;\n                    var constExp = _index.Container.createConstantExpression(amount, \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0\n                    var constExp = _index.Container.createConstantExpression(context.pageSize, \"number\");\n                    return _index.Container.createPagingExpression(expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n                }\n                break;\n            default:\n        }\n\n        this.Visit(expression.source, context);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],56:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.AssociationInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(associationInfo) {\n        this.associationInfo = associationInfo;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.AssociationInfo, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],57:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, parameters) {\n        if (_index.Container.resolveType(_index.Container.getTypeName(source)) == _index2.default.String && source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\" && !/^[^\\.]*(=>)/.test(source.replace(/^[\\s\\xA0]+/, \"\"))) {\n            source = \"function (it) { return \" + source + \"; }\";\n        }\n\n        this.source = source;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Code, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],58:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeToEntityConverter', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\n        this.scopeContext = scopeContext;\n        this.parameters = [];\n    },\n\n    VisitBinary: function VisitBinary(expression, context) {\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n\n        if (!(left instanceof _index2.default.Expressions.ConstantExpression) && right instanceof _index2.default.Expressions.ConstantExpression || !(right instanceof _index2.default.Expressions.ConstantExpression) && left instanceof _index2.default.Expressions.ConstantExpression) {\n\n            var refExpression, constExpr;\n            if (right instanceof _index2.default.Expressions.ConstantExpression) {\n                refExpression = left;\n                constExpr = right;\n            } else {\n                refExpression = right;\n                constExpr = left;\n            }\n\n            var memInfo;\n            if ((memInfo = refExpression.selector) instanceof _index2.default.Expressions.MemberInfoExpression || (memInfo = refExpression.operation) instanceof _index2.default.Expressions.MemberInfoExpression) {\n\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\n                    var fieldType = _index.Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\n                    var constExprType = _index.Container.resolveType(constExpr.type);\n\n                    if (fieldType !== constExprType) {\n\n                        var value = constExpr.value;\n                        if (expression.operator === _index2.default.Expressions.ExpressionType.In) {\n                            if (Array.isArray(value)) {\n                                var resultExp = [];\n                                for (var i = 0; i < value.length; i++) {\n                                    resultExp.push(new _index2.default.Expressions.ConstantExpression(value[i], fieldType));\n                                }\n                                value = resultExp;\n                                fieldType = _index2.default.Array;\n                            } else {\n                                fieldType = constExprType;\n                            }\n                        }\n\n                        if (right === constExpr) {\n                            right = new _index2.default.Expressions.ConstantExpression(value, fieldType, right.name);\n                        } else {\n                            left = new _index2.default.Expressions.ConstantExpression(value, fieldType, left.name);\n                        }\n                    }\n                }\n            }\n        }\n\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\n        return result;\n    },\n\n    VisitUnary: function VisitUnary(expression, context) {\n        var operand = this.Visit(expression.operand, context);\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\n        return result;\n    },\n\n    VisitParameter: function VisitParameter(expression, context) {\n        _index.Guard.requireValue(\"context\", context);\n        var et = _index2.default.Expressions.ExpressionType;\n        switch (expression.nodeType) {\n            case et.LambdaParameterReference:\n                var result = _index.Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\n                return result;\n            case et.LambdaParameter:\n                //TODO: throw descriptive exception or return a value\n                break;\n            default:\n                _index.Guard.raise(\"Parameter '\" + expression.name + \"' is missing!\");\n                break;\n        }\n    },\n\n    VisitThis: function VisitThis(expression, context) {\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\n        var result = _index.Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\n        return result;\n    },\n\n    VisitFunction: function VisitFunction(expression, context) {\n        var result = _index2.default.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\n        return result.body;\n    },\n\n    VisitCall: function VisitCall(expression, context) {\n        //var exp = this.Visit(expression.expression);\n        var self = this;\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n        var args = expression.args.map(function (arg) {\n            if (arg instanceof _index2.default.Expressions.FunctionExpression && (exp instanceof _index2.default.Expressions.EntitySetExpression || exp instanceof _index2.default.Expressions.FrameOperationExpression)) {\n                var operation = self.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n\n                var entitySet = self.scopeContext.getEntitySetFromElementType(exp.elementType);\n                var setExpr = null;\n                if (!entitySet) {\n                    //TODO\n                    _index.Guard.raise(\"Nested operations without entity set is not supported\");\n                } else {\n                    setExpr = entitySet.expression;\n                }\n\n                var frameType = context.frameType;\n                context.frameType = operation.frameType;\n                context.lambdaParameters.push(setExpr);\n                var res = self.Visit(arg, context);\n                context.lambdaParameters.pop();\n                context.frameType = frameType;\n\n                if (operation.frameTypeFactory) {\n                    return operation.frameTypeFactory(setExpr, res);\n                } else {\n                    return new operation.frameType(setExpr, res);\n                }\n            } else {\n                return self.Visit(arg, context);\n            }\n        });\n        var result;\n\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\n        switch (true) {\n            case exp instanceof _index2.default.Expressions.QueryParameterExpression:\n                var argValues = args.map(function (a) {\n                    return a.value;\n                });\n                result = expression.implementation(exp.value, member.value, argValues);\n                //var args = expressions\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n            case exp instanceof _index2.default.Expressions.EntityFieldExpression:\n\n            case exp instanceof _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntitySetExpression:\n            case exp instanceof _index2.default.Expressions.FrameOperationExpression:\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntityExpression:\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            case exp instanceof _index2.default.Expressions.EntityContextExpression:\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            default:\n                _index.Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\n            //TODO we must not alter the visited tree\n        }\n    },\n    _resolveFunctionArguments: function _resolveFunctionArguments(args, params) {\n        if (params) // remove current field poz\n            params = params.filter(function (p, i) {\n                return p.name !== '@expression';\n            });\n\n        //objectArgs\n        if (args.length === 1 && args[0] instanceof _index2.default.Expressions.ConstantExpression && _typeof(args[0].value) === 'object' && args[0].value && params && params[0] && args[0].value.constructor === _index2.default.Object && params.some(function (param) {\n            return param.name in args[0].value;\n        })) {\n\n            return params.map(function (p) {\n                var type = p.type || p.dataType || args[0].type;\n                return new _index2.default.Expressions.ConstantExpression(args[0].value[p.name], _index.Container.resolveType(type), p.name);\n            });\n        } else {\n            return args.map(function (expr, i) {\n                if (expr instanceof _index2.default.Expressions.ConstantExpression && params && params[i]) {\n                    var type = params[i].type || params[i].dataType || expr.type;\n                    return new _index2.default.Expressions.ConstantExpression(expr.value, _index.Container.resolveType(type), params[i].name);\n                } else {\n                    return expr;\n                }\n            });\n        }\n    },\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\n        _index.Guard.requireType(\"member\", member, _index2.default.Expressions.ConstantExpression);\n\n        function isPrimitiveType(memberDefinitionArg) {\n\n            var t = memberDefinitionArg.dataType;\n            if (typeof t === 'function') {\n                return false;\n            }\n\n            // suspicious code\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\n        }\n\n        switch (exp.expressionType) {\n            case _index2.default.Expressions.EntitySetExpression:\n            case _index2.default.Expressions.EntityExpression:\n                var memberDefinition = exp.getMemberDefinition(member.value);\n                if (!memberDefinition) {\n                    _index.Guard.raise(new _index.Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\n                }\n                //var storageMemberDefinition =\n                var storageField = memberDefinition.storageModel.PhysicalType.memberDefinitions.getMember(memberDefinition.name);\n                var res;\n                var memberDefinitionExp;\n                switch (storageField.kind) {\n                    case \"property\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createEntityFieldExpression(exp, memberDefinitionExp);\n                        return res;\n                    case \"navProperty\":\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\n                        var setExpression = _index.Container.createEntitySetExpression(exp, _index.Container.createAssociationInfoExpression(assocInfo));\n                        if (assocInfo.ToMultiplicity !== \"*\") {\n                            var ee = _index.Container.createEntityExpression(setExpression, {});\n                            return ee;\n                        } /* else {\r\n                             context.lambdaParameters.push(setExpression);\r\n                          }*/\n                        return setExpression;\n                    case \"complexProperty\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createComplexTypeExpression(exp, memberDefinitionExp);\n                        return res;\n                    //TODO: missing default case\n                }\n\n            //s/switch => property or navigationproperty\n            case _index2.default.Expressions.ComplexTypeExpression:\n                var memDef = exp.getMemberDefinition(member.value);\n                if (!memDef) {\n                    _index.Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\n                }\n                var memDefExp = _index.Container.createMemberInfoExpression(memDef);\n                var result;\n                //TODO!!!!\n                if (_index.Container.isPrimitiveType(_index.Container.resolveType(memDef.dataType))) {\n                    result = _index.Container.createEntityFieldExpression(exp, memDefExp);\n                    return result;\n                }\n                result = _index.Container.createComplexTypeExpression(exp, memDefExp);\n                return result;\n            case _index2.default.Expressions.QueryParameterExpression:\n                var value = expression.implementation(exp.value, member.value);\n                this.parameters[exp.index].name += \"$\" + member.value;\n                this.parameters[exp.index].value = value;\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, _index.Container.getTypeName(value));\n            case _index2.default.Expressions.EntityFieldExpression:\n            case _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, []);\n\n                return result;\n            default:\n                _index.Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],59:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ComplexTypeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.ComplexTypeExpression]);\n        _index.Guard.requireType(\"selector\", selector, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.MemberInfoExpression]);\n        this.source = source;\n        this.selector = selector;\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\n        var t = _index.Container.resolveType(dt);\n        this.entityType = t;\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Com }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],60:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityContextExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(instance) {\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\n        this.instance = instance;\n        //this.storage_type = {};\n        //this.typeName = this.type.name;\n    },\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityContext, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],61:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\n        ///</signature>\n        _index.Guard.requireValue(\"source\", source);\n        _index.Guard.requireValue(\"selector\", selector);\n        if (!(source instanceof _index2.default.Expressions.EntitySetExpression) && !(source instanceof _index2.default.Expressions.ServiceOperationExpression)) {\n            _index.Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\n        }\n\n        this.source = source;\n        this.selector = selector;\n\n        this.entityType = this.source.elementType;\n        this.storageModel = this.source.storageModel;\n\n        _index.Guard.requireValue(\"entityType\", this.entityType);\n        _index.Guard.requireValue(\"storageModel\", this.storageModel);\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.entityType.getMemberDefinition(name);\n        if (!memdef) {\n            _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],62:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpressionVisitor', null, null, {\n\n    constructor: function constructor() {\n        this.lambdaTypes = [];\n    },\n\n    canVisit: function canVisit(expression) {\n        return expression instanceof _index2.default.Expressions.ExpressionNode;\n    },\n\n    Visit: function Visit(expression, context) {\n        if (!this.canVisit(expression)) return expression;\n\n        var visitorName = \"Visit\" + expression.getType().name;\n        if (visitorName in this) {\n            var fn = this[visitorName];\n            var result = fn.call(this, expression, context);\n            if (typeof result === 'undefined') {\n                return expression;\n            }\n            return result;\n        }\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\n        return expression;\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createToArrayExpression(source);\n        }\n        return expression;\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createForEachExpression(source);\n        }\n        return expression;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        return expression;\n    },\n\n    VisitSingleExpression: function VisitSingleExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSingleExpression(source);\n        return expression;\n    },\n\n    VisitFirstExpression: function VisitFirstExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFirstExpression(source);\n        return expression;\n    },\n\n    VisitSomeExpression: function VisitSomeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSomeExpression(source);\n        return expression;\n    },\n\n    VisitFindExpression: function VisitFindExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFindExpression(source);\n        return expression;\n    },\n\n    VisitEveryExpression: function VisitEveryExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createEveryExpression(source);\n        return expression;\n    },\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createCountExpression(source);\n        return expression;\n    },\n\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createBatchDeleteExpression(source);\n        }\n        return expression;\n    },\n\n    VisitBatchExecuteQueryExpression: function VisitBatchExecuteQueryExpression(expression, context) {\n        var newQueries = expression.members.map(function (expr) {\n            return this.Visit(expr, context);\n        }, this);\n\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newQueries[i];\n        }\n        if (!equal) {\n            return _index.Container.createBatchExecuteQueryExpression(newQueries);\n        }\n\n        return expression;\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        var newValues = expression.members.map(function (ofe) {\n            return this.Visit(ofe, context);\n        }, this);\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newValues[i];\n        }\n        if (!equal) {\n            return _index.Container.createObjectLiteralExpression(newValues);\n        }\n        return expression;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n        var newExpression = this.Visit(expression.expression, context);\n        if (expression.expression !== newExpression) {\n            return _index.Container.createObjectFieldExpression(expression.fieldName, newExpression);\n        }\n        return expression;\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var newExpression = this.Visit(expression.source, context);\n        if (newExpression !== expression.source) {\n            return _index.Container.createIncludeExpression(newExpression, expression.selector);\n        }\n        return expression;\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n\n        /// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\n        /// <param name=\"context\"></param>\n        var operand = this.Visit(expression.operand, context);\n        if (expression.operand !== operand) {\n            return _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\n        };\n        return expression;\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n        if (left !== expression.left || right !== expression.right) {\n            return new _index2.default.Expressions.SimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, expression.resolution);\n        }\n        return expression;\n    },\n\n    VisitEntityContextExpression: function VisitEntityContextExpression(expression, context) {\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\n        /// <param name=\"context\"></param>\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\n        return expression;\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createComplexTypeExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityFieldExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var operation = this.Visit(expression.operation, context);\n        var parameters = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createEntityFieldOperationExpression(source, operation, parameters);\n        return result;\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        var exp = this.Visit(expression.expression, context);\n        var args = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createParametricQueryExpression(exp, args);\n        return result;\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var amount = this.Visit(expression.amount, context);\n        if (source !== expression.source || amount !== expression.amount) {\n            return _index.Container.createPagingExpression(source, amount, expression.nodeType);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],63:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\n        this.selector = selector;\n        this.source = source;\n\n        if (this.selector instanceof _index2.default.Expressions.MemberInfoExpression || this.selector.name) {\n            this.memberName = this.selector.name;\n        }\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityField }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],64:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFieldOperation }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],65:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntitySetExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, instance) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression, _index2.default.Expressions.EntitySetExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression, _index2.default.Expressions.CodeExpression, _index2.default.Expressions.ParametricQueryExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\n        this.instance = instance;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        ///TODO!!!\n        this.storage_type = {};\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.MemberInfoExpression);\n                this.elementType = selector.memberDefinition.elementType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntityExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.AssociationInfoExpression);\n                this.elementType = selector.associationInfo.ToType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n                if (selector instanceof _index2.default.Expressions.AssociationInfoExpression) {\n                    this.elementType = selector.associationInfo.ToType, this.storageModel = c.instance._storageModel.getStorageModel(selector.associationInfo.ToType);\n                } else {\n                    this.elementType = this.source.elementType;\n                    this.storageModel = this.source.storageModel;\n                }\n                break;\n            case this.source instanceof _index2.default.Expressions.ServiceOperationExpression:\n                this.elementType = this.source.elementType; //?????????\n                this.storageModel = this.source.storageModel;\n                break;\n            default:\n                _index.Guard.raise(\"take and skip must be the last expressions in the chain!\");\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\n                break;\n        }\n\n        // suspicious code\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\n        //EntityTypeInfo\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.elementType.getMemberDefinition(name);\n        if (!memdef) {\n            _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntitySet, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],66:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionMonitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.Visit = function (expression, context) {\n\n            var result = expression;\n            var methodName;\n            if (this.canVisit(expression)) {\n\n                //if (monitorDefinition.FilterExpressionNode) {\n\n                //};\n\n                if (monitorDefinition.VisitExpressionNode) {\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\n                };\n\n                methodName = \"Visit\" + expression.getType().name;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\n                }\n            }\n\n            //apply is about 3-4 times faster then call on webkit\n\n            var args = arguments;\n            if (result !== expression) args = [result, context];\n            result = _index2.default.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\n\n            args = [result, context];\n\n            if (this.canVisit(result)) {\n                var expressionTypeName = result.getType().name;\n                if (monitorDefinition.MonitorExpressionNode) {\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Monitor\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n\n                if (monitorDefinition.MutateExpressionNode) {\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Mutate\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n            }\n            return result;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],67:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FilterExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Filter, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.InlineCountExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.InlineCount, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchExecuteQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FrameOperator', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor() {\n        this.isTerminated = true;\n    }\n});\n\n(0, _index.$C)('$data.Expressions.CountExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Count, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SingleExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Single, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FindExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source, params, subMember) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.params = params;\n        this.subMember = subMember;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Find, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FirstExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.First, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.ForEachExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ForEach, enumerable: true }\n});\n(0, _index.$C)('$data.Expressions.ToArrayExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ToArray, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SomeExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Some, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.EveryExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Every, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchDeleteExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchDelete, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],68:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FrameOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n            case this.source instanceof _index2.default.Expressions.FrameOperationExpression:\n                this.elementType = this.source.elementType;\n                this.storageModel = this.source.storageModel;\n                break;\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.FrameOperation }\n\n});\n\n(0, _index.$C)('$data.Expressions.EntityFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFunctionOperation }\n});\n\n(0, _index.$C)('$data.Expressions.ContextFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ContextFunctionOperation }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],69:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.IncludeExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Include, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],70:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.MemberInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n        this.memberName = memberDefinition.name;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.MemberInfo, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],71:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.OrderExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.source = source;\n        //this.selector = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.OrderBy, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],72:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParametricQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, parameters) {\n        this.expression = expression;\n        this.parameters = parameters || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ParametricQuery, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],73:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ProjectionExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector, params, instance) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Projection, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],74:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryExpressionCreator', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        _index.Guard.requireValue(\"scopeContext\", scopeContext);\n        this.scopeContext = scopeContext;\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\n        var source = expression.source.toString();\n        var jsCodeTree = _index.Container.createCodeParser(this.scopeContext).createExpression(source);\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\n\n        //TODO rename classes to reflex variable names\n        //TODO engage localValueResolver here\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\n        var constantResolver = _index.Container.createConstantValueResolver(expression.parameters, _index2.default.__global, this.scopeContext);\n        var parameterProcessor = _index.Container.createParameterResolverVisitor();\n\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\n\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\n        var code2entity = _index.Container.createCodeToEntityConverter(this.scopeContext);\n\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\n        var entityExpression = code2entity.Visit(jsCodeTree, { queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\n\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\n        var result = _index.Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\n\n        return result;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createIncludeExpression(source, selector);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],75:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, index, value, type) {\n        this.name = name;\n        this.index = index;\n        this.value = value;\n        //TODO\n        this.type = _index.Container.getTypeName(value);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.QueryParameter, writable: false }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],76:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.RepresentationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(kind) {},\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],77:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ServiceOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, cfg, boundItem) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///<param name=\"params\" type=\"$data.Array\" />\n        ///<param name=\"cfg\" type=\"$data.Object\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        this.cfg = cfg;\n        this.boundItem = boundItem;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                this.elementType = cfg.elementType ? _index.Container.resolveType(cfg.elementType) : this.elementType ? _index.Container.resolveType(cfg.returnType) : null;\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(_index.Container.resolveType(cfg.elementType)) : null;\n                break;\n            default:\n                _index.Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ServiceOperation, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],78:[function(require,module,exports){\n'use strict';\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpressionBuilder', null, null, {\n    constructor: function constructor(context) {\n        this.context = context;\n    },\n    _isLambdaParam: function _isLambdaParam(name) {\n        var p = this.context.lambdaParams;\n        for (var i = 0; i < p.length; i++) {\n            if (p[i] == name) return true;\n        }\n        return false;\n    },\n    _isParam: function _isParam(name) {\n        return this.context.paramContext[name] != undefined;\n    },\n    _isParamRoot: function _isParamRoot(name) {\n        return this.context.paramsName == name;\n    },\n    Build: function Build(node, expNode) {\n        var n;\n        switch (node.arity) {\n            case \"infix\":\n                if (\"(\" == node.value) n = this.BuildMethodCall(node, expNode);else if (\".\" == node.value) n = this.BuildMember(node, expNode);else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0) n = this.BuildEquality(node, expNode);else if ([\"&&\", \"||\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if (\"[\" == node.value) n = this.BuildArrayAccess(node, expNode);else _index.Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\n                break;\n            case \"prefix\":\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0) n = this.BuildUnary(node, expNode);else if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else if (\"{\" == node.value /* && \"object\" == node.type*/) //TODO: check the second condition necessity\n                    n = this.BuildNewExpression(node, expNode);else _index.Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\n                break;\n            case \"suffix\":\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else _index.Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\n                break;\n            case \"string\":\n            case \"number\":\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\n                break;\n            case \"ternary\":\n                if (node.value == \"?\") n = this.BuildDecision(node, expNode);else _index.Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\n                break;\n            case null:\n            case undefined:\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\")) n = this.BuildBoolLiteral(node, expNode);else n = this.BuildVariable(node, expNode);\n                break;\n            default:\n                _index.Guard.raise(\"Arity isn't implemented: \" + node.arity);\n        }\n        return n;\n    },\n    BuildNewExpression: function BuildNewExpression(node, expNode) {\n        var newExpression = _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\n        var n = node.first;\n        for (var i = 0; i < n.length; i++) {\n            newExpression.values.push(this.Build(n[i], newExpression));\n        }return newExpression;\n    },\n    BuildLiteral: function BuildLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n    },\n    BuildBoolLiteral: function BuildBoolLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\n    },\n    BuildVariable: function BuildVariable(node, expNode) {\n        if (!node.first) {\n            if (expNode.type == MEMBERACCESS) {\n                var subType;\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else subType = \"PROPERTY\";\n            } else {\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else if (_index2.default.__global[node.value] != undefined) subType = \"GLOBALOBJECT\";else _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\", \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value }));\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\n        }\n\n        var left = _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\n\n        var jsonAssign = _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\n        var right = this.Build(node.first, jsonAssign);\n        //left.parent = jsonAssign;\n        jsonAssign.left = left;\n        jsonAssign.right = right;\n\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n\n        return jsonAssign;\n    },\n    BuildMember: function BuildMember(node, expNode) {\n        if (node.value != \".\" || node.arity != \"infix\") {\n            if (node.type == \"string\") {\n                //TODO: more types?\n                return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\n        }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\n        var expression = this.Build(node.first, result);\n        var member = this.Build(node.second, result);\n        result.expression = expression;\n        result.member = member;\n        return result;\n    },\n    BuildUnary: function BuildUnary(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildIncDec: function BuildIncDec(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildBinary: function BuildBinary(node, expNode) {\n        if (!node.first) _index.Guard.raise(\"Cannot build binary: node.first is null\");\n        if (!node.second) _index.Guard.raise(\"Cannot build binary: node.second is null\");\n        var result = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildEquality: function BuildEquality(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildDecision: function BuildDecision(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\n        result.expression = this.Build(node.first, result);\n        result.left = this.Build(node.second, result);\n        result.right = this.Build(node.third, result);\n        return result;\n    },\n    BuildMethodCall: function BuildMethodCall(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\n        if (node.first.type == \"function\") {\n            //-- object's function\n            result.object = this.Build(node.first.first, result);\n            result.method = node.first.second.value;\n        } else {\n            //-- global function\n            if (node.first.type != null) _index.Guard.raise(\"Cannot build MethodCall because type is \" + type);\n            result.object = null;\n            result.method = node.first.value;\n        }\n        var argNodes = node.second;\n        var args = [];\n        for (var i = 0; i < argNodes.length; i++) {\n            var arg = argNodes[i];\n            args[i] = this.Build(arg, result);\n        }\n        result.args = args;\n        return result;\n    },\n    BuildArrayAccess: function BuildArrayAccess(node, expNode) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\n        result.array = this.Build(node.first, result);\n        result.index = this.Build(node.second, result);\n        return result;\n    }\n}, null);\n\n},{\"../../TypeSystem/index.js\":31}],79:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO: Finish refactoring ExpressionNode.js\n\n_index2.default.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\n    MemberAccess: \"memberAccess\", // { type:MEMBERACCESS, executable:true, expression:, member: }\n    Call: \"call\",\n\n    /* binary operators */\n    Equal: \"equal\",\n    NotEqual: \"notEqual\",\n    EqualTyped: \"equalTyped\",\n    NotEqualTyped: \"notEqualTyped\",\n    GreaterThen: \"greaterThan\",\n    LessThen: \"lessThan\",\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\n    LessThenOrEqual: \"lessThenOrEqual\",\n    Or: \"or\",\n    OrBitwise: \"orBitwise\",\n    And: \"and\",\n    AndBitwise: \"andBitwise\",\n\n    In: \"in\",\n\n    Add: \"add\",\n    Divide: \"divide\",\n    Multiply: \"multiply\",\n    Subtract: \"subtract\",\n    Modulo: \"modulo\",\n    ArrayIndex: \"arrayIndex\",\n\n    /* unary operators */\n    New: \"new\",\n    Positive: \"positive\",\n    Negative: \"negative\",\n    Increment: \"increment\",\n    Decrement: \"decrement\",\n    Not: \"not\",\n\n    This: \"this\",\n    LambdaParameterReference: \"lambdaParameterReference\",\n    LambdaParameter: \"lambdaParameter\",\n    ParameterReference: \"parameterReference\",\n    Parameter: \"parameter\",\n\n    ArrayLiteral: \"arrayLiteral\",\n    ObjectLiteral: \"objectLiteral\",\n    ObjectField: \"objectField\",\n    Function: \"Function\",\n    Unknown: \"UNKNOWN\",\n\n    EntitySet: \"EntitySet\",\n    ServiceOperation: \"ServiceOperation\",\n    EntityField: \"EntityField\",\n    EntityContext: \"EntityContext\",\n    Entity: \"Entity\",\n    Filter: \"Filter\",\n    First: \"First\",\n    Count: \"Count\",\n    InlineCount: \"InlineCount\",\n    BatchExecuteQuery: \"BatchExecuteQuery\",\n    Single: \"Single\",\n    Find: \"Find\",\n    Some: \"Some\",\n    Every: \"Every\",\n    ToArray: \"ToArray\",\n    BatchDelete: \"BatchDelete\",\n    ForEach: \"ForEach\",\n    Projection: \"Projection\",\n    EntityMember: \"EntityMember\",\n    EntityFieldOperation: \"EntityFieldOperation\",\n    FrameOperation: \"FrameOperation\",\n    EntityFunctionOperation: \"EntityFunctionOperation\",\n    ContextFunctionOperation: \"ContextFunctionOperation\",\n    EntityBinary: \"EntityBinary\",\n    Code: \"Code\",\n    ParametricQuery: \"ParametricQuery\",\n    MemberInfo: \"MemberInfo\",\n    QueryParameter: \"QueryParameter\",\n    ComplexEntityField: \"ComplexEntityField\",\n\n    Take: \"Take\",\n    Skip: \"Skip\",\n    OrderBy: \"OrderBy\",\n    OrderByDescending: \"OrderByDescending\",\n    Include: \"Include\",\n\n    IndexedPhysicalAnd: \"IndexedDBPhysicalAndFilterExpression\",\n    IndexedLogicalAnd: \"IndexedDBLogicalAndFilterExpression\",\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\n});\n\n_index2.default.BinaryOperator = function () {\n    ///<field name=\"operator\" type=\"string\" />\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\n    ///<field name=\"type\" type=\"string\" />\n};\n\n_index2.default.binaryOperators = [{ operator: \"==\", expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n        return a == b;\n    } }, { operator: \"===\", expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a === b;\n    } }, { operator: \"!=\", expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a != b;\n    } }, { operator: \"!==\", expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a !== b;\n    } }, { operator: \">\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a > b;\n    } }, { operator: \">=\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a >= b;\n    } }, { operator: \"<=\", expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a <= b;\n    } }, { operator: \"<\", expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a < b;\n    } }, { operator: \"&&\", expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n        return a && b;\n    } }, { operator: \"||\", expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n        return a || b;\n    } }, { operator: \"&\", expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a & b;\n    } }, { operator: \"|\", expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a | b;\n    } }, { operator: \"+\", expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n        return a + b;\n    } }, { operator: \"-\", expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n        return a - b;\n    } }, { operator: \"/\", expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n        return a / b;\n    } }, { operator: \"%\", expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n        return a % b;\n    } }, { operator: \"*\", expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n        return a * b;\n    } }, { operator: \"[\", expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n        return a[b];\n    } }, { operator: \"in\", expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n        return a in b;\n    } }];\n\n_index2.default.binaryOperators.resolve = function (operator) {\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.binaryOperators.contains = function (operator) {\n    return _index2.default.binaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.binaryOperators.getOperator = function (operator) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.unaryOperators = [{ operator: \"+\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n        return +operand;\n    } }, { operator: \"-\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n        return -operand;\n    } }, { operator: \"++\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return ++operand;\n    } }, { operator: \"--\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return --operand;\n    } }, { operator: \"++\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return operand++;\n    } }, { operator: \"!\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n        return !operand;\n    } }, { operator: \"--\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return operand--;\n    } }\n\n//{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\n];\n\n_index2.default.unaryOperators.resolve = function (operator) {\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.unaryOperators.contains = function (operator) {\n    return _index2.default.unaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.unaryOperators.getOperator = function (operator, arity) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator && (!arity || item.arity == arity);\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.timeIt = function (fn, iterations) {\n    iterations = iterations || 1;\n\n    console.time(\"!\");\n    for (var i = 0; i < iterations; i++) {\n        fn();\n    }\n    console.timeEnd(\"!\");\n};\n\n_index2.default.Expressions.OperatorTypes = {\n    UNARY: \"UNARY\", // { type:UNARY, executable:true, operator:, operand: }\n    INCDEC: \"INCDEC\", // { type:INCDEC, executable:true, operator:, operand:, suffix: }\n    DECISION: \"DECISION\", // { type:DECISION, executable:true, expression:, left:, right: }\n    METHODCALL: \"METHODCALL\", // { type:METHODCALL, executable:true, object:, method:, args: }\n    NEW: \"NEW\", // { type:NEW, executable:true, values: [] };\n    JSONASSIGN: \"JSONASSIGN\", // { type:JSONASSIGN, executable:true, left:, right: }\n    ARRAYACCESS: \"ARRAYACCESS\", // { type:ARRAYACCESS, executable:true, array:, index: }\n    UNKNOWN: \"UNKNOWN\"\n};\n\n_index2.default.executable = true;\n\nfunction jsonify(obj) {\n    return JSON.stringify(obj, null, \"\\t\");\n}\n\n(0, _index.$C)('$data.Expressions.ExpressionNode', null, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for all Expressions.</summary>\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\n        ///</field>\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.type = type;\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\n        ///TODO\n        this.expressionType = this.constructor;\n    },\n    toJSON: function toJSON() {\n        var res = JSON.parse(JSON.stringify(this));\n        res.expressionType = _index.Container.resolveName(this._expressionType);\n        return res;\n    },\n    getJSON: function getJSON() {\n        return jsonify(this);\n    },\n\n    //TOBLOG maybe\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n                          if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n              this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\n    expressionType: {\n        set: function set(value) {\n            if (typeof value === 'string') {\n                value = _index.Container.resolveType(value);\n            }\n            this._expressionType = value;\n        },\n        get: function get(value) {\n            //IE ommits listing JSON.stringify in call chain\n\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\n            //     return Container.resolveName(this._expressionType);\n            // }\n            return this._expressionType;\n        },\n        enumerable: true\n    },\n    ///toString: function () { },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: false },\n\n    type: {},\n\n    isTerminated: { value: false },\n\n    toString: function toString() {\n        return this.value;\n    }\n}, null);\n\n(0, _index.$C)('$data.Expressions.UnaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(operand, operator, nodeType, resolution) {\n        /// <summary>\n        /// Represents an operation with only one operand and an operator\n        /// </summary>\n        /// <param name=\"operand\"></param>\n        /// <param name=\"operator\"></param>\n        /// <param name=\"nodeType\"></param>\n        /// <param name=\"resolution\"></param>\n        this.operand = operand;\n        this.operator = operator;\n        this.nodeType = nodeType;\n        this.resolution = resolution;\n    },\n\n    operator: { value: undefined, writable: true },\n    operand: { value: undefined, writable: true },\n    nodeType: { value: undefined, writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],80:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FunctionExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, parameters, body) {\n        ///<signature>\n        ///<summary>Represents a function declaration.</summary>\n        ///<param name=\"name\" type=\"String\">Function name</param>\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\n        ///</signature>\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\n\n        this.parameters = parameters || [];\n        this.name = name;\n        this.body = body;\n    },\n\n    toString: function toString(debug) {\n        var paramStrings = this.parameters.map(function (p) {\n            return p.toString();\n        });\n        paramStrings = paramStrings.join(\",\");\n        var bodyString = this.body ? this.body.toString(debug) : '';\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Function, writable: true },\n    parameters: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ParameterExpression },\n    body: { value: undefined, dataType: _index2.default.Expressions.ExpressionNode },\n    type: {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],81:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(fieldName, expression) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.fieldName = fieldName;\n        this.expression = expression;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectField, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],82:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectLiteral, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    },\n\n    implementation: {\n        get: function get() {\n            return function (namesAndValues) {\n                var result = {};\n                namesAndValues.forEach(function (item) {\n                    result[item.name] = item.value;\n                });\n                return result;\n            };\n        },\n        set: function set() {}\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],83:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PagingExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.source = source;\n        this.amount = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],84:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, type, nodeType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.writePropertyValue(\"name\", name);\n        //this.writePropertyValue(\"type\", type);\n        this.nodeType = nodeType || _index2.default.Expressions.ExpressionType.Parameter;\n        this.name = name;\n        this.type = type || \"unknown\";\n        var _owningFunction;\n    },\n\n    owningFunction: { value: undefined, enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Parameter, writable: true },\n    name: { value: undefined, dataType: String, writable: true },\n    type: { value: undefined, dataType: \"object\", writable: true },\n    toString: function toString(debug) {\n        var result;\n        result = debug ? this.type + \" \" : \"\";\n        result = result + this.name;\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],85:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PropertyExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member) {\n        ///<summary>Represents accessing a property or field of an object</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\n\n        this.expression = expression;\n        this.member = member;\n\n        this.type = member.dataType;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.MemberAccess\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (holder, memberName) {\n                if (holder[memberName] === undefined) _index.Guard.raise(new _index.Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\n                return holder[memberName];\n            };\n        },\n        set: function set() {}\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    toString: function toString(debug) {\n        return this.expression.toString() + \".\" + this.member.toString();\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],86:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.SimpleBinaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(left, right, nodeType, operator, type, resolution) {\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\n        ///<field name=\"implementation\" type=\"function\" />\n        this.left = left;\n        this.right = right;\n        this.nodeType = nodeType;\n        this.operator = operator;\n        this.type = type;\n        this.resolution = resolution;\n    },\n\n    implementation: {\n        get: function get() {\n            return _index2.default.binaryOperators.getOperator(this.operator).implementation;\n        },\n        set: function set() {}\n\n    },\n    //nodeType: { value: $data.Expressions.ExpressionType },\n    type: { value: \"number\", writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],87:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ThisExpression', _index2.default.Expressions.ExpressionNode, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.This }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],88:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExecutorVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    //--\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var value = eNode.name == context.paramsName ? context.paramContext : _index2.default.__global[eNode.name];\n        if (typeof value == 'undefined') _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\", \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name }));\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var chain = this.GetMemberChain(eNode);\n        var value;\n        for (var i = 0; i < chain.length; i++) {\n            if (i == 0) value = context.paramContext;else value = value[chain[i].name];\n        }\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var operandValue = operand.valueType == \"string\" ? \"'\" + operand.value + \"'\" : operand.value;\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        if (eNode.suffix) value = eNode.operator == \"++\" ? operand.value++ : operand.value--;else value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value = expression.value ? left.value : right.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object !== eNode.object || args != eNode.args) eNode = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var a = [];\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            var t = _typeof(arg.value);\n            a.push(t == \"string\" ? \"'\" + arg.value + \"'\" : arg.value);\n        }\n        var value;\n        var src = object ? \"value = object.value[eNode.method](\" + a.join(\",\") + \");\" : \"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var arrayNode = this.Visit(eNode.array, context);\n        var indexNode = this.Visit(eNode.index, context);\n        var value = arrayNode.value[indexNode.value];\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],89:[function(require,module,exports){\n'use strict';\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpTreeVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        this._deep = this._deep + 1;\n        var result = null;\n        switch (eNode.type) {\n            case LITERAL:\n                result = this.VisitLiteral(eNode, context);break;\n            case VARIABLE:\n                result = this.VisitVariable(eNode, context);break;\n            case MEMBERACCESS:\n                result = this.VisitMember(eNode, context);break;\n            case BINARY:\n                result = this.VisitBinary(eNode, context);break;\n            case UNARY:\n                result = this.VisitUnary(eNode, context);break;\n            case INCDEC:\n                result = this.VisitIncDec(eNode, context);break;\n            case EQUALITY:\n                result = this.VisitEquality(eNode, context);break;\n            case DECISION:\n                result = this.VisitDecision(eNode, context);break;\n            case METHODCALL:\n                result = this.VisitMethodCall(eNode, context);break;\n            case NEW:\n                result = this.VisitNew(eNode, context);break;\n            case JSONASSIGN:\n                result = this.VisitJsonAssign(eNode, context);break;\n            case ARRAYACCESS:\n                result = this.VisitArrayAccess(eNode, context);break;\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n        this._deep = this._deep - 1;\n        return result;\n    },\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\n},{\"../../../TypeSystem/index.js\":31}],90:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNode\"/>\n\n        //this._deep = this._deep + 1;\n        if (!eNode) {\n            return eNode;\n        }\n\n        var result = null;\n\n        switch (eNode.expressionType) {\n            case _index2.default.Expressions.ParameterExpression:\n                result = this.VisitParameter(eNode, context);\n                break;\n            case _index2.default.Expressions.ConstantExpression:\n                result = this.VisitConstant(eNode, context);\n                break;\n            case _index2.default.Expressions.FunctionExpression:\n                result = this.VisitFunction(eNode, context);\n                break;\n            case _index2.default.Expressions.CallExpression:\n                result = this.VisitCall(eNode, context);\n                break;\n            case _index2.default.Expressions.SimpleBinaryExpression:\n                result = this.VisitBinary(eNode, context);\n                break;\n            case _index2.default.Expressions.PropertyExpression:\n                result = this.VisitProperty(eNode, context);\n                break;\n            //result = th\n            case _index2.default.Expressions.ThisExpression:\n                if (_index2.default.defaults.parameterResolutionCompatibility) {\n                    result = this.VisitThis(eNode, context);\n                } else {\n                    _index.Guard.raise(\"Keyword 'this' is not allowed. You should get value from parameter. (it, p1) => it.Title == p1\");\n                }\n                break;\n            case _index2.default.Expressions.ObjectLiteralExpression:\n                result = this.VisitObjectLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.ObjectFieldExpression:\n                result = this.VisitObjectField(eNode, context);\n                break;\n            case _index2.default.Expressions.ArrayLiteralExpression:\n                result = this.VisitArrayLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.UnaryExpression:\n                result = this.VisitUnary(eNode, context);\n                break;\n            case _index2.default.Expressions.EntityContextExpression:\n                result = this.VisitEntityContext(eNode, context);\n                break;\n            default:\n                debugger;\n                break;\n            //case VARIABLE:\n\n            //    result = this.VisitVariable(eNode, context);\n            //    break;\n            //case MEMBERACCESS:\n            //    result = this.VisitMember(eNode, context);\n            //    break;\n            //case BINARY:\n            //    result = this.VisitBinary(eNode, context);\n            //    break;\n            //case UNARY:\n            //    result = this.VisitUnary(eNode, context);\n            //    break;\n            //case INCDEC:\n            //    result = this.VisitIncDec(eNode, context);\n            //    break;\n            //case EQUALITY: result = this.VisitEquality(eNode, context); break;\n            //case DECISION: result = this.VisitDecision(eNode, context); break;\n            //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\n            //case NEW: result = this.VisitNew(eNode, context); break;\n            //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\n            //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\n            //default:\n            //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n\n        this._deep = this._deep - 1;\n        return result;\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var result = _index.Container.createArrayLiteralExpression(items);\n        return result;\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var self = this;\n        var members = eNode.members.map(function (member) {\n            return self.Visit(member, context);\n        });\n        var result = _index.Container.createObjectLiteralExpression(members);\n        return result;\n    },\n\n    VisitObjectField: function VisitObjectField(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var result = _index.Container.createObjectFieldExpression(eNode.fieldName, expression);\n        return result;\n    },\n\n    VisitThis: function VisitThis(eNode, context) {\n        return eNode;\n    },\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        var self = this;\n        var args = eNode.args.map(function (arg) {\n            return this.Visit(arg, context);\n        }, this);\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    },\n\n    VisitParameter: function VisitParameter(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n        var self = this;\n\n        var params = eNode.parameters.map(function (p, i) {\n            return self.Visit(p, context);\n        });\n\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        return new _index2.default.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.PropertyExpression(expression, member);\n        //var member =\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<returns type=\"$data.Expressions.UnaryExpression\"/>\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return new _index2.default.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitEntityContext: function VisitEntityContext(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.EntityContextExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],91:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.GlobalContextProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(global) {\n        ///<param name=\"global\" type=\"object\" />\n        this.global = global;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        return (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter || _index2.default.defaults.parameterResolutionCompatibility && paramExpression.nodeType == _index2.default.Expressions.ExpressionType.ParameterReference) && this.global && _typeof(this.global) === 'object' && paramExpression.name in this.global;\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        var resultValue = this.global[paramExpression.name];\n        var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === 'undefined' ? 'undefined' : _typeof(resultValue), paramExpression.name);\n        return expression;\n    }\n\n});\n\n(0, _index.$C)(\"$data.Expressions.ConstantValueResolver\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(paramsObject, global, scopeContext) {\n        ///<param name=\"global\" type=\"object\" />\n        this.globalResolver = _index.Container.createGlobalContextProcessor(global);\n        this.paramResolver = _index.Container.createGlobalContextProcessor(paramsObject);\n        this.paramsObject = paramsObject;\n        this.scopeContext = scopeContext;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        if (_index2.default.defaults.parameterResolutionCompatibility) {\n            return paramExpression.name === '$context' || paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This && this.paramsObject ? true : this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression);\n        }\n        return paramExpression.name === '$context' ? true : this.paramResolver.canResolve(paramExpression);\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        if (paramExpression.name === '$context') {\n            return _index.Container.createEntityContextExpression(this.scopeContext);\n        }\n        if (_index2.default.defaults.parameterResolutionCompatibility) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This) {\n                return _index.Container.createConstantExpression(this.paramsObject, _typeof(this.paramsObject), 'this');\n            }\n            return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\n        }\n        return this.paramResolver.resolve(paramExpression);\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],92:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LambdaParameterProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(lambdaParameterTypeInfos) {\n        ///<param name=\"global\" />\n        ///<param name=\"evalMethod\" />\n        var paramIndices = {};\n        var $idx = \"name\";\n\n        this.canResolve = function (paramExpression, context) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.LambdaParameter) {\n                var fnParams = paramExpression.owningFunction.parameters;\n\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\n                    return true;\n                }\n\n                for (var j = 0; j < fnParams.length; j++) {\n                    if (fnParams[j].name == paramExpression.name) {\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return false;\n        };\n\n        this.resolve = function (paramExpression, context) {\n            var lambdaParamType = paramIndices[paramExpression.name];\n            var result = _index.Container.createParameterExpression(paramExpression.name, lambdaParamType, _index2.default.Expressions.ExpressionType.LambdaParameter);\n            result.owningFunction = paramExpression.owningFunction;\n            return result;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],93:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LocalContextProcessor\", _index2.default.Expressions.GlobalContextProcessor, null, {\n    constructor: function constructor(evalMethod) {\n        ///<param name=\"global\" type=\"object\" />\n        this.canResolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            return paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter && evalMethod(\"typeof \" + paramExpression.name) !== 'undefined';\n        };\n        this.resolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\n            var resultValue = evalMethod(paramExpression.name);\n            var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === \"undefined\" ? \"undefined\" : _typeof(resultValue));\n            return expression;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],94:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\"use strict\"; // suspicious code\n\n(0, _index.$C)('$data.Expressions.LogicalSchemaBinderVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(expression, binder) {},\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        var exp = this.Visit(expression.expression, context);\n        var mem = this.Visit(expression.member, context);\n\n        var type = exp.type;\n        var memberType = context.memberResolver.resolve(type, mem.value);\n        mem.type = memberType;\n        return _index.Container.createPropertyExpression(exp, mem);\n    }\n\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],95:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.ParameterProcessor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\n    },\n\n    Visit: function Visit(node, context) {\n        if ((node instanceof _index2.default.Expressions.ParameterExpression || node instanceof _index2.default.Expressions.ThisExpression) && this.canResolve(node)) {\n            var result = this.resolve(node, context);\n            if (result !== node) result[\"resolvedBy\"] = this.constructor.name;\n            return result;\n        } else {\n            return node;\n        }\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<returns type=\"boolean\" />\n        _index.Guard.raise(\"Pure method\");\n    },\n    resolve: function resolve(paramExpression) {\n        ///<returns type=\"XXX\" />\n        _index.Guard.raise(\"Pure method\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],96:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterResolverVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n\n    constructor: function constructor(expression, resolver) {\n        /// <summary>\n        /// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\n        /// is transformed into a constant that has the current href as its value\n        /// </summary>\n        /// <param name=\"expression\"></param>\n        /// <param name=\"resolver\"></param>\n        this.lambdaParamCache = {};\n        this.paramCache = {};\n    },\n\n    Visit: function Visit(expression, resolver) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\n        //TODO base call is just ugly\n        return _index2.default.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = items.every(function (item) {\n            return item instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            items = items.map(function (item) {\n                return item.value;\n            });\n            return _index.Container.createConstantExpression(items, \"array\");\n        } else {\n            return _index.Container.createArrayLiteralExpression(items);\n        }\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        var self = this;\n        var members = eNode.members.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = members.every(function (member) {\n            return member.expression instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            var params = members.map(function (member) {\n                return { name: member.fieldName, value: member.expression.value };\n            });\n            var value = eNode.implementation(params);\n            return _index.Container.createConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        } else {\n            return _index.Container.createObjectLiteralExpression(members);\n        }\n    },\n\n    VisitThis: function VisitThis(eNode, resolver) {\n        return resolver.Visit(eNode, resolver);\n    },\n\n    VisitParameter: function VisitParameter(eNode, resolver) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n\n        var node;\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\n        switch (eNode.nodeType) {\n            case _index2.default.Expressions.ExpressionType.Parameter:\n                node = resolver.Visit(eNode, resolver);\n                this.paramCache[node.name] = node;\n                return node;\n            case _index2.default.Expressions.ExpressionType.ParameterReference:\n                if (_index2.default.defaults.parameterResolutionCompatibility) {\n                    return resolver.Visit(eNode, resolver);\n                }\n\n                var paramNode = this.paramCache[eNode.name];\n                if (paramNode) {\n                    return paramNode;\n                } else {\n                    _index.Guard.raise(\"Missing parameter '\" + eNode.name + \"'\");\n                }\n                break;\n            case _index2.default.Expressions.ExpressionType.LambdaParameter:\n                node = resolver.Visit(eNode, resolver);\n                this.lambdaParamCache[node.name] = node;\n                return node;\n            case _index2.default.Expressions.ExpressionType.LambdaParameterReference:\n                var lambdaParam = this.lambdaParamCache[eNode.name];\n                if (lambdaParam) {\n                    node = _index.Container.createParameterExpression(eNode.name, lambdaParam.type, _index2.default.Expressions.ExpressionType.LambdaParameterReference);\n                    node.paramIndex = eNode.paramIndex;\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\n                    return node;\n                }\n                break;\n            default:\n                return eNode;\n\n        }\n\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n\n        var self = this;\n        var params = eNode.parameters.map(function (p, i) {\n            var result = self.Visit(p, context);\n            return result;\n        });\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        var expr = _index2.default.Expressions;\n\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression) {\n            var result = eNode.implementation(left.value, right.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        //var imp = $data.unaryOperators.getOperator(\n        var expr = _index2.default.Expressions;\n        if (operand instanceof expr.ConstantExpression) {\n            var result = eNode.operator.implementation(operand.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        var result;\n        if (expression instanceof _index2.default.Expressions.ConstantExpression && member instanceof _index2.default.Expressions.ConstantExpression) {\n            ///TODO implement checking for the member, throw on error\n            result = eNode.implementation(expression.value, member.value);\n\n            //Method call processed before\n            //if (typeof result === 'function') {\n            //    return new $data.Expressions.ConstantExpression(\n            //        function () { return result.apply(expression.value, arguments); });\n            //}\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result), expression.name + '$' + member.value);\n        }\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n\n        result = _index.Container.createPropertyExpression(expression, member);\n        return result;\n    },\n\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        function isExecutable(args, body, obj) {\n            return body instanceof _index2.default.Expressions.ConstantExpression && (\n            //global methods will not have a this.\n            !obj || obj instanceof _index2.default.Expressions.ConstantExpression) && args.every(function (item) {\n                return item instanceof _index2.default.Expressions.ConstantExpression;\n            });\n        }\n        var call = _index2.default.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\n        var obj = call.expression;\n        var body = call.member;\n        var args = call.args;\n\n        function convertToValue(arg) {\n            if (arg instanceof _index2.default.Expressions.ConstantExpression) return arg.value;\n            return arg;\n        };\n\n        if (isExecutable(args, body, obj)) {\n            var fn = body.value;\n            if (typeof fn === 'string' && obj.value) {\n                fn = obj.value[fn];\n            }\n            if (typeof fn !== 'function') {\n                //TODO dig that name out from somewhere\n                _index.Guard.raise(\"Constant expression is not a method...\");\n            }\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\n            return new _index2.default.Expressions.ConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        }\n        return call;\n    }\n}, {});\n(0, _index.$C)(\"$data.Expressions.AggregatedVisitor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(visitors) {\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\n\n        this.Visit = function (node, context) {\n            for (var i = 0; i < visitors.length; i++) {\n                var n = visitors[i].Visit(node, context);\n                if (n !== node) return n;\n            }\n            return node;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],97:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.SetExecutableVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    Visit: function Visit(eNode, context) {\n        switch (eNode.type) {\n            case LITERAL:\n                return this.VisitLiteral(eNode, context);\n            case VARIABLE:\n                return this.VisitVariable(eNode, context);\n            case MEMBERACCESS:\n                return this.VisitMember(eNode, context);\n            case BINARY:\n                return this.VisitBinary(eNode, context);\n            case UNARY:\n                return this.VisitUnary(eNode, context);\n            case INCDEC:\n                return this.VisitIncDec(eNode, context);\n            case EQUALITY:\n                return this.VisitEquality(eNode, context);\n            case DECISION:\n                return this.VisitDecision(eNode, context);\n            case METHODCALL:\n                return this.VisitMethodCall(eNode, context);\n            case NEW:\n                return this.VisitNew(eNode, context);\n            case JSONASSIGN:\n                return this.VisitJsonAssign(eNode, context);\n            case ARRAYACCESS:\n                return this.VisitArrayAccess(eNode, context);\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && left.executable && right.executable && expression.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args && (object == null ? true : object.executable) == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        // { type:NEW, executable:true, values: [] };\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (_typeof(context.paramContext[eNode.name]) == undefined) // isn't param  //TODO: check ParamContext\n            _index.Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\n        //this._setExecutable(eNode, true);\n        return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        var chain = this.GetMemberChain(eNode);\n        var firstMember = chain[0].name;\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\n        if (!isLocalParam && !isLambdaParam) _index.Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":31}],98:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _ExpressionNode = require('./ExpressionNode2.js');\n\nvar _ExpressionNode2 = _interopRequireDefault(_ExpressionNode);\n\nvar _ArrayLiteralExpression = require('./ArrayLiteralExpression.js');\n\nvar _ArrayLiteralExpression2 = _interopRequireDefault(_ArrayLiteralExpression);\n\nvar _CallExpression = require('./CallExpression.js');\n\nvar _CallExpression2 = _interopRequireDefault(_CallExpression);\n\nvar _CodeParser = require('./CodeParser.js');\n\nvar _CodeParser2 = _interopRequireDefault(_CodeParser);\n\nvar _ConstantExpression = require('./ConstantExpression.js');\n\nvar _ConstantExpression2 = _interopRequireDefault(_ConstantExpression);\n\nvar _FunctionExpression = require('./FunctionExpression.js');\n\nvar _FunctionExpression2 = _interopRequireDefault(_FunctionExpression);\n\nvar _ObjectFieldExpression = require('./ObjectFieldExpression.js');\n\nvar _ObjectFieldExpression2 = _interopRequireDefault(_ObjectFieldExpression);\n\nvar _ObjectLiteralExpression = require('./ObjectLiteralExpression.js');\n\nvar _ObjectLiteralExpression2 = _interopRequireDefault(_ObjectLiteralExpression);\n\nvar _PagingExpression = require('./PagingExpression.js');\n\nvar _PagingExpression2 = _interopRequireDefault(_PagingExpression);\n\nvar _ParameterExpression = require('./ParameterExpression.js');\n\nvar _ParameterExpression2 = _interopRequireDefault(_ParameterExpression);\n\nvar _PropertyExpression = require('./PropertyExpression.js');\n\nvar _PropertyExpression2 = _interopRequireDefault(_PropertyExpression);\n\nvar _SimpleBinaryExpression = require('./SimpleBinaryExpression.js');\n\nvar _SimpleBinaryExpression2 = _interopRequireDefault(_SimpleBinaryExpression);\n\nvar _ThisExpression = require('./ThisExpression.js');\n\nvar _ThisExpression2 = _interopRequireDefault(_ThisExpression);\n\nvar _ExpressionVisitor = require('./Visitors/ExpressionVisitor.js');\n\nvar _ExpressionVisitor2 = _interopRequireDefault(_ExpressionVisitor);\n\nvar _ParameterProcessor = require('./Visitors/ParameterProcessor.js');\n\nvar _ParameterProcessor2 = _interopRequireDefault(_ParameterProcessor);\n\nvar _GlobalContextProcessor = require('./Visitors/GlobalContextProcessor.js');\n\nvar _GlobalContextProcessor2 = _interopRequireDefault(_GlobalContextProcessor);\n\nvar _LocalContextProcessor = require('./Visitors/LocalContextProcessor.js');\n\nvar _LocalContextProcessor2 = _interopRequireDefault(_LocalContextProcessor);\n\nvar _LambdaParameterProcessor = require('./Visitors/LambdaParameterProcessor.js');\n\nvar _LambdaParameterProcessor2 = _interopRequireDefault(_LambdaParameterProcessor);\n\nvar _ParameterResolverVisitor = require('./Visitors/ParameterResolverVisitor.js');\n\nvar _ParameterResolverVisitor2 = _interopRequireDefault(_ParameterResolverVisitor);\n\nvar _LogicalSchemaBinderVisitor = require('./Visitors/LogicalSchemaBinderVisitor.js');\n\nvar _LogicalSchemaBinderVisitor2 = _interopRequireDefault(_LogicalSchemaBinderVisitor);\n\nvar _ExpTreeVisitor = require('./Visitors/ExpTreeVisitor.js');\n\nvar _ExpTreeVisitor2 = _interopRequireDefault(_ExpTreeVisitor);\n\nvar _SetExecutableVisitor = require('./Visitors/SetExecutableVisitor.js');\n\nvar _SetExecutableVisitor2 = _interopRequireDefault(_SetExecutableVisitor);\n\nvar _ExecutorVisitor = require('./Visitors/ExecutorVisitor.js');\n\nvar _ExecutorVisitor2 = _interopRequireDefault(_ExecutorVisitor);\n\nvar _ExpressionBuilder = require('./ExpressionBuilder.js');\n\nvar _ExpressionBuilder2 = _interopRequireDefault(_ExpressionBuilder);\n\nvar _AssociationInfoExpression = require('./EntityExpressions/AssociationInfoExpression.js');\n\nvar _AssociationInfoExpression2 = _interopRequireDefault(_AssociationInfoExpression);\n\nvar _CodeExpression = require('./EntityExpressions/CodeExpression.js');\n\nvar _CodeExpression2 = _interopRequireDefault(_CodeExpression);\n\nvar _CodeToEntityConverter = require('./EntityExpressions/CodeToEntityConverter.js');\n\nvar _CodeToEntityConverter2 = _interopRequireDefault(_CodeToEntityConverter);\n\nvar _ComplexTypeExpression = require('./EntityExpressions/ComplexTypeExpression.js');\n\nvar _ComplexTypeExpression2 = _interopRequireDefault(_ComplexTypeExpression);\n\nvar _EntityContextExpression = require('./EntityExpressions/EntityContextExpression.js');\n\nvar _EntityContextExpression2 = _interopRequireDefault(_EntityContextExpression);\n\nvar _EntityExpression = require('./EntityExpressions/EntityExpression.js');\n\nvar _EntityExpression2 = _interopRequireDefault(_EntityExpression);\n\nvar _EntityExpressionVisitor = require('./EntityExpressions/EntityExpressionVisitor.js');\n\nvar _EntityExpressionVisitor2 = _interopRequireDefault(_EntityExpressionVisitor);\n\nvar _ExpressionMonitor = require('./EntityExpressions/ExpressionMonitor.js');\n\nvar _ExpressionMonitor2 = _interopRequireDefault(_ExpressionMonitor);\n\nvar _EntityFieldExpression = require('./EntityExpressions/EntityFieldExpression.js');\n\nvar _EntityFieldExpression2 = _interopRequireDefault(_EntityFieldExpression);\n\nvar _EntityFieldOperationExpression = require('./EntityExpressions/EntityFieldOperationExpression.js');\n\nvar _EntityFieldOperationExpression2 = _interopRequireDefault(_EntityFieldOperationExpression);\n\nvar _EntitySetExpression = require('./EntityExpressions/EntitySetExpression.js');\n\nvar _EntitySetExpression2 = _interopRequireDefault(_EntitySetExpression);\n\nvar _FrameOperationExpression = require('./EntityExpressions/FrameOperationExpression.js');\n\nvar _FrameOperationExpression2 = _interopRequireDefault(_FrameOperationExpression);\n\nvar _FilterExpression = require('./EntityExpressions/FilterExpression.js');\n\nvar _FilterExpression2 = _interopRequireDefault(_FilterExpression);\n\nvar _IncludeExpression = require('./EntityExpressions/IncludeExpression.js');\n\nvar _IncludeExpression2 = _interopRequireDefault(_IncludeExpression);\n\nvar _MemberInfoExpression = require('./EntityExpressions/MemberInfoExpression.js');\n\nvar _MemberInfoExpression2 = _interopRequireDefault(_MemberInfoExpression);\n\nvar _OrderExpression = require('./EntityExpressions/OrderExpression.js');\n\nvar _OrderExpression2 = _interopRequireDefault(_OrderExpression);\n\nvar _ParametricQueryExpression = require('./EntityExpressions/ParametricQueryExpression.js');\n\nvar _ParametricQueryExpression2 = _interopRequireDefault(_ParametricQueryExpression);\n\nvar _ProjectionExpression = require('./EntityExpressions/ProjectionExpression.js');\n\nvar _ProjectionExpression2 = _interopRequireDefault(_ProjectionExpression);\n\nvar _QueryExpressionCreator = require('./EntityExpressions/QueryExpressionCreator.js');\n\nvar _QueryExpressionCreator2 = _interopRequireDefault(_QueryExpressionCreator);\n\nvar _QueryParameterExpression = require('./EntityExpressions/QueryParameterExpression.js');\n\nvar _QueryParameterExpression2 = _interopRequireDefault(_QueryParameterExpression);\n\nvar _RepresentationExpression = require('./EntityExpressions/RepresentationExpression.js');\n\nvar _RepresentationExpression2 = _interopRequireDefault(_RepresentationExpression);\n\nvar _ServiceOperationExpression = require('./EntityExpressions/ServiceOperationExpression.js');\n\nvar _ServiceOperationExpression2 = _interopRequireDefault(_ServiceOperationExpression);\n\nvar _ContinuationExpressionBuilder = require('./ContinuationExpressionBuilder.js');\n\nvar _ContinuationExpressionBuilder2 = _interopRequireDefault(_ContinuationExpressionBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.defaults = _index2.default.defaults || {};\n_index2.default.defaults.parameterResolutionCompatibility = true;\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31,\"./ArrayLiteralExpression.js\":51,\"./CallExpression.js\":52,\"./CodeParser.js\":53,\"./ConstantExpression.js\":54,\"./ContinuationExpressionBuilder.js\":55,\"./EntityExpressions/AssociationInfoExpression.js\":56,\"./EntityExpressions/CodeExpression.js\":57,\"./EntityExpressions/CodeToEntityConverter.js\":58,\"./EntityExpressions/ComplexTypeExpression.js\":59,\"./EntityExpressions/EntityContextExpression.js\":60,\"./EntityExpressions/EntityExpression.js\":61,\"./EntityExpressions/EntityExpressionVisitor.js\":62,\"./EntityExpressions/EntityFieldExpression.js\":63,\"./EntityExpressions/EntityFieldOperationExpression.js\":64,\"./EntityExpressions/EntitySetExpression.js\":65,\"./EntityExpressions/ExpressionMonitor.js\":66,\"./EntityExpressions/FilterExpression.js\":67,\"./EntityExpressions/FrameOperationExpression.js\":68,\"./EntityExpressions/IncludeExpression.js\":69,\"./EntityExpressions/MemberInfoExpression.js\":70,\"./EntityExpressions/OrderExpression.js\":71,\"./EntityExpressions/ParametricQueryExpression.js\":72,\"./EntityExpressions/ProjectionExpression.js\":73,\"./EntityExpressions/QueryExpressionCreator.js\":74,\"./EntityExpressions/QueryParameterExpression.js\":75,\"./EntityExpressions/RepresentationExpression.js\":76,\"./EntityExpressions/ServiceOperationExpression.js\":77,\"./ExpressionBuilder.js\":78,\"./ExpressionNode2.js\":79,\"./FunctionExpression.js\":80,\"./ObjectFieldExpression.js\":81,\"./ObjectLiteralExpression.js\":82,\"./PagingExpression.js\":83,\"./ParameterExpression.js\":84,\"./PropertyExpression.js\":85,\"./SimpleBinaryExpression.js\":86,\"./ThisExpression.js\":87,\"./Visitors/ExecutorVisitor.js\":88,\"./Visitors/ExpTreeVisitor.js\":89,\"./Visitors/ExpressionVisitor.js\":90,\"./Visitors/GlobalContextProcessor.js\":91,\"./Visitors/LambdaParameterProcessor.js\":92,\"./Visitors/LocalContextProcessor.js\":93,\"./Visitors/LogicalSchemaBinderVisitor.js\":94,\"./Visitors/ParameterProcessor.js\":95,\"./Visitors/ParameterResolverVisitor.js\":96,\"./Visitors/SetExecutableVisitor.js\":97}],99:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ItemStoreClass', null, null, {\n    constructor: function constructor() {\n        var self = this;\n        self.itemStoreConfig = {\n            aliases: {},\n            contextTypes: {}\n        };\n\n        self.resetStoreToDefault('local', true);\n        _index2.default.addStore = function () {\n            return self.addItemStoreAlias.apply(self, arguments);\n        };\n        _index2.default.implementation = self.implementation;\n\n        _index2.default.Entity.addMember('storeToken', {\n            get: function get() {\n                if (this.storeConfigs && this.storeConfigs['default']) return this.storeConfigs.stores[this.storeConfigs['default']];\n            },\n            set: function set(value) {\n                self._setTypeStoreConfig(this, 'default', value);\n            }\n        }, true);\n    },\n    itemStoreConfig: {},\n    attachMode: _index2.default.EntityAttachMode ? _index2.default.EntityAttachMode.KeepChanges : true,\n\n    addItemStoreAlias: function addItemStoreAlias(name, contextFactoryOrToken, isDefault) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n\n        if ('string' === typeof name) {\n            //storeToken\n            if ('object' === (typeof contextFactoryOrToken === 'undefined' ? 'undefined' : _typeof(contextFactoryOrToken)) && 'factory' in contextFactoryOrToken) {\n                var type = _index.Container.resolveType(contextFactoryOrToken.typeName);\n\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\n                self.itemStoreConfig.contextTypes[name] = type;\n                if (isDefault) {\n                    self.itemStoreConfig['default'] = name;\n                }\n\n                callback.success();\n                return promise.getPromise();\n            }\n            //contextFactory\n            else if ('function' === typeof contextFactoryOrToken) {\n                    var preContext = contextFactoryOrToken();\n                    var contextPromise;\n                    if (preContext && preContext instanceof _index2.default.EntityContext) {\n                        callback.success(preContext);\n                        contextPromise = promise.getPromise();\n                    } else {\n                        contextPromise = preContext;\n                    }\n\n                    return contextPromise.then(function (ctx) {\n                        if (typeof ctx === 'function') {\n                            //factory resolve factory\n                            return self.addItemStoreAlias(name, ctx, isDefault);\n                        }\n\n                        if (ctx instanceof _index2.default.EntityContext) {\n                            return ctx.onReady().then(function (ctx) {\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\n                                if (isDefault) {\n                                    self.itemStoreConfig['default'] = name;\n                                }\n\n                                return ctx;\n                            });\n                        } else {\n                            promise = new _index2.default.PromiseHandler();\n                            callback = promise.createCallback();\n                            callback.error(new _index.Exception('factory dont have context instance', 'Invalid arguments'));\n                            return promise.getPromise();\n                        }\n                    });\n                }\n        }\n\n        callback.error(new _index.Exception('Name or factory missing', 'Invalid arguments'));\n        return promise.getPromise();\n    },\n    resetStoreToDefault: function resetStoreToDefault(name, isDefault) {\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\n        delete this.itemStoreConfig.contextTypes[name];\n        if (isDefault) {\n            this.itemStoreConfig['default'] = name;\n        }\n    },\n    _setStoreAlias: function _setStoreAlias(entity, storeToken) {\n        if ('object' === (typeof storeToken === 'undefined' ? 'undefined' : _typeof(storeToken)) && !entity.storeToken) entity.storeToken = storeToken;\n        return entity;\n    },\n    _getStoreAlias: function _getStoreAlias(entity, storeAlias) {\n        var type;\n        if (entity instanceof _index2.default.Entity) {\n            var alias = storeAlias || entity.storeToken;\n            if (alias) {\n                return alias;\n            } else {\n                type = entity.getType();\n            }\n        } else {\n            type = entity;\n        }\n\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\n    },\n    _getStoreContext: function _getStoreContext(aliasOrToken, type, nullIfInvalid) {\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\n\n        if (!contextPromise || contextPromise instanceof _index2.default.EntityContext) {\n            var promise = new _index2.default.PromiseHandler();\n            var callback = promise.createCallback();\n            callback.success(contextPromise);\n            contextPromise = promise.getPromise();\n        }\n\n        return contextPromise.then(function (context) {\n            if (context instanceof _index2.default.EntityContext) {\n                return context.onReady();\n            } else if (nullIfInvalid) {\n                return null;\n            } else {\n                var promise = new _index2.default.PromiseHandler();\n                var callback = promise.createCallback();\n                callback.error(new _index.Exception('factory return type error', 'Error'));\n                return promise.getPromise();\n            }\n        });\n    },\n    _getContextPromise: function _getContextPromise(aliasOrToken, type) {\n        /*Token*/\n        if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'function' === typeof aliasOrToken.factory) {\n            return aliasOrToken.factory(type);\n        } else if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'object' === _typeof(aliasOrToken.args) && 'string' === typeof aliasOrToken.typeName) {\n            var type = _index.Container.resolveType(aliasOrToken.typeName);\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\n        }\n        /*resolve alias from type (Token)*/\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\n                return type.storeConfigs.stores[aliasOrToken].factory();\n            }\n            /*resolve alias from type (constructor options)*/\n            else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\n                    return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\n                }\n                /*resolve alias from ItemStore (factories)*/\n                else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\n                        return this.itemStoreConfig.aliases[aliasOrToken](type);\n                    }\n                    /*token is factory*/\n                    else if (aliasOrToken && 'function' === typeof aliasOrToken) {\n                            return aliasOrToken();\n                        }\n                        /*default no hint*/\n                        else {\n                                return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\n                            }\n    },\n    _getStoreEntitySet: function _getStoreEntitySet(storeAlias, instanceOrType) {\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\n        var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();;\n\n        return this._getStoreContext(aliasOrToken, type).then(function (ctx) {\n            var entitySet = ctx.getEntitySetFromElementType(type);\n            if (!entitySet) {\n                var d = new _index2.default.PromiseHandler();\n                var callback = d.createCallback();\n                callback.error(\"EntitySet not exist for \" + type.fullName);\n                return d.getPromise();\n            }\n            return entitySet;\n        });\n    },\n    _getDefaultItemStoreFactory: function _getDefaultItemStoreFactory(instanceOrType, initStoreConfig) {\n        if (instanceOrType) {\n            var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();\n            var typeName = _index2.default.Container.resolveName(type) + \"_items\";\n            var typeName = typeName.replace(/\\./g, \"_\");\n\n            var storeConfig = _index2.default.typeSystem.extend({\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\n                tableName: typeName,\n                initParam: { provider: 'local', databaseName: typeName }\n            }, initStoreConfig);\n\n            var contextDef = {};\n            contextDef[storeConfig.collectionName] = { type: _index2.default.EntitySet, elementType: type };\n            if (storeConfig.tableName) contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\n\n            var inMemoryType = _index2.default.EntityContext.extend(typeName, contextDef);\n            var ctx = new inMemoryType(storeConfig.initParam);\n            if (initStoreConfig && (typeof initStoreConfig === 'undefined' ? 'undefined' : _typeof(initStoreConfig)) === 'object') initStoreConfig.factory = ctx._storeToken.factory;\n            return ctx;\n        }\n        return undefined;\n    },\n    implementation: function implementation(name, contextOrAlias) {\n        var self = _index2.default.ItemStore;\n        var result;\n\n        if (typeof contextOrAlias === 'string') {\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias];\n        } else if (contextOrAlias instanceof _index2.default.EntityContext) {\n            contextOrAlias = contextOrAlias.getType();\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\n        }\n\n        if (contextOrAlias) {\n            result = self._resolveFromContext(contextOrAlias, name);\n        }\n\n        if (!result) {\n            result = _index.Container.resolveType(name);\n        }\n\n        return result;\n    },\n    _resolveFromContext: function _resolveFromContext(contextType, name) {\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            var memDef = memDefs[i];\n            if (memDef.type) {\n                var memDefType = _index.Container.resolveType(memDef.type);\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(memDef.elementType);\n                    if (elementType.name === name) {\n                        return elementType;\n                    }\n                }\n            }\n        }\n        return null;\n    },\n\n    //Entity Instance\n    EntityInstanceSave: function EntityInstanceSave(storeAlias, hint, attachMode) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            return self._getSaveMode(entity, entitySet, hint, storeAlias).then(function (mode) {\n                mode = mode || 'add';\n                switch (mode) {\n                    case 'add':\n                        entitySet.add(entity);\n                        break;\n                    case 'attach':\n                        entitySet.attach(entity, attachMode || true);\n                        break;\n                    default:\n                        var d = new _index2.default.PromiseHandler();\n                        var callback = d.createCallback();\n                        callback.error('save mode not supported: ' + mode);\n                        return d.getPromise();\n                }\n\n                return entitySet.entityContext.saveChanges().then(function () {\n                    self._setStoreAlias(entity, entitySet.entityContext.storeToken);return entity;\n                });\n            });\n        });\n    },\n    EntityInstanceRemove: function EntityInstanceRemove(storeAlias) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            entitySet.remove(entity);\n\n            return entitySet.entityContext.saveChanges().then(function () {\n                return entity;\n            });\n        });\n    },\n    EntityInstanceRefresh: function EntityInstanceRefresh(storeAlias, keepStore) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        var entityType = entity.getType();\n\n        var key = self._getKeyObjectFromEntity(entity, entityType);\n\n        return entityType.read(key, storeAlias).then(function (loadedEntity) {\n            entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                entity[memDef.name] = loadedEntity[memDef.name];\n            });\n            entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\n            entity.changedProperties = undefined;\n            return entity;\n        });\n    },\n\n    //Entity Type\n    EntityInheritedTypeProcessor: function EntityInheritedTypeProcessor(type) {\n        var self = _index2.default.ItemStore;\n        type.readAll = self.EntityTypeReadAll(type);\n        type.read = self.EntityTypeRead(type);\n        type.removeAll = self.EntityTypeRemoveAll(type);\n        type.remove = self.EntityTypeRemove(type);\n        type.get = self.EntityTypeGet(type); //Not complete\n        type.save = self.EntityTypeSave(type);\n        type.addMany = self.EntityTypeAddMany(type);\n        type.itemCount = self.EntityTypeItemCount(type);\n        type.query = self.EntityTypeQuery(type);\n        type.takeFirst = self.EntityTypeTakeFirst(type);\n\n        type.setStore = self.EntityTypeSetStore(type);\n    },\n    EntityTypeReadAll: function EntityTypeReadAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeRemoveAll: function EntityTypeRemoveAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.toArray().then(function (items) {\n                    items.forEach(function (item) {\n                        entitySet.remove(item);\n                    });\n\n                    return entitySet.entityContext.saveChanges().then(function () {\n                        return items;\n                    });\n                });\n            });\n        };\n    },\n    EntityTypeRead: function EntityTypeRead(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                try {\n                    var singleParam = self._findByIdQueryable(entitySet, key);\n                    return entitySet.single(singleParam.predicate, singleParam.thisArgs).then(function (item) {\n                        return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                    });\n                } catch (e) {\n                    var d = new _index2.default.PromiseHandler();\n                    var callback = d.createCallback();\n                    callback.error(e);\n                    return d.getPromise();\n                }\n            });\n        };\n    },\n    EntityTypeGet: function EntityTypeGet(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var item = new type(self._getKeyObjectFromEntity(key));\n            item.refresh(storeAlias);\n            return item;\n        };\n    },\n    EntityTypeSave: function EntityTypeSave(type) {\n        return function (initData, storeAlias, hint) {\n\n            var self = _index2.default.ItemStore;\n            var instance = new type(initData);\n            return instance.save(storeAlias, hint);\n        };\n    },\n    EntityTypeAddMany: function EntityTypeAddMany(type) {\n        return function (initDatas, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                var items = entitySet.addMany(initDatas);\n                return entitySet.entityContext.saveChanges().then(function () {\n                    return items;\n                });\n            });\n        };\n    },\n    EntityTypeRemove: function EntityTypeRemove(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var entityPk = type.memberDefinitions.getKeyProperties();\n            var entity;\n            if (entityPk.length === 1) {\n                var obj = {};\n                obj[entityPk[0].name] = key;\n                entity = new type(obj);\n            } else {\n                entity = new type(key);\n            }\n            return entity.remove(storeAlias);\n        };\n    },\n    EntityTypeItemCount: function EntityTypeItemCount(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.length();\n            });\n        };\n    },\n    EntityTypeQuery: function EntityTypeQuery(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.filter(predicate, thisArg).forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeTakeFirst: function EntityTypeTakeFirst(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.first(predicate, thisArg).then(function (item) {\n                    return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n\n    EntityTypeSetStore: function EntityTypeSetStore(type) {\n        return function (name, config) {\n            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object' && typeof config === 'undefined') {\n                config = name;\n                name = 'default';\n            }\n\n            var self = _index2.default.ItemStore;\n\n            var defStoreConfig = {};\n            if (config) {\n                if (config.tableName) {\n                    defStoreConfig.tableName = config.tableName;\n                    delete config.tableName;\n                }\n\n                if (config.collectionName) {\n                    defStoreConfig.collectionName = config.collectionName;\n                    delete config.collectionName;\n                }\n\n                if (typeof config.dataSource === 'string') {\n                    var ds = config.dataSource;\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\n                    }\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\n                    if (!defStoreConfig.tableName) defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\n\n                    var provider = config.provider || config.name;\n                    switch (provider) {\n                        case 'oData':\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\n                            break;\n                        case 'webApi':\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } else {\n                config = { name: 'local' };\n            }\n\n            defStoreConfig.initParam = config;\n            self._setTypeStoreConfig(type, name, defStoreConfig);\n\n            return type;\n        };\n    },\n    _setTypeStoreConfig: function _setTypeStoreConfig(type, name, config) {\n        if (!type.storeConfigs) {\n            type.storeConfigs = {\n                stores: {}\n            };\n        }\n        type.storeConfigs.stores[name] = config;\n        if (name === 'default') {\n            type.storeConfigs['default'] = name;\n        }\n    },\n\n    _findByIdQueryable: function _findByIdQueryable(set, keys) {\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\n        if (keysProps.length > 1 && keys && 'object' === (typeof keys === 'undefined' ? 'undefined' : _typeof(keys))) {\n            var predicate = \"\",\n                thisArgs = {};\n            for (var i = 0; i < keysProps.length; i++) {\n                if (i > 0) predicate += \" && \";\n\n                var key = keysProps[i];\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\n                thisArgs[key.name] = keys[key.name];\n            }\n\n            return {\n                predicate: predicate,\n                thisArgs: thisArgs\n            };\n        } else if (keysProps.length === 1) {\n            return {\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\n                thisArgs: { value: keys }\n            };\n        } else {\n            throw 'invalid keys';\n        }\n    },\n    _getKeyObjectFromEntity: function _getKeyObjectFromEntity(obj, entityType) {\n        var key;\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\n        if (keyDefs.length === 1) key = obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[keyDefs[0].name] : obj;else {\n            key = {};\n\n            for (var i = 0; i < keyDefs.length; i++) {\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\n            }\n        }\n\n        return key;\n    },\n    _getSaveMode: function _getSaveMode(entity, entitySet, hint, storeAlias) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n        var entityType = entity.getType();\n\n        switch (true) {\n            case hint === 'update':\n                callback.success('attach');break;\n            case hint === 'new':\n                callback.success('add');break;\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) {\n                return entity[keyDef.name];\n            }):\n                callback.success('add');break;\n            case !!entity.storeToken:\n                callback.success('attach');break;\n                break;\n            default:\n                //use the current entity store informations\n                storeAlias = this._getStoreAlias(entity, storeAlias);\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias).then(function () {\n                    callback.success('attach');\n                }, function () {\n                    callback.success('add');\n                });\n                break;\n        }\n\n        return promise.getPromise();\n    },\n\n    //EntityContext\n    ContextRegister: function ContextRegister(storageProviderCfg) {\n        //context instance\n        var self = this;\n        if (typeof storageProviderCfg.name === \"string\") {\n            storageProviderCfg.name = [storageProviderCfg.name];\n        }\n\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\n        this.storeToken = {\n            typeName: this.getType().fullName,\n            args: args,\n            factory: function factory() {\n                return new (self.getType())(args);\n            }\n        };\n\n        //set elementType storetoken\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < members.length; i++) {\n            var item = members[i];\n            if (item.type) {\n                var itemResolvedDataType = _index.Container.resolveType(item.type);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    if (!elementType.storeToken) {\n                        elementType.storeToken = this.storeToken;\n                    }\n                }\n            }\n        }\n    },\n    QueryResultModifier: function QueryResultModifier(query) {\n        var self = _index2.default.ItemStore;\n        var context = query.context;\n        var type = query.modelBinderConfig.$type;\n        if ('string' === typeof type) {\n            type = _index.Container.resolveType(type);\n        }\n\n        if (type === _index2.default.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\n            type = query.modelBinderConfig.$item.$type;\n        }\n\n        //TODO: runs when model binding missed (inmemory)\n        if (typeof type === 'undefined' && query.result && query.result[0] instanceof _index2.default.Entity) {\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                return !!memDef.inverseProperty;\n            });\n\n            for (var i = 0; i < query.result.length; i++) {\n                self._setStoreAlias(query.result[i], context.storeToken);\n\n                for (var j = 0; j < navProps.length; j++) {\n                    var navProp = navProps[j];\n                    if (query.result[i][navProp.name] instanceof _index2.default.Entity) {\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\n                            if (query.result[i][navProp.name][k] instanceof _index2.default.Entity) {\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n_index2.default.ItemStore = new _index2.default.ItemStoreClass();\n\n_index2.default.Entity.addMember('field', function (propName) {\n    var def = this.memberDefinitions.getMember(propName);\n    if (def) {\n        if (def.definedBy === this) {\n            return new _index2.default.MemberWrapper(def);\n        } else {\n            _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\n        }\n    } else {\n        _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\n    }\n\n    return this;\n}, true);\n\n_index2.default.Class.define('$data.MemberWrapper', null, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n    },\n    setKey: function setKey(value) {\n        this.memberDefinition.key = value || value === undefined ? true : false;\n        return this;\n    },\n    setComputed: function setComputed(value) {\n        this.memberDefinition.computed = value || value === undefined ? true : false;\n        return this;\n    },\n    setRequired: function setRequired(value) {\n        this.memberDefinition.required = value || value === undefined ? true : false;\n        return this;\n    },\n    setNullable: function setNullable(value) {\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\n        return this;\n    },\n    changeDefinition: function changeDefinition(attr, value) {\n        this.memberDefinition[attr] = value;\n        return this;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],100:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ModelBinder', null, null, {\n\n    constructor: function constructor(context) {\n        this.context = context;\n        this.providerName = null;\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\n            this.providerName = this.context.storageProvider.providerName;\n            if (!this.providerName) {\n                for (var i in _index2.default.RegisteredStorageProviders) {\n                    if (_index2.default.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\n                        this.providerName = i;\n                        break;\n                    }\n                }\n            }\n        }\n    },\n\n    _deepExtend: function _deepExtend(o, r) {\n        if (o === null || o === undefined) {\n            return r;\n        }\n        for (var i in r) {\n            if (o.hasOwnProperty(i)) {\n                if (_typeof(r[i]) === 'object') {\n                    if (Array.isArray(r[i])) {\n                        for (var j = 0; j < r[i].length; j++) {\n                            if (o[i].indexOf(r[i][j]) < 0) {\n                                o[i].push(r[i][j]);\n                            }\n                        }\n                    } else this._deepExtend(o[i], r[i]);\n                }\n            } else {\n                o[i] = r[i];\n            }\n        }\n        return this._finalize(o);\n    },\n\n    _finalize: function _finalize(o) {\n        if (o instanceof _index2.default.Entity) {\n            o.changedProperties = undefined;\n            o.storeToken = this.context.storeToken;\n        }\n        return o;\n    },\n\n    _buildSelector: function _buildSelector(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) {\n                meta.$selector = [meta.$selector];\n            }\n\n            for (var i = 0; i < meta.$selector.length; i++) {\n                var selector = meta.$selector[i].replace('json:', '');\n                context.src += 'if(';\n                var path = selector.split('.');\n                for (var j = 0; j < path.length; j++) {\n                    context.src += 'di[\"' + path.slice(0, j + 1).join('\"][\"') + '\"]' + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\n                }\n                context.src += '){di = di[\"' + path.join('\"][\"') + '\"];}' + (i < meta.$selector.length - 1 ? 'else ' : '');\n            }\n\n            context.src += 'if (di === null){';\n            if (context.iter) context.src += context.iter + ' = null;';\n            context.src += 'return null;';\n            context.src += '}';\n        }\n    },\n\n    _buildKey: function _buildKey(name, type, keys, context, data) {\n        if (keys) {\n            var type = _index.Container.resolveType(type);\n            var typeIndex = _index.Container.getIndex(type);\n            type = type.fullName || type.name;\n            context.src += 'var ' + name + 'Fn = function(di){';\n            if (!Array.isArray(keys) || keys.length == 1) {\n                if (typeof keys !== 'string') keys = keys[0];\n                context.src += 'if (typeof di[\"' + keys + '\"] === \"undefined\") return undefined;';\n                context.src += 'if (di[\"' + keys + '\"] === null) return null;';\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di[\"' + keys + '\"]);';\n            } else {\n                context.src += 'var key = \"\";';\n                for (var i = 0; i < keys.length; i++) {\n                    var id = _typeof(keys[i]) !== 'object' ? keys[i] : keys[i].$source;\n                    context.src += 'if (typeof di[\"' + id + '\"] === \"undefined\") return undefined;';\n                    context.src += 'if (di[\"' + id + '\"] === null) return null;';\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di[\"' + id + '\"]);';\n                }\n            }\n\n            context.src += 'return key;};';\n        }\n\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\n    },\n\n    build: function build(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) meta.$selector = [meta.$selector];\n            for (var i = 0; i < meta.$selector.length; i++) {\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\n            }\n        }\n\n        if (meta.$value) {\n            if (typeof meta.$value === 'function') {\n                context.src += 'var di = di || data;';\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\n                if (meta.$type) {\n                    var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                    var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                    if (converter) {\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\n                    } else {\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\n                    }\n                } else context.item = 'fn()';\n            } else if (meta.$type) {\n                var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\n                } else {\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\n                }\n            } else context.item = meta.$value;\n        } else if (meta.$source) {\n            var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n            var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (!context.forEach) context.src += 'var di = data;';\n            context.item = item;\n            this._buildSelector(meta, context);\n            if (converter) {\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta.$source + '\"]);';\n            } else {\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta.$source + '\"]);';\n            }\n        } else if (meta.$item) {\n            context.meta.push('$item');\n            var iter = context.item && context.current ? context.item + '.' + context.current : context.item ? context.item : 'result';\n            context.iter = iter;\n            if (iter.indexOf('.') < 0) context.src += 'var ' + iter + ';';\n            context.src += 'var fn = function(di){';\n            if (meta.$selector) {\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\n            if (this.references && meta.$item.$keys) {\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\n                context.src += 'var ' + keycacheName + ';';\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\n                context.src += 'if (kci < 0){';\n                context.src += keycacheName + ' = [];';\n                context.src += 'keycache.push(' + keycacheName + ');';\n                context.src += 'keycacheIter.push(' + iter + ');';\n                context.src += '}else{';\n                context.src += keycacheName + ' = keycache[kci];';\n                context.src += '}';\n            }\n            context.iter = undefined;\n            context.forEach = true;\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\n            context.src += 'var forEachFn = function(di, i){';\n            context.src += 'var diBackup = di;';\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\n            var item = context.item || 'iter';\n            context.item = item;\n            if (!meta.$item.$source) {\n                this._buildSelector(meta.$item, context);\n            }\n            this.build(meta.$item, context);\n            if (this.references && meta.$keys) {\n                context.src += 'if (forKey){';\n                context.src += 'if (cache[forKey]){';\n                context.src += iter + ' = cache[forKey];';\n                context.src += 'if (' + iter + '.indexOf(' + (context.item || item) + ') < 0){';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}}else{';\n                context.src += 'cache[forKey] = ' + iter + ';';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}}else{';\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\n                context.src += '}';\n                context.src += '}else{';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}';\n                context.src += '}';\n                context.src += '}';\n            } else {\n                if (this.references && meta.$item.$keys) {\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += '}';\n                } else {\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                }\n            }\n            context.src += '};';\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\n            context.src += 'else forEachFn(di, 0);';\n            context.forEach = false;\n            context.item = null;\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);';\n            context.meta.pop();\n        } else if (meta.$type) {\n            if (!context.forEach) {\n                context.src += 'if (typeof di === \"undefined\"){';\n                context.src += 'var di = data;';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            var resolvedType = _index.Container.resolveType(meta.$type);\n            var type = _index.Container.resolveName(resolvedType);\n            var typeIndex = _index.Container.getIndex(resolvedType);\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo(_index2.default.Entity);\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (context.item == item) item += 'new_';\n            context.item = item;\n\n            var isPrimitive = false;\n            if (!meta.$source && !meta.$value && resolvedType !== _index2.default.Array && resolvedType !== _index2.default.Object && !resolvedType.isAssignableTo) isPrimitive = true;\n            if (resolvedType === _index2.default.Object || resolvedType === _index2.default.Array) {\n                var keys = Object.keys(meta);\n                if (keys.length == 1 || keys.length == 2 && meta.$selector) isPrimitive = true;\n            }\n\n            if (isPrimitive) {\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\n                } else {\n                    context.src += 'var ' + item + ' = di;';\n                }\n            } else {\n                if (this.references && meta.$keys) {\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\n                    context.src += 'if (itemKey === null) return null;';\n                    context.src += 'var ' + item + ';';\n                    context.src += 'if (itemKey && cache[itemKey]){';\n                    context.src += item + ' = cache[itemKey];';\n                    context.src += '}else{';\n                    if (isEntityType) {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                    context.src += 'if (itemKey){';\n                    context.src += 'cache[itemKey] = ' + item + ';';\n                    context.src += '}';\n                    context.src += '}';\n                } else {\n                    if (isEntityType) {\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                }\n            }\n            var openTypeProperty = null;\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType) {\n                openTypeProperty = resolvedType.openType === true ? _index2.default.defaults.openTypeDefaultPropertyName : resolvedType.openType;\n                context.src += item + '.' + openTypeProperty + ' = {};';\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function (prop) {\n                    return '\"' + prop + '\"';\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\n            }\n            for (var i in meta) {\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\n                    context.current = i;\n                    if (!meta[i].$item) {\n                        if (meta[i].$value) {\n                            context.meta.push(i);\n                            var item = context.item;\n                            this.build(meta[i], context);\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta[i].$source) {\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            if (meta[i].$type) {\n                                var type = _index.Container.resolveName(_index.Container.resolveType(meta[i].$type));\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta[i].$type));\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                                if (converter) {\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i].$source + '\"]);';\n                                } else {\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i].$source + '\"]);';\n                                }\n                            } else {\n                                context.src += item + '.' + i + ' = di[\"' + meta[i].$source + '\"];';\n                            }\n                            context.src += '};';\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';else context.src += 'fn(di);';\n                        } else if (meta[i].$type) {\n                            context.meta.push(i);\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            this.build(meta[i], context);\n                            context.src += 'return ' + context.item + ';};';\n                            if (meta[i].$type === _index2.default.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';else context.src += item + '.' + i + ' = fn(di);';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta.$type) {\n                            var memDef = _index.Container.resolveType(meta.$type).memberDefinitions.getMember(i);\n                            var type = _index.Container.resolveName(memDef.type);\n                            var entityType = _index.Container.resolveType(meta.$type);\n                            var entityTypeIndex = _index.Container.getIndex(meta.$type);\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di[\"' + meta[i] + '\"], Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\n                            } else if (converter) {\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i] + '\"]);';\n                            } else {\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(type.memberDefinitions.getMember(i).type));\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i] + '\"]);';\n                            }\n                        }\n                    } else {\n                        context.meta.push(i);\n                        this.build(meta[i], context);\n                        context.item = item;\n                        context.meta.pop();\n                    }\n                }\n            }\n            context.src += item + ' = self._finalize(' + item + ');';\n        }\n    },\n\n    call: function call(data, meta) {\n        if (!Object.getOwnPropertyNames(meta).length) {\n            return data;\n        }\n        var context = {\n            src: '',\n            meta: []\n        };\n        context.src += 'var self = this;';\n        context.src += 'var result;';\n        context.src += 'var cache = {};';\n        context.src += 'var keycache = [];';\n        context.src += 'var keycacheIter = [];';\n        this.build(meta, context);\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\n        context.src += 'return result;';\n\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\n        var ret = fn(meta, data, _index.Container);\n        return ret;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],101:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollector', _index2.default.Notifications.ChangeCollectorBase, null, {\n    buildData: function buildData(entities) {\n        var result = [];\n        entities.forEach(function (element) {\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\n            var enumerableMemDefCollection = [];\n\n            switch (element.data.entityState) {\n                case _index2.default.EntityState.Added:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\n                    break;\n                case _index2.default.EntityState.Modified:\n                    enumerableMemDefCollection = element.data.changedProperties;\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\n                    break;\n                default:\n                    break;\n            }\n\n            enumerableMemDefCollection.forEach(function (memDef) {\n                resObj[memDef.name] = element.data[memDef.name];\n            });\n\n            result.push(resObj);\n        });\n\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],102:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\n    buildData: function buildData(entityContextData) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    processChangedData: function processChangedData(entityData) {\n        if (this.Distrbutor && this.Distrbutor.distributeData) this.Distrbutor.distributeData(this.buildData(entityData));\n    },\n    Distrbutor: { enumerable: false, dataType: _index2.default.Notifications.ChangeDistributorBase, storeOnObject: true }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],103:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributor', _index2.default.Notifications.ChangeDistributorBase, null, {\n    constructor: function constructor(broadcastUrl) {\n        this.broadcastUrl = broadcastUrl;\n    },\n    distributeData: function distributeData(data) {\n        _index2.default.ajax({\n            url: this.broadcastUrl,\n            type: \"POST\",\n            data: 'data=' + JSON.stringify(data),\n            succes: this.success,\n            error: this.error\n        });\n    },\n    broadcastUrl: { dataType: \"string\" },\n    success: function success() {},\n    error: function error() {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],104:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\n    distributeData: function distributeData(collectorData) {\n        _index.Guard.raise(\"Pure class\");\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],105:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Query', null, null, {\n    constructor: function constructor(expression, defaultType, context) {\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\n\n        this.expression = expression;\n        this.context = context;\n\n        //TODO: expressions get as JSON string?!\n\n        this.expressions = expression;\n        this.defaultType = defaultType;\n        this.result = [];\n        this.rawDataList = [];\n        this.modelBinderConfig = {};\n        this.context = context;\n    },\n\n    rawDataList: { dataType: \"Array\" },\n    result: { dataType: \"Array\" },\n    resultType: {},\n    buildResultSet: function buildResultSet(ctx) {\n        var converter = new _index2.default.ModelBinder(this.context);\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\n        return;\n    },\n    getEntitySets: function getEntitySets() {\n        var ret = [];\n        var ctx = this.context;\n\n        var fn = function fn(expression) {\n            if (expression instanceof _index2.default.Expressions.EntitySetExpression) {\n                if (ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0) ret.push(ctx._entitySetReferences[expression.elementType.name]);\n            }\n            if (expression.source) fn(expression.source);\n            if (expression.members) {\n                for (var i = 0; i < expression.members.length; i++) {\n                    fn(expression.members[i].expression);\n                }\n            }\n        };\n\n        fn(this.expression);\n\n        return ret;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],106:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.queryBuilder', null, null, {\n    constructor: function constructor() {\n        this._fragments = {};\n        this.selectedFragment = null;\n        this._binderConfig = {};\n        this.modelBinderConfig = this._binderConfig;\n        this._binderConfigPropertyStack = [];\n    },\n    selectTextPart: function selectTextPart(name) {\n        if (!this._fragments[name]) {\n            this._fragments[name] = { text: '', params: [] };\n        }\n        this.selectedFragment = this._fragments[name];\n    },\n    getTextPart: function getTextPart(name) {\n        return this._fragments[name];\n    },\n    addText: function addText(textParticle) {\n        this.selectedFragment.text += textParticle;\n    },\n    addParameter: function addParameter(param) {\n        this.selectedFragment.params.push(param);\n    },\n    selectModelBinderProperty: function selectModelBinderProperty(name) {\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\n        if (!(name in this.modelBinderConfig)) {\n            this.modelBinderConfig[name] = {};\n        }\n        this.modelBinderConfig = this.modelBinderConfig[name];\n    },\n    popModelBinderProperty: function popModelBinderProperty() {\n        if (this._binderConfigPropertyStack.length === 0) {\n            this.modelBinderConfig = this._binderConfig();\n        } else {\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\n        }\n    },\n    resetModelBinderProperty: function resetModelBinderProperty(name) {\n        this._binderConfigPropertyStack = [];\n        this.modelBinderConfig = this._binderConfig;\n    },\n    addKeyField: function addKeyField(name) {\n        if (!this.modelBinderConfig['$keys']) {\n            this.modelBinderConfig['$keys'] = new Array();\n        }\n        this.modelBinderConfig['$keys'].push(name);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],107:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.QueryProvider', null, null, {\n    //TODO: instance member?????\n    constructor: function constructor() {\n        this.requiresExpressions = false;\n    },\n    executeQuery: function executeQuery(queryable, resultHandler) {},\n    getTraceString: function getTraceString(queryable) {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],108:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Queryable', null, null, {\n    constructor: function constructor(source, rootExpression) {\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n\n        var context = source instanceof _index2.default.EntityContext ? source : source.entityContext;\n        this.defaultType = source instanceof _index2.default.EntityContext ? null : source.defaultType;\n        this.entityContext = context;\n        this.expression = rootExpression;\n    },\n\n    filter: function filter(predicate, thisArg) {\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\n        ///<param name=\"predicate\" type=\"string\">\n        ///The expression body of the predicate function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: filter(\"it.Title == 'Hello'\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\n        ///<param name=\"predicate\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Filtering a set of entities with a predicate function&#10;\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate function and parameters&#10;\n        ///var draftables = Persons.filter( function( person ) {\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\n        /// }, { gender: 'Male',  age: 21 });\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\n        /// { gender: 'Male',  age: 21 });\n        ///</example>\n        ///</signature>\n        if (arguments.length === 3) {\n            predicate = \"it.\" + arguments[0] + (arguments[1][0] === \".\" ? arguments[1] + \"(param)\" : \" \" + arguments[1] + \" param\");\n            thisArg = { param: arguments[2] };\n        }\n        this._checkOperation('filter');\n        var expression = _index.Container.createCodeExpression(predicate, thisArg);\n        var expressionSource = this.expression;\n        if (this.expression instanceof _index2.default.Expressions.FilterExpression) {\n            expressionSource = this.expression.source;\n\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\n            expression = _index.Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\n        }\n        var exp = _index.Container.createFilterExpression(expressionSource, expression);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    where: function where(predicate, params) {\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.filter(predicate, params);\n    },\n\n    map: function map(projection, thisArg, mappedTo) {\n        ///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"string\">\n        ///\t\t\tThe expression body of the projection function in string. &#10;\n        ///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\n        ///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"Function\">\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///\t\t\tContains the projection parameters.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\n        ///\t\t</example>\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\n        ///\t\t\tvar custom = Persons.map( function( person ) {\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('map');\n        var codeExpression = _index.Container.createCodeExpression(projection, thisArg);\n        var exp = _index.Container.createProjectionExpression(this.expression, codeExpression);\n\n        if (mappedTo === 'default') exp.projectionAs = this.defaultType;else if (mappedTo) exp.projectionAs = _index.Container.resolveType(mappedTo);else exp.projectionAs = _index2.default.Object;\n\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    select: function select(projection, thisArg, mappedTo) {\n        ///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.map(projection, thisArg, mappedTo);\n    },\n\n    length: function length(onResult, transaction) {\n        ///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet the count of Person entities. &#10;\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('length');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var countExpression = _index.Container.createCountExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(countExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    count: function count(onResult, transaction) {\n        ///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\n        ///<returns type=\"$data.Integer\" />\n        return this.length(onResult, transaction);\n    },\n\n    forEach: function forEach(iterator, transaction) {\n        ///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t\t<param name=\"iterator\" type=\"Function\">\n        ///\t\t\tIterator function to handle the result elements.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('forEach');\n        var pHandler = new _index2.default.PromiseHandler();\n        function iteratorFunc(items) {\n            items.forEach(iterator);\n        }\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\n\n        var forEachExpression = _index.Container.createForEachExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(forEachExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toArray: function toArray(onResult_items, transaction) {\n        ///\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet all Person entities. &#10;\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (onResult_items instanceof _index2.default.Array) {\n            return this.toArray(function (results) {\n                onResult_items.length = 0;\n                results.forEach(function (item, idx) {\n                    onResult_items.push(item);\n                });\n            });\n        }\n\n        this._checkOperation('toArray');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var toArrayExpression = _index.Container.createToArrayExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(toArrayExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    toLiveArray: function toLiveArray(onResult, transaction) {\n        var self = this;\n        var result = [];\n\n        var doAction = function doAction(action) {\n            return function (onResult) {\n                var pHandler = new _index2.default.PromiseHandler();\n                var callback = pHandler.createCallback(onResult);\n\n                var successFunc = function successFunc(res) {\n                    result.length = 0;\n\n                    var data = res;\n                    _index2.default.typeSystem.extend(result, data);\n\n                    result.prev = doAction(function (cb) {\n                        data.prev(cb);\n                    });\n                    result.next = doAction(function (cb) {\n                        data.next(cb);\n                    });\n\n                    callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\n                };\n\n                action({\n                    success: successFunc,\n                    error: callback.error\n                }, transaction);\n\n                var promise = pHandler.getPromise();\n                _index2.default.typeSystem.extend(result, promise);\n\n                return result;\n            };\n        };\n\n        result.refresh = doAction(function (cb) {\n            self.toArray(cb);\n        });\n\n        return result.refresh.apply(result, arguments);\n    },\n\n    single: function single(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('single');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(2);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var singleExpression = _index.Container.createSingleExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(singleExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    some: function some(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///         Is there any person who's first name is \"George\"? &#10;\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('some');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var someExpression = _index.Container.createSomeExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(someExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    every: function every(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tResult is true when all person are married. &#10;\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('every');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var everyExpression = _index.Container.createEveryExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(everyExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    take: function take(amount) {\n        ///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('take');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Take);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    skip: function skip(amount) {\n        ///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('skip');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n\n    order: function order(selector) {\n        if (selector === '' || selector === undefined || selector === null) {\n            return this;\n        }\n        if (selector[0] === \"-\") {\n            var orderString = \"it.\" + selector.replace(\"-\", \"\");\n            return this.orderByDescending(orderString);\n        } else {\n            return this.orderBy(\"it.\" + selector);\n        }\n    },\n\n    orderBy: function orderBy(selector, thisArg) {\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderBy');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderBy);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    orderByDescending: function orderByDescending(selector, thisArg) {\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderByDescending');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderByDescending);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n\n    first: function first(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('first');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var firstExpression = _index.Container.createFirstExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(firstExpression);\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    find: function find(keyValue, onResult, transaction) {\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\n\n        try {\n\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n\n                var parameters = [];\n                for (var i = 0; i < keys.length; i++) {\n                    var keyProp = keys[i];\n                    if (!(keyProp.name in keyValue)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\n                if (operation) {\n\n                    var findExpression = _index.Container.createFindExpression(this.expression, parameters);\n                    var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n                    try {\n                        var expression = preparator.Visit(findExpression);\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                        this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n                } else {\n                    var predicate = '';\n                    var params = {};\n                    for (var i = 0; i < parameters.length; i++) {\n                        var param = parameters[i];\n                        params[param.name] = param.value;\n                        if (i > 0) predicate += ' && ';\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\n                    }\n\n                    this.single(predicate, params, cbWrapper, transaction);\n                }\n            }\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    include: function include(selector) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (this.entityContext && this.entityContext.storageProvider && this.entityContext.storageProvider.name === \"oData\") {\n            return this.include2.apply(this, arguments);\n        }\n\n        this._checkOperation('include');\n        var constExp = _index.Container.createConstantExpression(selector, \"string\");\n        var takeExp = _index.Container.createIncludeExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    include2: function include2(selector, thisArg) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('include');\n        if (typeof selector === 'string' && (selector.length < 3 || selector.substr(0, 3) !== 'it.') && !/^[^\\.]*(=>)/.test(selector)) {\n            selector = 'it.' + selector;\n        }\n        var expression = _index.Container.createCodeExpression(selector, thisArg);\n        var includeExp = _index.Container.createIncludeExpression(this.expression, expression);\n\n        return _index.Container.createQueryable(this, includeExp);\n    },\n\n    withInlineCount: function withInlineCount(selector) {\n        this._checkOperation('withInlineCount');\n        var constExp = _index.Container.createConstantExpression(selector || 'allpages', \"string\");\n        var inlineCountExp = _index.Container.createInlineCountExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, inlineCountExp);\n    },\n    withCount: function withCount(selector) {\n        return this.withInlineCount(selector);\n    },\n\n    removeAll: function removeAll(onResult, transaction) {\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('batchDelete');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var batchDeleteExpression = _index.Container.createBatchDeleteExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(batchDeleteExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    _runQuery: function _runQuery(onResult_items, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(this.expression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toTraceString: function toTraceString(name) {\n        ///\t<summary>Returns the trace string of the query.</summary>\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\n        ///\t<returns type=\"$data.String\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the trace string of the query.</summary>\n        ///\t\t<param name=\"name\" type=\"$data.String\">\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.String\" />\n        ///\t\t<example>\n        ///\t\t\tGet the trace string for Articles.toArray() &#10;\n        ///\t\t\tArticles.toTraceString();\n        ///\t\t</example>\n        ///\t</signature>\n\n        var expression = this.expression;\n\n        if (name) {\n            expression = _index.Container['create' + name + 'Expression'](expression);\n        } else {\n            expression = _index.Container.createToArrayExpression(expression);\n        }\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        expression = preparator.Visit(expression);\n\n        //this.expression = expression;\n        var q = _index.Container.createQueryable(this, expression);\n        return q.entityContext.getTraceString(q);\n    },\n\n    _checkOperation: function _checkOperation(name) {\n        var operation = this.entityContext.resolveSetOperations(name);\n        if (operation.invokable != undefined && !operation.invokable) _index.Guard.raise(new _index.Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\n    },\n    defaultType: {}\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],109:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.RelatedEntityProxy\", null, null, {\n    constructor: function constructor(entityKeyObject, navigationProperty, type, parent, context) {\n        this._entityKeyObject = entityKeyObject;\n        this._navigationProperty = navigationProperty;\n        this._type = type;\n        this._parent = parent;\n        this._context = context;\n    },\n    _entityKeyObject: { type: _index2.default.Object },\n    _ctxFactory: {},\n    _type: {},\n    _navigationProperty: { type: _index2.default.String },\n    _parent: { type: '$data.RelatedEntityProxy' },\n    _context: { type: '$data.EntityContext' },\n\n    read: function read(onResult) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        try {\n            var proxyChains = this._chainToArray();\n            var firstProxy = proxyChains[0];\n            var context = firstProxy._context;\n            if (!context) {\n                var storeToken = firstProxy._parent instanceof _index2.default.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    context = storeToken.factory();\n                }\n            }\n\n            if (!context) throw new _index.Exception('ContextNotExists');\n\n            var entitySet = null;\n            var expression = null;\n            if (firstProxy._parent instanceof _index2.default.Entity) {\n                entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\n\n                var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\n                proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\n            } else {\n                entitySet = context.getEntitySetFromElementType(firstProxy._type);\n            }\n\n            expression = entitySet.expression;\n            var returnType = null;\n\n            for (var i = 0; i < proxyChains.length; i++) {\n                var item = proxyChains[i];\n                var keys = item._type.memberDefinitions.getKeyProperties();\n\n                var parameters = [];\n                for (var j = 0; j < keys.length; j++) {\n                    var keyProp = keys[j];\n                    if (!(keyProp.name in item._entityKeyObject)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var member = undefined;\n                if (item._navigationProperty) {\n                    member = _index.Container.createMemberInfoExpression(item._navigationProperty);\n                    returnType = item._navigationProperty.elementType;\n                }\n                expression = _index.Container.createFindExpression(expression, parameters, member);\n            }\n\n            var preparator = _index.Container.createQueryExpressionCreator(context);\n            expression = preparator.Visit(expression);\n            //context.log({ event: \"EntityExpression\", data: expression });\n\n            var queryable = _index.Container.createQueryable(entitySet, expression);\n            queryable.defaultType = returnType || queryable.defaultType;\n            context.executeQuery(queryable, cbWrapper);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    _chainToArray: function _chainToArray(result) {\n        result = result || [];\n        if (this._parent instanceof _index2.default.RelatedEntityProxy) {\n            this._parent._chainToArray(result);\n        }\n\n        result.push(this);\n        return result;\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],110:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ServiceOperation', null, null, {}, {\n    translateDefinition: function translateDefinition(propertyDef, name, definedBy) {\n        propertyDef.serviceName = name;\n        var memDef = new _index2.default.MemberDefinition(this.generateServiceOperation(propertyDef), this);\n        memDef.name = name;\n        return memDef;\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n                var memberdef;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity || this instanceof _index2.default.EntitySet) {\n                    var entitySet;\n                    if (this instanceof _index2.default.Entity) {\n                        if (this.context) {\n                            context = this.context;\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\n                            context = this.storeToken.factory();\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else {\n                            _index.Guard.raise(new _index.Exception(\"entity can't resolve context\", 'Not Found!', this));\n                            return;\n                        }\n                    } else if (this instanceof _index2.default.EntitySet) {\n                        context = this.entityContext;\n                        entitySet = this;\n\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\n                        memberdef = _index2.default.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: entitySet\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    //object as parameter\n                    //FIX: object type parameters with the same property name as the name of the first parameter\n                    if (arguments[0] && _typeof(arguments[0]) === 'object' && arguments[0].constructor === _index2.default.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\n                        var argObj = arguments[0];\n                        for (var i = 0; i < cfg.params.length; i++) {\n                            var paramConfig = cfg.params[i];\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\n                                paramConstExpression.push(_index.Container.createConstantExpression(argObj[paramConfig.name], _index.Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\n                            }\n                        }\n                    }\n                    //arg params\n                    else {\n                            for (var i = 0; i < cfg.params.length; i++) {\n                                if (typeof arguments[i] == 'function') break;\n\n                                //TODO: check params type\n                                var paramConfig = cfg.params[i];\n                                if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\n                                    paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\n                                }\n                            }\n                        }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                if (!memberdef) {\n                    if (boundItem && boundItem.data) {\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\n                    } else {\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\n                    }\n                }\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (!(typeof clb === 'function' || (typeof clb === 'undefined' ? 'undefined' : _typeof(clb)) === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function'))) {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = cfg.params || [];\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    }\n});\n\n_index2.default.Class.define('$data.ServiceAction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'POST'; //default Action method is POST\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\n_index2.default.Class.define('$data.ServiceFunction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'GET'; //default Function method is GET\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],111:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.storageProviders = {\n    DbCreationType: {\n        Merge: 10,\n        DropTableIfChanged: 20,\n        DropTableIfChange: 20,\n        DropAllExistingTables: 30,\n        ErrorIfChange: 40,\n        DropDbIfChange: 50\n    }\n};\n\n_index2.default.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\n_index2.default.Class.define('$data.StorageProviderBase', null, null, {\n    constructor: function constructor(schemaConfiguration, context) {\n        this.providerConfiguration = schemaConfiguration || {};\n\n        this.name = this.getType().name;\n        if (_index2.default.RegisteredStorageProviders) {\n            var keys = Object.keys(_index2.default.RegisteredStorageProviders);\n            for (var i = 0; i < keys.length; i++) {\n                if (this instanceof _index2.default.RegisteredStorageProviders[keys[i]]) {\n                    this.name = keys[i];\n                    break;\n                }\n            }\n        }\n    },\n    providers: {},\n    supportedDataTypes: { value: [], writable: false },\n    initializeStore: function initializeStore(callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n\n    executeQuery: function executeQuery(queryable, callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    loadRawData: function loadRawData(tableName, callBack) {\n        callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        callBack.error(new _index.Exception('loadRawData is not supported', 'Invalid Operation'));\n    },\n\n    buildIndependentBlocks: function buildIndependentBlocks(changedItems) {\n        /// <summary>\n        /// Build and processes a dependency graph from the changed items,\n        /// and generates blocks that can be inserted to the database sequentially.\n        /// </summary>\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\n        var edgesTo = [];\n        var edgesFrom = [];\n\n        function hasOwnProperty(obj) {\n            /// <summary>\n            /// Returns true if object has own property (used for 'hashset'-like objects)\n            /// </summary>\n            /// <param name=\"obj\">Target object</param>\n            /// <returns>True if the object has own property</returns>\n            for (var p in obj) {\n                if (obj.hasOwnProperty(p)) return true;\n            }\n            return false;\n        }\n\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\n        for (var i = 0; i < changedItems.length; i++) {\n            var current = changedItems[i];\n            if (!current.dependentOn || current.dependentOn.length == 0) {\n                // This item is independent\n                continue;\n            }\n\n            var to = null;\n            // Iterating over items 'current' depends on\n            for (var j = 0; j < current.dependentOn.length; j++) {\n                var currentDependency = current.dependentOn[j];\n                if (currentDependency.entityState == _index2.default.EntityState.Unchanged) {\n                    continue;\n                }\n                to = to || {};\n                // Getting the index of current dependency\n                var ixDependendOn = -1;\n                for (var k = 0; k < changedItems.length; k++) {\n                    if (changedItems[k].data == currentDependency) {\n                        ixDependendOn = k;\n                        changedItems[k].referredBy = changedItems[k].referredBy || [];\n                        changedItems[k].referredBy.push(current.data);\n                        break;\n                    }\n                }\n                // Sanity check\n                if (ixDependendOn == -1) {\n                    _index.Guard.raise(new _index.Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\n                }\n                // Setting edge in 'to' array\n                to[ixDependendOn] = true;\n                // Setting edge in 'from' array\n                var from = edgesFrom[ixDependendOn] || {};\n                from[i] = true;\n                edgesFrom[ixDependendOn] = from;\n            }\n            // Persisting found edges in edgesTo array\n            if (to !== null) edgesTo[i] = to;\n        }\n\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\n        var independentBlocks = [];\n        // Objects getting their dependency resolved in the current cycle.\n        var currentBlock = [];\n        // Filling currentBlock with initially independent objects.\n        for (var x = 0; x < changedItems.length; x++) {\n            if (!edgesTo.hasOwnProperty(x)) {\n                currentBlock.push(x);\n            }\n        }\n        while (currentBlock.length > 0) {\n            // Shifting currentBlock to cbix,\n            // and clearing currentBlock for next independent block\n            var cbix = [].concat(currentBlock);\n            currentBlock = [];\n            // Iterating over previous independent block, to generate the new one\n            for (var b = 0; b < cbix.length; b++) {\n                var dependentNodes = edgesFrom[cbix[b]];\n                if (typeof dependentNodes !== 'undefined') {\n                    for (var d in dependentNodes) {\n                        // Removing edge from 'edgesTo'\n                        delete edgesTo[d][cbix[b]];\n                        // Check if has any more dependency\n                        if (!hasOwnProperty(edgesTo[d])) {\n                            // It doesn't, so let's clean up a bit\n                            delete edgesTo[d];\n                            // and push the item to 'currentBlock'\n                            currentBlock.push(d);\n                        }\n                    }\n                }\n                // Clearing processed item from 'edgesFrom'\n                delete edgesFrom[cbix[b]];\n            }\n            // Push cbix t to independentBlocks\n            var cb = [];\n            for (var c = 0; c < cbix.length; c++) {\n                var item = changedItems[cbix[c]];\n                if (item.data.entityState != _index2.default.EntityState.Unchanged) cb.push(item);\n            }\n            if (cb.length > 0) independentBlocks.push(cb);\n        }\n        return independentBlocks;\n    },\n    getTraceString: function getTraceString(queryable) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n\n    _buildContinuationFunction: function _buildContinuationFunction(context, query) {\n        if (Array.isArray(query.result)) {\n            query.result.next = this._buildPagingMethod(context, query, 'next');\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\n        }\n    },\n    _buildPagingMethod: function _buildPagingMethod(context, query, mode) {\n        return function (onResult_items) {\n            var pHandler = new _index2.default.PromiseHandler();\n            var cbWrapper = pHandler.createCallback(onResult_items);\n\n            var continuation = new _index2.default.Expressions.ContinuationExpressionBuilder(mode);\n            var continuationResult = continuation.compile(query);\n            if (continuationResult.expression) {\n                var queryable = _index.Container.createQueryable(context, continuationResult.expression);\n                queryable.defaultType = query.defaultType;\n                context.executeQuery(queryable, cbWrapper);\n            } else {\n                cbWrapper.error(new _index.Exception(continuationResult.message, 'Invalid Operation', continuationResult));\n            }\n\n            return pHandler.getPromise();\n        };\n    },\n\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        var buildDbType_copyPropertyDefinition = function buildDbType_copyPropertyDefinition(propertyDefinition, refProp) {\n            var cPropertyDef;\n            if (refProp) {\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\n                cPropertyDef.kind = propertyDefinition.kind;\n                cPropertyDef.name = propertyDefinition.name;\n                cPropertyDef.notMapped = false;\n            } else {\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\n            }\n\n            cPropertyDef.dataType = _index.Container.resolveType(propertyDefinition.dataType);\n            cPropertyDef.type = cPropertyDef.dataType;\n            cPropertyDef.key = false;\n            cPropertyDef.computed = false;\n            return cPropertyDef;\n        };\n        var buildDbType_createConstrain = function buildDbType_createConstrain(foreignType, dataType, propertyName, prefix, keyPropertyName) {\n            var constrain = new Object();\n            constrain[foreignType.name] = propertyName;\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\n            return constrain;\n        };\n\n        if (storageModel.Associations) {\n            storageModel.Associations.forEach(function (association) {\n                var addToEntityDef = false;\n                var foreignType = association.FromType;\n                var dataType = association.ToType;\n                var foreignPropName = association.ToPropertyName;\n\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\n                var keyProperties = [];\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\n                    keyProperties = [memDef.keys];\n                } else if (memDef && Array.isArray(memDef.keys)) {\n                    keyProperties = [].concat(memDef.keys);\n                }\n\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\n\n                if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                    foreignType = association.ToType;\n                    dataType = association.FromType;\n                    foreignPropName = association.FromPropertyName;\n                    addToEntityDef = true;\n                }\n\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) {\n                    return d.key;\n                }).forEach(function (d, i) {\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\n                    if (addToEntityDef) {\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\n                        if (dependentMemDef) {\n                            dependentMemDef.isDependentProperty = true;\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\n                        }\n                    }\n                    association.ReferentialConstraint.push(constraint);\n                }, this);\n            }, this);\n        }\n        //Copy complex type properties\n        if (storageModel.ComplexTypes) {\n            storageModel.ComplexTypes.forEach(function (complexType) {\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\n\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\n                }, this);\n            }, this);\n        }\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel) {\n        return function (logicalEntity) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            //logicalEntity.changedProperties.forEach(function(memberDef){\n            //}, this);\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                if (logicalEntity[property.name] !== undefined) {\n                    dbInstance[property.name] = logicalEntity[property.name];\n                }\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                        var complexInstance = logicalEntity[association.FromPropertyName];\n                        if (complexInstance !== undefined) {\n                            association.ReferentialConstraint.forEach(function (constrain) {\n                                if (complexInstance !== null) {\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\n                                } else {\n                                    dbInstance[constrain[association.From]] = null;\n                                }\n                            }, this);\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\n                    if (complexInstance !== undefined) {\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\n                            if (complexInstance !== null) {\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\n                            } else {\n                                dbInstance[constrain[cmpType.From]] = null;\n                            }\n                        }, this);\n                    }\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n\n    bulkInsert: function bulkInsert(a, b, c, callback) {\n        callback.error(new _index.Exception('Not Implemented'));\n    },\n\n    supportedFieldOperations: {\n        value: {\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\n            toLowerCase: { dataType: \"string\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveFieldOperation: function resolveFieldOperation(operationName, expression, frameType) {\n        ///<summary></summary>\n        var result = this.supportedFieldOperations[operationName];\n        if (Array.isArray(result)) {\n            var i = 0;\n            for (; i < result.length; i++) {\n                if (result[i].allowedType === 'default' || _index.Container.resolveType(result[i].allowedType) === _index.Container.resolveType(expression.selector.memberDefinition.type) && frameType && result[i].allowedIn && (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function (type) {\n                    return frameType === _index.Container.resolveType(type);\n                }) || !Array.isArray(result[i].allowedIn) && frameType === _index.Container.resolveType(result[i].allowedIn))) {\n                    result = result[i];\n                    break;\n                }\n            }\n            if (i === result.length) {\n                result = undefined;\n            }\n        }\n\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operationName + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operationName;\n        return result;\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        var result = this.supportedBinaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        var result = this.supportedUnaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedSetOperations: {\n        value: {\n            toArray: { invokable: true, allowedIn: [] }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        var result = this.supportedSetOperations[operation];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\n        };\n        var allowedIn = result.allowedIn || [];\n        if (frameType && allowedIn) {\n            if (allowedIn instanceof Array && !allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(allowedIn instanceof Array) && frameType !== _index.Container.resolveType(allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operation + \" not supported in: \" + frameType.name));\n            }\n        }\n        return result;\n    },\n\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    makePhysicalTypeDefinition: function makePhysicalTypeDefinition(entityDefinition, association) {},\n\n    _beginTran: function _beginTran(tables, isWrite, callBack) {\n        callBack.success(new _index2.default.Transaction());\n    },\n\n    getFieldUrl: function getFieldUrl() {\n        return '#';\n    },\n\n    supportedAutoincrementKeys: {\n        value: {}\n    }\n}, {\n    onRegisterProvider: { value: new _index2.default.Event() },\n    registerProvider: function registerProvider(name, provider) {\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || [];\n        _index2.default.RegisteredStorageProviders[name] = provider;\n    },\n    getProvider: function getProvider(name) {\n        var provider = _index2.default.RegisteredStorageProviders[name];\n        if (!provider) console.warn(\"Provider not found: '\" + name + \"'\");\n        return provider;\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\n    },\n    isSupported: {\n        get: function get() {\n            return true;\n        },\n        set: function set() {}\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],112:[function(require,module,exports){\n(function (process){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.StorageProviderLoaderBase', null, null, {\n    isSupported: function isSupported(providerName) {\n        _index2.default.Trace.log('Detecting ' + providerName + ' provider support');\n        var supported = true;\n        switch (providerName) {\n            case 'indexedDb':\n                supported = _index2.default.__global.indexedDB || _index2.default.__global.webkitIndexedDB || _index2.default.__global.mozIndexedDB || _index2.default.__global.msIndexedDB && !/^file:/.test(_index2.default.__global.location && _index2.default.__global.location.href);\n                break;\n            case 'storm':\n                supported = 'XMLHttpRequest' in _index2.default.__global;\n                break;\n            case 'webSql':\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'LocalStore':\n                supported = 'localStorage' in _index2.default.__global && _index2.default.__global.localStorage ? true : false;\n                break;\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'mongoDB':\n                supported = _index2.default.mongoDBDriver;\n                break;\n            default:\n                break;\n        }\n        _index2.default.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\n        return supported;\n    },\n    scriptLoadTimeout: { type: 'int', value: 1000 },\n    scriptLoadInterval: { type: 'int', value: 50 },\n    npmModules: {\n        value: {\n            'indexedDb': 'jaydata-indexeddb',\n            'InMemory': 'jaydata-inmemory',\n            'LocalStore': 'jaydata-inmemory',\n            'mongoDB': 'jaydata-mongodb',\n            'oData': 'jaydata-odata',\n            'webApi': 'jaydata-webapi',\n            'sqLite': 'jaydata-sqlite',\n            'webSql': 'jaydata-sqlite',\n            'storm': 'jaydata-storm'\n        }\n    },\n    ProviderNames: {\n        value: {\n            'indexedDb': 'IndexedDb',\n            'InMemory': 'InMemory',\n            'LocalStore': 'InMemory',\n            'oData': 'oData',\n            'webApi': 'WebApi',\n            'sqLite': 'SqLite',\n            'webSql': 'SqLite',\n            'storm': 'Storm'\n        }\n    },\n    load: function load(providerList, callback) {\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || {};\n\n        _index2.default.Trace.log('Loading provider(s): ' + providerList);\n        callback = _index2.default.PromiseHandlerBase.createCallbackSettings(callback);\n\n        var self = this;\n        var cacheKey = providerList.join(',');\n        self._fallbackCache = self._fallbackCache || {};\n\n        if (self._fallbackCache[cacheKey]) {\n            callback.success(self._fallbackCache[cacheKey]);\n        } else {\n            this.find(providerList, {\n                success: function success(provider, selectedProvider) {\n                    self._fallbackCache[cacheKey] = provider;\n                    callback.success.call(this, provider);\n                },\n                error: callback.error\n            });\n        }\n    },\n    find: function find(providerList, callback) {\n        var currentProvider = providerList.shift();\n        var currentProvider = this.getVirtual(currentProvider);\n        if (Array.isArray(currentProvider)) {\n            providerList = currentProvider;\n            currentProvider = providerList.shift();\n        }\n\n        while (currentProvider && !this.isSupported(currentProvider)) {\n            currentProvider = providerList.shift();\n        }\n\n        _index2.default.Trace.log('First supported provider is ' + currentProvider);\n\n        if (!currentProvider) {\n            _index2.default.Trace.log('Provider fallback failed');\n            callback.error();\n        }\n\n        if (_index2.default.RegisteredStorageProviders) {\n            _index2.default.Trace.log('Is the ' + currentProvider + ' provider already registered?');\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback.success(provider);\n                return;\n            } else {\n                _index2.default.Trace.log(currentProvider + ' provider not registered');\n            }\n        }\n\n        if (!process.browser) {\n            // NodeJS\n            _index2.default.Trace.log('node.js detected trying to load NPM module');\n            this.loadNpmModule(currentProvider, providerList, callback);\n        } else {\n            _index2.default.Trace.log('Browser detected trying to load provider');\n            this.loadProvider(currentProvider, providerList, callback);\n        }\n    },\n    loadProvider: function loadProvider(currentProvider, providerList, callback) {\n        var self = this;\n        var mappedName = _index2.default.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\n        _index2.default.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\n        if (mappedName) {\n            var url = this.getUrl(mappedName);\n            _index2.default.Trace.log(currentProvider + ' provider from URL: ' + url);\n\n            var loader = this.loadScript;\n            if (document && document.createElement) {\n                _index2.default.Trace.log('document and document.createElement detected, using script element loader method');\n                loader = this.loadScriptElement;\n            }\n\n            loader.call(this, url, currentProvider, function (successful) {\n                var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n                if (successful && provider) {\n                    _index2.default.Trace.log(currentProvider + ' provider successfully registered');\n                    callback.success(provider);\n                } else if (providerList.length > 0) {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\n                    self.find(providerList, callback);\n                } else {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load');\n                    callback.error();\n                }\n            });\n        }\n    },\n    getUrl: function getUrl(providerName) {\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';else return 'jaydataproviders/' + providerName + 'Provider.js';\n    },\n    loadScript: function loadScript(url, currentProvider, callback) {\n        if (!url) {\n            callback(false);\n            return;\n        }\n\n        function getHttpRequest() {\n            if (_index2.default.__global.XMLHttpRequest) return new XMLHttpRequest();else if (_index2.default.__global.ActiveXObject !== undefined) return new ActiveXObject(\"MsXml2.XmlHttp\");else {\n                _index2.default.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\n                callback(false);\n                return;\n            }\n        }\n\n        var oXmlHttp = getHttpRequest();\n        oXmlHttp.onreadystatechange = function () {\n            _index2.default.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\n            if (oXmlHttp.readyState == 4) {\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\n                    _index2.default.Trace.log('HTTP request succeeded');\n                    _index2.default.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\n                    eval.call(_index2.default.__global, oXmlHttp.responseText);\n                    if (typeof callback === 'function') callback(true);else _index2.default.Trace.log('Callback function is undefined');\n                } else {\n                    _index2.default.Trace.log('HTTP request status: ', oXmlHttp.status);\n                    if (typeof callback === 'function') callback(false);else _index2.default.Trace.log('Callback function is undefined');\n                }\n            }\n        };\n        oXmlHttp.open('GET', url, true);\n        oXmlHttp.send(null);\n    },\n    loadScriptElement: function loadScriptElement(url, currentProvider, callback) {\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\n\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        _index2.default.Trace.log('Appending child ' + script + ' to ' + head);\n        head.appendChild(script);\n\n        var loadInterval = this.scriptLoadInterval || 50;\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\n        _index2.default.Trace.log('Script element watcher iterating ' + iteration + ' times');\n        function watcher() {\n            _index2.default.Trace.log('Script element watcher iteration ' + iteration);\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback(true);\n            } else {\n                iteration--;\n                if (iteration > 0) {\n                    _index2.default.Trace.log('Script element watcher next iteration');\n                    setTimeout(watcher, loadInterval);\n                } else {\n                    _index2.default.Trace.log('Script element loader failed');\n                    callback(false);\n                }\n            }\n        }\n        setTimeout(watcher, loadInterval);\n    },\n\n    loadNpmModule: function loadNpmModule(currentProvider, providerList, callback) {\n        var provider = null;\n        try {\n            require(this.npmModules[currentProvider]);\n            provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            _index2.default.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\n        } catch (e) {\n            _index2.default.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\n        }\n\n        if (provider) {\n            callback.success(provider);\n        } else if (providerList.length > 0) {\n            this.find(providerList, callback);\n        } else {\n            callback.error();\n        }\n    },\n\n    virtualProviders: {\n        type: _index2.default.Array,\n        value: {\n            local: {\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\n            }\n        }\n    },\n    getVirtual: function getVirtual(name) {\n        if (this.virtualProviders[name]) return [].concat(this.virtualProviders[name].fallbacks);\n\n        return name;\n    }\n});\n\n_index2.default.StorageProviderLoader = new _index2.default.StorageProviderLoaderBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n}).call(this,require('_process'))\n\n},{\"../TypeSystem/index.js\":31,\"_process\":3}],113:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.modelBinder.FindProjectionVisitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(includes) {\n        this._includes = includes;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.projectionExpression = this.projectionExpression || expression;\n        context && (context.projectionExpression = context.projectionExpression || expression);\n        this.Visit(expression.source, context);\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (!(expression.selector instanceof _index2.default.Expressions.ConstantExpression)) {\n            var selectorContext = {};\n            this.Visit(expression.selector.expression, selectorContext);\n\n            if (selectorContext.hasIncludeProjectionExpression) {\n                var include = this._includes.filter(function (it) {\n                    return it.name === selectorContext.includePath;\n                })[0];\n                if (include) {\n                    include.projectionExpression = selectorContext.includeProjectionExpression;\n                }\n\n                context && (context.hasIncludeProjectionExpression = true);\n            }\n        }\n    },\n    VisitFrameOperationExpression: function VisitFrameOperationExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var opDef = expression.operation.memberDefinition;\n        if (opDef && opDef.frameType === _index2.default.Expressions.ProjectionExpression) {\n            var paramCounter = 0;\n            var params = opDef.parameters || [{ name: \"@expression\" }];\n\n            var args = params.map(function (item, index) {\n                if (item.name === \"@expression\") {\n                    return expression.source;\n                } else {\n                    return expression.parameters[paramCounter++];\n                };\n            });\n\n            for (var i = 0; i < args.length; i++) {\n                var arg = args[i];\n\n                if (arg instanceof _index2.default.Expressions.ConstantExpression && arg.value instanceof _index2.default.Queryable) {\n                    var preparator = _index.Container.createQueryExpressionCreator(arg.value.entityContext);\n                    arg = preparator.Visit(arg.value.expression);\n                }\n\n                var visitor = new _index2.default.modelBinder.FindProjectionVisitor(this._inculdes);\n                var visitorContext = {};\n                var compiled = visitor.Visit(arg, visitorContext);\n\n                if (context && visitorContext.projectionExpression) {\n                    context.hasIncludeProjectionExpression = true;\n                    context.includeProjectionExpression = visitorContext.projectionExpression;\n                }\n            }\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        var propName = expression.associationInfo.FromPropertyName;\n\n        if (context) {\n            context.includePath = context.includePath ? context.includePath + '.' : \"\";\n            context.includePath += propName;\n        }\n    }\n});\n\n(0, _index.$C)('$data.modelBinder.ModelBinderConfigCompiler', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(query, includes, oDataProvider) {\n        this._query = query;\n        this._includes = includes;\n        this._isoDataProvider = oDataProvider || false;\n        this.depth = [];\n    },\n    VisitSingleExpression: function VisitSingleExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFindExpression: function VisitFindExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFirstExpression: function VisitFirstExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression) {\n        if (expression.cfg.returnType) {\n            var returnType = _index.Container.resolveType(expression.cfg.returnType);\n            if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Queryable) || returnType === _index2.default.Array) {\n                this._defaultModelBinder(expression);\n            } else {\n                var builder = _index.Container.createqueryBuilder();\n                builder.modelBinderConfig['$type'] = returnType;\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Entity)) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\n                } else {\n                    builder.modelBinderConfig['$type'] = returnType;\n                    builder.modelBinderConfig['$value'] = function (a, v) {\n                        return expression.cfg.serviceName in v ? v[expression.cfg.serviceName] : v.value;\n                    };\n                }\n                this.VisitExpression(expression, builder);\n                builder.resetModelBinderProperty();\n                this._query.modelBinderConfig = builder.modelBinderConfig;\n            }\n        }\n    },\n    VisitCountExpression: function VisitCountExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.type;\n        builder.modelBinderConfig['$value'] = expression.value;\n    },\n\n    VisitExpression: function VisitExpression(expression, builder) {\n        var projVisitor = _index.Container.createFindProjectionVisitor(this._includes);\n        var projContext = {};\n        projVisitor.Visit(expression, projContext);\n\n        if (projContext.projectionExpression) {\n            this.Visit(projContext.projectionExpression, builder);\n        } else {\n            this.DefaultSelection(builder, this._query.defaultType, this._includes, projContext.hasIncludeProjectionExpression);\n        }\n    },\n    _defaultModelBinder: function _defaultModelBinder(expression) {\n        var builder = _index.Container.createqueryBuilder();\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        if (this._isoDataProvider) {\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\n        }\n        builder.modelBinderConfig['$item'] = {};\n        builder.selectModelBinderProperty('$item');\n\n        this.VisitExpression(expression, builder);\n\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    _addPropertyToModelBinderConfig: function _addPropertyToModelBinderConfig(elementType, builder) {\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\n        if (elementType.memberDefinitions) {\n            elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\n                if (!storageModel || storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name]) {\n\n                    var type = _index.Container.resolveType(prop.dataType);\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\n                        //complex type\n                        builder.selectModelBinderProperty(prop.name);\n                        builder.modelBinderConfig['$type'] = type;\n                        if (this._isoDataProvider) {\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                        } else {\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                        }\n                        this._addPropertyToModelBinderConfig(type, builder);\n                        builder.popModelBinderProperty();\n                    } else {\n                        if (prop.key) {\n                            builder.addKeyField(prop.name);\n                        }\n                        if (prop.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                            builder.modelBinderConfig[prop.name] = { $source: '@odata.etag' };\n                        } else if (type === _index2.default.Array && prop.elementType) {\n                            builder.selectModelBinderProperty(prop.name);\n                            builder.modelBinderConfig['$type'] = type;\n                            if (this._isoDataProvider) {\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                            } else {\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                            }\n                            builder.selectModelBinderProperty('$item');\n                            var arrayElementType = _index.Container.resolveType(prop.elementType);\n                            builder.modelBinderConfig['$type'] = arrayElementType;\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\n                            builder.popModelBinderProperty();\n                            builder.popModelBinderProperty();\n                        } else {\n                            builder.modelBinderConfig[prop.name] = {\n                                $source: prop.name,\n                                $type: prop.type\n                            };\n                        }\n                    }\n                }\n            }, this);\n        } else {\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\n            if (builder._binderConfig.$type === _index2.default.Array) {\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\n                builder.modelBinderConfig = builder._binderConfig.$item;\n            }\n        }\n        if (storageModel) {\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\n        }\n    },\n    _addComplexTypeProperties: function _addComplexTypeProperties(complexTypes, builder) {\n        complexTypes.forEach(function (ct) {\n            if (ct.ToType !== _index2.default.Array) {\n                builder.selectModelBinderProperty(ct.FromPropertyName);\n                builder.modelBinderConfig['$type'] = ct.ToType;\n                if (this._isoDataProvider) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\n                } else {\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\n                }\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\n\n                builder.popModelBinderProperty();\n            } else {\n                var dt = ct.ToType;\n                var et = _index.Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\n                if (dt === _index2.default.Array && et && et.isAssignableTo && et.isAssignableTo(_index2.default.Entity)) {\n                    config = {\n                        $type: _index2.default.Array,\n                        $selector: 'json:' + ct.FromPropertyName,\n                        $item: {\n                            $type: et\n                        }\n                    };\n                    var md = et.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < md.length; i++) {\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\n                    }\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\n                } else {\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\n                        $type: ct.ToType,\n                        $source: ct.FromPropertyName\n                    };\n                }\n            }\n        }, this);\n    },\n    DefaultSelection: function DefaultSelection(builder, type, allIncludes, custom) {\n        var _this = this;\n\n        //no projection, get all item from entitySet\n        builder.modelBinderConfig['$type'] = custom ? _index2.default.Object : type;\n\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\n        this._addPropertyToModelBinderConfig(type, builder);\n        if (allIncludes) {\n            (function () {\n                var excludeDeepInclude = [];\n                allIncludes.forEach(function (include) {\n                    if (excludeDeepInclude.some(function (incName) {\n                        return include.name.length > incName.length && include.name.substr(0, incName.length) === incName;\n                    })) {\n                        return;\n                    }\n                    this.depth.push(include.name);\n\n                    var includes = include.name.split('.');\n                    var association = null;\n                    var tmpStorageModel = storageModel;\n                    var itemCount = 0;\n                    for (var i = 0; i < includes.length; i++) {\n                        if (builder.modelBinderConfig.$item) {\n                            builder.selectModelBinderProperty('$item');\n                            itemCount++;\n                        }\n                        builder.selectModelBinderProperty(includes[i]);\n                        association = tmpStorageModel.Associations[includes[i]];\n                        tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\n                    }\n                    if (this._isoDataProvider) {\n                        builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\n                    } else {\n                        builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\n                    }\n                    if (association.ToMultiplicity === '*') {\n                        builder.modelBinderConfig['$type'] = _index2.default.Array;\n                        builder.selectModelBinderProperty('$item');\n                        builder.modelBinderConfig['$type'] = include.type;\n                        if (include.projectionExpression) {\n                            excludeDeepInclude.push(include.name);\n                            this.Visit(include.projectionExpression, builder);\n                        } else {\n                            this._addPropertyToModelBinderConfig(include.type, builder);\n                        }\n                        builder.popModelBinderProperty();\n                    } else {\n                        builder.modelBinderConfig['$type'] = include.type;\n                        if (include.projectionExpression) {\n                            excludeDeepInclude.push(include.name);\n                            this.Visit(include.projectionExpression, builder);\n                        } else {\n                            this._addPropertyToModelBinderConfig(include.type, builder);\n                        }\n                    }\n\n                    for (var i = 0; i < includes.length + itemCount; i++) {\n                        builder.popModelBinderProperty();\n                    }\n                    this.depth.pop();\n                }, _this);\n            })();\n        }\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, builder) {\n        this.hasProjection = true;\n        this.Visit(expression.selector, builder);\n\n        if (expression.selector && expression.selector.expression instanceof _index2.default.Expressions.ObjectLiteralExpression) {\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || _index2.default.Object;\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, builder) {\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n    },\n    VisitEntityAsProjection: function VisitEntityAsProjection(expression, builder) {\n        this.mapping = '';\n        this.Visit(expression.expression, builder);\n        this.depth.push(this.mapping);\n        this.mapping = this.depth.join('.');\n\n        var includes;\n        var currentInclude;\n        if (this.mapping && this._includes instanceof Array) {\n            includes = this._includes.filter(function (inc) {\n                return inc.name.indexOf(this.mapping + '.') === 0;\n            }, this);\n            includes = includes.map(function (inc) {\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\n            }, this);\n\n            // if (includes.length > 0){\n            //     this.DefaultSelection(builder, expression.expression.entityType, includes);\n            //     //console.warn('WARN: include for mapped properties is not supported!');\n            // }\n\n            currentInclude = this._includes.filter(function (inc) {\n                return inc.name === this.mapping;\n            }, this)[0];\n        }\n\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression) {\n            if (currentInclude && currentInclude.projectionExpression) {\n                var tmpIncludes = this._includes;\n                this._includes = includes;\n                var tmpDepth = this.depth;\n                this.depth = [];\n                this.Visit(currentInclude.projectionExpression, builder);\n                this._includes = tmpIncludes;\n                this.depth = tmpDepth;\n            } else {\n                this.DefaultSelection(builder, expression.expression.entityType, includes);\n            }\n        } else if (expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            builder.modelBinderConfig.$type = _index2.default.Array;\n            builder.modelBinderConfig.$item = {};\n            builder.selectModelBinderProperty('$item');\n            if (currentInclude && currentInclude.projectionExpression) {\n                var tmpIncludes = this._includes;\n                this._includes = includes;\n                var tmpDepth = this.depth;\n                this.depth = [];\n                this.Visit(currentInclude.projectionExpression, builder);\n                this._includes = tmpIncludes;\n                this.depth = tmpDepth;\n            } else {\n                this.DefaultSelection(builder, expression.expression.elementType, includes);\n            }\n            builder.popModelBinderProperty();\n        }\n        this.depth.pop();\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\n            this._addPropertyToModelBinderConfig(_index.Container.resolveType(expression.memberDefinition.type), builder);\n        } else {\n            if (!(builder.modelBinderConfig.$type && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo(_index2.default.Entity))) builder.modelBinderConfig['$source'] = expression.memberName;\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, builder) {\n        if (expression.source instanceof _index2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, builder);\n            this.Visit(expression.selector, builder);\n        }\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\n            }\n        }\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, builder) {\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\n            }\n        }\n\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = _index2.default.Object;\n        expression.members.forEach(function (of) {\n            this.Visit(of, builder);\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, builder) {\n        builder.selectModelBinderProperty(expression.fieldName);\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n        builder.popModelBinderProperty();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],114:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Transaction', null, null, {\n    constructor: function constructor() {\n        this._objectId = new Date().getTime();\n        _index2.default.Trace.log(\"create: \", this._objectId);\n\n        this.oncomplete = new _index2.default.Event(\"oncomplete\", this);\n        this.onerror = new _index2.default.Event(\"onerror\", this);\n    },\n    abort: function abort() {\n        _index.Guard.raise(new _index.Exception('Not Implemented', 'Not Implemented', arguments));\n    },\n\n    _objectId: { type: _index2.default.Integer },\n    transaction: { type: _index2.default.Object },\n\n    oncomplete: { type: _index2.default.Event },\n    onerror: { type: _index2.default.Event }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31}],115:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.Defaults', null, null, null, {\n    validators: {\n        value: {\n            required: function required(value, definedValue) {\n                return !_index.Guard.isNullOrUndefined(value);\n            },\n            customValidator: function customValidator(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true;\n            },\n\n            minValue: function minValue(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value >= definedValue;\n            },\n            maxValue: function maxValue(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value <= definedValue;\n            },\n\n            minLength: function minLength(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length >= definedValue;\n            },\n            maxLength: function maxLength(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length <= definedValue;\n            },\n            length: function length(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length == definedValue;\n            },\n            regex: function regex(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.match(typeof definedValue === 'string' ? new RegExp(definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === definedValue.length - 1 ? definedValue.slice(1, -1) : definedValue) : definedValue);\n            }\n        }\n    },\n\n    _getGroupValidations: function _getGroupValidations(validations) {\n        var validators = {};\n        if (Array.isArray(validations)) {\n            for (var i = 0; i < validations.length; i++) {\n                var validator = validations[i];\n                if (typeof this.validators[validator] === 'function') {\n                    validators[validator] = this.validators[validator];\n                }\n            }\n        }\n\n        return validators;\n    }\n});\n\n_index2.default.Class.define('$data.Validation.EntityValidation', _index2.default.Validation.EntityValidationBase, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n\n        var errors = [];\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\n        }, this);\n        return errors;\n    },\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition, newValue, valueNotSet) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        var errors = [];\n        var resolvedType = _index.Container.resolveType(memberDefinition.dataType);\n        var typeName = _index.Container.resolveName(resolvedType);\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\n\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo(_index2.default.Entity)) {\n            typeName = _index2.default.Entity.fullName;\n        }\n\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\n        return errors;\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        var value;\n        if (memberDefinition[validationName] && memberDefinition[validationName].value) value = memberDefinition[validationName].value;else value = memberDefinition[validationName];\n\n        if (this.convertableValidation[validationName]) {\n            var typeToConvert;\n            if (this.convertableValidation[validationName] === true) {\n                typeToConvert = memberDefinition.type;\n            } else {\n                typeToConvert = this.convertableValidation[validationName];\n            }\n\n            if (typeToConvert) value = _index.Container.convertTo(value, typeToConvert, memberDefinition.elementType);\n        }\n\n        return value;\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        var eMessage = defaultMessage;\n        if (_typeof(memberDefinition[validationName]) == \"object\" && memberDefinition[validationName].message) eMessage = memberDefinition[validationName].message;else if (memberDefinition.errorMessage) eMessage = memberDefinition.errorMessage;\n\n        return eMessage;\n    },\n    createValidationError: function createValidationError(memberDefinition, validationName, defaultMessage) {\n        return new _index2.default.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\n    },\n\n    convertableValidation: {\n        value: {\n            required: '$data.Boolean',\n            minValue: true,\n            maxValue: true,\n            minLength: '$data.Integer',\n            maxLength: '$data.Integer',\n            length: '$data.Integer'\n        }\n\n    },\n    supportedValidations: {\n        value: {\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.ObjectID': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Byte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.SByte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Decimal': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Float': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Number': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int16': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Integer': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int32': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int64': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.String': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\n            '$data.Date': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.DateTimeOffset': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Time': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Day': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Duration': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Boolean': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Array': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\n            '$data.Object': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Guid': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Blob': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\n            '$data.GeographyPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\n        }\n    },\n\n    fieldValidate: function fieldValidate(entity, memberDefinition, value, errors, validationTypeName) {\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        ///<param name=\"value\" type=\"Object\" />\n        ///<param name=\"errors\" type=\"Array\" />\n        ///<param name=\"validationTypeName\" type=\"string\" />\n        if (entity.entityState == _index2.default.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0) return;\n\n        var validatonGroup = this.supportedValidations[validationTypeName];\n        if (validatonGroup) {\n            var validations = Object.keys(validatonGroup);\n            validations.forEach(function (validation) {\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation))) errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\n            }, this);\n\n            if (validationTypeName === _index2.default.Entity.fullName && value instanceof _index2.default.Entity && !value.isValid()) {\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\n            }\n        }\n    }\n\n}, null);\n\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidation();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],116:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.ValidationError', null, null, {\n    constructor: function constructor(message, propertyDefinition, type) {\n        ///<param name=\"message\" type=\"string\" />\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\n\n        this.Message = message;\n        this.PropertyDefinition = propertyDefinition;\n        this.Type = type;\n    },\n    Type: { dataType: 'string' },\n    Message: { dataType: \"string\" },\n    PropertyDefinition: { dataType: _index2.default.MemberDefinition }\n}, null);\n\n_index2.default.Class.define('$data.Validation.EntityValidationBase', null, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        return [];\n    },\n\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        return [];\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\n_index2.default.Validation = _index2.default.Validation || {};\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidationBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":31}],117:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _EntityValidationBase = require('./Validation/EntityValidationBase.js');\n\nvar _EntityValidationBase2 = _interopRequireDefault(_EntityValidationBase);\n\nvar _EntityValidation = require('./Validation/EntityValidation.js');\n\nvar _EntityValidation2 = _interopRequireDefault(_EntityValidation);\n\nvar _ChangeDistributorBase = require('./Notifications/ChangeDistributorBase.js');\n\nvar _ChangeDistributorBase2 = _interopRequireDefault(_ChangeDistributorBase);\n\nvar _ChangeCollectorBase = require('./Notifications/ChangeCollectorBase.js');\n\nvar _ChangeCollectorBase2 = _interopRequireDefault(_ChangeCollectorBase);\n\nvar _ChangeDistributor = require('./Notifications/ChangeDistributor.js');\n\nvar _ChangeDistributor2 = _interopRequireDefault(_ChangeDistributor);\n\nvar _ChangeCollector = require('./Notifications/ChangeCollector.js');\n\nvar _ChangeCollector2 = _interopRequireDefault(_ChangeCollector);\n\nvar _Transaction = require('./Transaction.js');\n\nvar _Transaction2 = _interopRequireDefault(_Transaction);\n\nvar _Access = require('./Access.js');\n\nvar _Access2 = _interopRequireDefault(_Access);\n\nvar _Entity = require('./Entity.js');\n\nvar _Entity2 = _interopRequireDefault(_Entity);\n\nvar _Enum = require('./Enum.js');\n\nvar _Enum2 = _interopRequireDefault(_Enum);\n\nvar _RelatedEntityProxy = require('./RelatedEntityProxy.js');\n\nvar _RelatedEntityProxy2 = _interopRequireDefault(_RelatedEntityProxy);\n\nvar _EntityContext = require('./EntityContext.js');\n\nvar _EntityContext2 = _interopRequireDefault(_EntityContext);\n\nvar _QueryProvider = require('./QueryProvider.js');\n\nvar _QueryProvider2 = _interopRequireDefault(_QueryProvider);\n\nvar _ModelBinder = require('./ModelBinder.js');\n\nvar _ModelBinder2 = _interopRequireDefault(_ModelBinder);\n\nvar _QueryBuilder = require('./QueryBuilder.js');\n\nvar _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);\n\nvar _Query = require('./Query.js');\n\nvar _Query2 = _interopRequireDefault(_Query);\n\nvar _Queryable = require('./Queryable.js');\n\nvar _Queryable2 = _interopRequireDefault(_Queryable);\n\nvar _EntitySet = require('./EntitySet.js');\n\nvar _EntitySet2 = _interopRequireDefault(_EntitySet);\n\nvar _EntityState = require('./EntityState.js');\n\nvar _EntityState2 = _interopRequireDefault(_EntityState);\n\nvar _EntityAttachModes = require('./EntityAttachModes.js');\n\nvar _EntityAttachModes2 = _interopRequireDefault(_EntityAttachModes);\n\nvar _EntityStateManager = require('./EntityStateManager.js');\n\nvar _EntityStateManager2 = _interopRequireDefault(_EntityStateManager);\n\nvar _ItemStore = require('./ItemStore.js');\n\nvar _ItemStore2 = _interopRequireDefault(_ItemStore);\n\nvar _StorageProviderLoader = require('./StorageProviderLoader.js');\n\nvar _StorageProviderLoader2 = _interopRequireDefault(_StorageProviderLoader);\n\nvar _StorageProviderBase = require('./StorageProviderBase.js');\n\nvar _StorageProviderBase2 = _interopRequireDefault(_StorageProviderBase);\n\nvar _ServiceOperation = require('./ServiceOperation.js');\n\nvar _ServiceOperation2 = _interopRequireDefault(_ServiceOperation);\n\nvar _EntityWrapper = require('./EntityWrapper.js');\n\nvar _EntityWrapper2 = _interopRequireDefault(_EntityWrapper);\n\nvar _jQueryAjaxWrapper = require('./Ajax/jQueryAjaxWrapper.js');\n\nvar _jQueryAjaxWrapper2 = _interopRequireDefault(_jQueryAjaxWrapper);\n\nvar _WinJSAjaxWrapper = require('./Ajax/WinJSAjaxWrapper.js');\n\nvar _WinJSAjaxWrapper2 = _interopRequireDefault(_WinJSAjaxWrapper);\n\nvar _ExtJSAjaxWrapper = require('./Ajax/ExtJSAjaxWrapper.js');\n\nvar _ExtJSAjaxWrapper2 = _interopRequireDefault(_ExtJSAjaxWrapper);\n\nvar _AjaxStub = require('./Ajax/AjaxStub.js');\n\nvar _AjaxStub2 = _interopRequireDefault(_AjaxStub);\n\nvar _modelBinderConfigCompiler = require('./StorageProviders/modelBinderConfigCompiler.js');\n\nvar _modelBinderConfigCompiler2 = _interopRequireDefault(_modelBinderConfigCompiler);\n\nvar _AuthenticationBase = require('./Authentication/AuthenticationBase.js');\n\nvar _AuthenticationBase2 = _interopRequireDefault(_AuthenticationBase);\n\nvar _Anonymous = require('./Authentication/Anonymous.js');\n\nvar _Anonymous2 = _interopRequireDefault(_Anonymous);\n\nvar _FacebookAuth = require('./Authentication/FacebookAuth.js');\n\nvar _FacebookAuth2 = _interopRequireDefault(_FacebookAuth);\n\nvar _BasicAuth = require('./Authentication/BasicAuth.js');\n\nvar _BasicAuth2 = _interopRequireDefault(_BasicAuth);\n\nvar _jaydataPromiseHandler = require('jaydata-promise-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import Promise from './Promise.js';\n\n_jaydataPromiseHandler.PromiseHandler.use(_index2.default);\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\n//import deferred from '../JayDataModules/deferred.js';\n//import JayStorm from './JayStorm.js';\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":31,\"./Access.js\":34,\"./Ajax/AjaxStub.js\":35,\"./Ajax/ExtJSAjaxWrapper.js\":36,\"./Ajax/WinJSAjaxWrapper.js\":37,\"./Ajax/jQueryAjaxWrapper.js\":38,\"./Authentication/Anonymous.js\":39,\"./Authentication/AuthenticationBase.js\":40,\"./Authentication/BasicAuth.js\":41,\"./Authentication/FacebookAuth.js\":42,\"./Entity.js\":43,\"./EntityAttachModes.js\":44,\"./EntityContext.js\":45,\"./EntitySet.js\":46,\"./EntityState.js\":47,\"./EntityStateManager.js\":48,\"./EntityWrapper.js\":49,\"./Enum.js\":50,\"./Expressions/index.js\":98,\"./ItemStore.js\":99,\"./ModelBinder.js\":100,\"./Notifications/ChangeCollector.js\":101,\"./Notifications/ChangeCollectorBase.js\":102,\"./Notifications/ChangeDistributor.js\":103,\"./Notifications/ChangeDistributorBase.js\":104,\"./Query.js\":105,\"./QueryBuilder.js\":106,\"./QueryProvider.js\":107,\"./Queryable.js\":108,\"./RelatedEntityProxy.js\":109,\"./ServiceOperation.js\":110,\"./StorageProviderBase.js\":111,\"./StorageProviderLoader.js\":112,\"./StorageProviders/modelBinderConfigCompiler.js\":113,\"./Transaction.js\":114,\"./Validation/EntityValidation.js\":115,\"./Validation/EntityValidationBase.js\":116,\"jaydata-promise-handler\":9}],\"jaydata/core\":[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = require('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"./JaySvcUtil/index.js\":16,\"./TypeSystem/index.js\":31,\"./Types/Expressions/index.js\":98,\"./Types/index.js\":117}]},{},[])\n\n\t/*var $data = require('jaydata/core');\r\n\t$data.version = 'JayData 1.5.1';\r\n\t$data.versionNumber = '1.5.1';*/\r\n\r\n\tif (typeof window !== \"undefined\"){\r\n\t\twindow.require = require;\r\n\t}\r\n\r\n\tif (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n\t\tmodule.exports = require('jaydata/core')\r\n\t} else if (typeof define === \"function\" && define.amd) {\r\n\t\tvar interopRequire = require;\r\n\t\tdefine([], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\r\n\t\tdefine('jaydata/core', [], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\t} else {\r\n\t\tvar g;\r\n\t\tif (typeof window !== \"undefined\") {\r\n\t\t\tg = window\r\n\t\t} else if (typeof global !== \"undefined\") {\r\n\t\t\tg = global\r\n\t\t} else if (typeof self !== \"undefined\") {\r\n\t\t\tg = self\r\n\t\t} else {\r\n\t\t\tg = this\r\n\t\t}\r\n\t\tg.$data = require('jaydata/core');\r\n\t}\r\n})();\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar pp = _state.Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n  var key = prop.key;var name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return;\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raiseRecoverable(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === _tokentype.types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield();\n\n  var validateDestructuring = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n    validateDestructuring = true;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  if (this.eat(_tokentype.types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(_tokentype.types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === _tokentype.types.logicalOR || this.type === _tokentype.types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\npp.buildBinary = function (startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      expr = undefined;\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === _tokentype.types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");else sawUnary = true;\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr);\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(_tokentype.types.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);else return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (this.eat(_tokentype.types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(_tokentype.types.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(_tokentype.types.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(_tokentype.types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === _tokentype.types.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refDestructuringErrors) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case _tokentype.types._super:\n      if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n\n    case _tokentype.types._this:\n      var type = this.type === _tokentype.types._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _tokentype.types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== _tokentype.types.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case _tokentype.types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case _tokentype.types.num:case _tokentype.types.string:\n      return this.parseLiteral(this.value);\n\n    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:\n      node = this.startNode();\n      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _tokentype.types.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case _tokentype.types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case _tokentype.types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _tokentype.types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case _tokentype.types._new:\n      return this.parseNew();\n\n    case _tokentype.types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(_tokentype.types.parenL);\n  var val = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== _tokentype.types.parenR) {\n      first ? first = false : this.expect(_tokentype.types.comma);\n      if (this.type === _tokentype.types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === _tokentype.types.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(_tokentype.types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction) this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === _tokentype.types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(_tokentype.types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(_tokentype.types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n  if (this.eat(_tokentype.types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");else this.raiseRecoverable(start, \"setter should have exactly one param\");\n    }\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) || this.inGenerator && prop.key.name == \"yield\") this.raiseRecoverable(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_tokentype.types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(_tokentype.types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode(),\n      oldInGen = this.inGenerator;\n  this.inGenerator = isGenerator;\n  this.initFunction(node);\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);\n  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n  this.parseFunctionBody(node, false);\n  this.inGenerator = oldInGen;\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  var oldInGen = this.inGenerator;\n  this.inGenerator = false;\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  this.inGenerator = oldInGen;\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldLabels = this.labels;\n    this.inFunction = true;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction) {\n    this.checkParams(node);\n  }\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp.checkParams = function (node) {\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) {\n    this.checkLVal(node.params[i], true, nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this.lastTokStart;\n      }\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    var elt = undefined;\n    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === _tokentype.types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    if (!liberal && this.inGenerator && this.value === \"yield\") this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(_tokentype.types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n},{\"./state\":10,\"./tokentype\":14}],2:[function(_dereq_,module,exports){\n// Reserved word lists for various dialects of the language\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierChar = isIdentifierChar;\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  7: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞭꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣣ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 287, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 1288, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 168, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 3617, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\n\nvar _state = _dereq_(\"./state\");\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\n_dereq_(\"./location\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\n\nvar _options = _dereq_(\"./options\");\n\nexports.defaultOptions = _options.defaultOptions;\n\nvar _locutil = _dereq_(\"./locutil\");\n\nexports.Position = _locutil.Position;\nexports.SourceLocation = _locutil.SourceLocation;\nexports.getLineInfo = _locutil.getLineInfo;\n\nvar _node = _dereq_(\"./node\");\n\nexports.Node = _node.Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\n\nvar _tokenize = _dereq_(\"./tokenize\");\n\nexports.Token = _tokenize.Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"3.0.4\";\n\nexports.version = version;\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new _state.Parser(options, input).parse();\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new _state.Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new _state.Parser(options, input);\n}\n\n},{\"./expression\":1,\"./identifier\":2,\"./location\":4,\"./locutil\":5,\"./lval\":6,\"./node\":7,\"./options\":8,\"./parseutil\":9,\"./state\":10,\"./statement\":11,\"./tokencontext\":12,\"./tokenize\":13,\"./tokentype\":14,\"./whitespace\":16}],4:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar pp = _state.Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = _locutil.getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.raiseRecoverable = pp.raise;\n\npp.curPosition = function () {\n  if (this.options.locations) {\n    return new _locutil.Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\n},{\"./locutil\":5,\"./state\":10}],5:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getLineInfo = getLineInfo;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nexports.Position = Position;\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n;\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\n},{\"./whitespace\":16}],6:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _util = _dereq_(\"./util\");\n\nvar pp = _state.Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          // falls through to AssignmentPattern\n        } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\") this.raise(node.right.start, \"Yield expression cannot be a default value\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function (allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case _tokentype.types.name:\n      return this.parseIdent();\n\n    case _tokentype.types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(_tokentype.types.comma);\n    if (allowEmpty && this.type === _tokentype.types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === _tokentype.types.ellipsis) {\n      var rest = this.parseRest(allowNonIdent);\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (_util.has(checkClashes, expr.name)) this.raiseRecoverable(expr.start, \"Argument name clash\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./util\":15}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);\n  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges) this.range = [pos, 0];\n}\n\n// Start an AST node, attaching a start offset.\n\n;\n\nexports.Node = Node;\nvar pp = _state.Parser.prototype;\n\npp.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n}\n\npp.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\n},{\"./locutil\":5,\"./state\":10}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getOptions = getOptions;\n\nvar _util = _dereq_(\"./util\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features. The default is 6.\n  ecmaVersion: 6,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\nexports.defaultOptions = defaultOptions;\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n  if (_util.isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./locutil\":5,\"./util\":15}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.raw.slice(1, -1) === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === _tokentype.types.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(_tokentype.types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\npp.checkPatternErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Trailing comma is not permitted in destructuring patterns\");\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _options = _dereq_(\"./options\");\n\n// Registered plugins\nvar plugins = {};\n\nexports.plugins = plugins;\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = (function () {\n  function Parser(options, input, startPos) {\n    _classCallCheck(this, Parser);\n\n    this.options = options = _options.getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = options.allowReserved ? \"\" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\");\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + _identifier.reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + _identifier.reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Load plugins\n    this.loadPlugins(options.plugins);\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = _tokentype.types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\";\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false;\n    // Labels in scope.\n    this.labels = [];\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    for (var _name in pluginConfigs) {\n      var plugin = plugins[_name];\n      if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n      plugin(this, pluginConfigs[_name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  return Parser;\n})();\n\nexports.Parser = Parser;\n\n},{\"./identifier\":2,\"./options\":8,\"./tokentype\":14,\"./whitespace\":16}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar pp = _state.Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== _tokentype.types.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\npp.isLet = function () {\n  if (this.type !== _tokentype.types.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false;\n  _whitespace.skipWhiteSpace.lastIndex = this.pos;\n  var skip = _whitespace.skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length,\n      nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh == 123) return true; // '{' and '['\n  if (_identifier.isIdentifierStart(nextCh, true)) {\n    for (var pos = next + 1; _identifier.isIdentifierChar(this.input.charCodeAt(pos, true)); ++pos) {}\n    var ident = this.input.slice(next, pos);\n    if (!this.isKeyword(ident)) return true;\n  }\n  return false;\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode(),\n      kind = undefined;\n\n  if (this.isLet()) {\n    starttype = _tokentype.types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokentype.types._break:case _tokentype.types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case _tokentype.types._debugger:\n      return this.parseDebuggerStatement(node);\n    case _tokentype.types._do:\n      return this.parseDoStatement(node);\n    case _tokentype.types._for:\n      return this.parseForStatement(node);\n    case _tokentype.types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case _tokentype.types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case _tokentype.types._if:\n      return this.parseIfStatement(node);\n    case _tokentype.types._return:\n      return this.parseReturnStatement(node);\n    case _tokentype.types._switch:\n      return this.parseSwitchStatement(node);\n    case _tokentype.types._throw:\n      return this.parseThrowStatement(node);\n    case _tokentype.types._try:\n      return this.parseTryStatement(node);\n    case _tokentype.types._const:case _tokentype.types._var:\n      kind = kind || this.value;\n      if (!declaration && kind != \"var\") this.unexpected();\n      return this.parseVarStatement(node, kind);\n    case _tokentype.types._while:\n      return this.parseWhileStatement(node);\n    case _tokentype.types._with:\n      return this.parseWithStatement(node);\n    case _tokentype.types.braceL:\n      return this.parseBlock();\n    case _tokentype.types.semi:\n      return this.parseEmptyStatement(node);\n    case _tokentype.types._export:\n    case _tokentype.types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === _tokentype.types.name && expr.type === \"Identifier\" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(_tokentype.types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(_tokentype.types.parenL);\n  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);\n  var isLet = this.isLet();\n  if (this.type === _tokentype.types._var || this.type === _tokentype.types._const || isLet) {\n    var _init = this.startNode(),\n        kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(_init, true, kind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(kind !== \"var\" && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(_tokentype.types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {\n    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {\n      var isCase = this.type === _tokentype.types._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(_tokentype.types.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === _tokentype.types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(_tokentype.types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === _tokentype.types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label = this.labels[i];\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start;\n      label.kind = kind;\n    } else break;\n  }\n  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(_tokentype.types.semi);\n  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();\n  this.expect(_tokentype.types.semi);\n  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === _tokentype.types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(_tokentype.types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === _tokentype.types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(_tokentype.types.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);\n  var oldInGen = this.inGenerator;\n  this.inGenerator = node.generator;\n  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  this.inGenerator = oldInGen;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (this.eat(_tokentype.types.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(_tokentype.types.star);\n    var isMaybeStatic = this.type === _tokentype.types.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== _tokentype.types.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(_tokentype.types.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== _tokentype.types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");else this.raiseRecoverable(start, \"setter should have exactly one param\");\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raise(method.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(_tokentype.types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(_tokentype.types._default)) {\n    // export default ...\n    var parens = this.type == _tokentype.types.parenL;\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (!parens && (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\")) {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword || this.isLet();\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === _tokentype.types._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === _tokentype.types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === _tokentype.types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(_tokentype.types.comma)) return nodes;\n  }\n  if (this.type === _tokentype.types.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      node.local = node.imported;\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start);\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\");\n    }\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./identifier\":2,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],12:[function(_dereq_,module,exports){\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nexports.TokContext = TokContext;\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = _state.Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  if (prevType === _tokentype.types.colon) {\n    var _parent = this.curContext();\n    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;\n  }\n  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;\n  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\n_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\n_tokentype.types.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\n_tokentype.types._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\n_tokentype.types.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n}\n\n// ## Tokenizer\n\n;\n\nexports.Token = Token;\nvar pp = _state.Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === _tokentype.types.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    _whitespace.lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n      case 32:case 160:\n        // ' '\n        ++this.pos;\n        break;\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10:case 8232:case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break;\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n          case 47:\n            this.skipLineComment(2);\n            break;\n          default:\n            break loop;\n        }\n        break;\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(_tokentype.types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(_tokentype.types.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.slash, 1);\n};\n\npp.readToken_mult_modulo_exp = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? _tokentype.types.star : _tokentype.types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && next === 42) {\n    ++size;\n    tokentype = _tokentype.types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n  return this.finishOp(tokentype, size);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(_tokentype.types.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n    return this.finishOp(_tokentype.types.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = 2;\n  return this.finishOp(_tokentype.types.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(_tokentype.types.arrow);\n  }\n  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(_tokentype.types.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(_tokentype.types.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(_tokentype.types.semi);\n    case 44:\n      ++this.pos;return this.finishToken(_tokentype.types.comma);\n    case 91:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(_tokentype.types.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(_tokentype.types.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(_tokentype.types.colon);\n    case 63:\n      ++this.pos;return this.finishToken(_tokentype.types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(_tokentype.types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo_exp(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(_tokentype.types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"￿\", \"u\");\n\npp.readRegexp = function () {\n  var _this = this;\n\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (_whitespace.lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n        code = Number(\"0x\" + code);\n        if (code > 0x10FFFF) _this.raise(start + offset + 3, \"Code point out of bounds\");\n        return \"x\";\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n        else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (_whitespace.isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(_tokentype.types.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === _tokentype.types.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(_tokentype.types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(_tokentype.types.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(_tokentype.types.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (_whitespace.isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n    case 110:\n      return \"\\n\"; // 'n' -> '\\n'\n    case 114:\n      return \"\\r\"; // 'r' -> '\\r'\n    case 120:\n      return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117:\n      return codePointToString(this.readCodePoint()); // 'u'\n    case 116:\n      return \"\\t\"; // 't' -> '\\t'\n    case 98:\n      return \"\\b\"; // 'b' -> '\\b'\n    case 118:\n      return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102:\n      return \"\\f\"; // 'f' -> '\\f'\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;++this.curLine;\n      }\n      return \"\";\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\");\n        }\n        this.pos += octalStr.length - 1;\n        return String.fromCharCode(octal);\n      }\n      return String.fromCharCode(ch);\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n;\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (_identifier.isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = _tokentype.types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":2,\"./locutil\":5,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],14:[function(_dereq_,module,exports){\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", { beforeExpr: true })\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\", beforeExpr);\nkw(\"do\", { isLoop: true, beforeExpr: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.isArray = isArray;\nexports.has = has;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],16:[function(_dereq_,module,exports){\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isNewLine = isNewLine;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nexports.skipWhiteSpace = skipWhiteSpace;\n\n},{}]},{},[3])(3)\n});","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var containsField = function (obj, field, cb) {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field]);\r\n    }\r\n};\r\nvar parsebool = function (b, d) {\r\n    if (\"boolean\" === typeof b) {\r\n        return b;\r\n    }\r\n    switch (b) {\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return d;\r\n    }\r\n};\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\r\nvar Metadata = (function () {\r\n    function Metadata($data, options, metadata) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.metadata = metadata;\r\n        this.options.container = this.$data.Container; //this.options.container || $data.createContainer()\r\n    }\r\n    Metadata.prototype._getMaxValue = function (maxValue) {\r\n        if (\"number\" === typeof maxValue)\r\n            return maxValue;\r\n        if (\"max\" === maxValue)\r\n            return Number.MAX_VALUE;\r\n        return parseInt(maxValue);\r\n    };\r\n    Metadata.prototype.createTypeDefinition = function (propertySchema, definition) {\r\n        var _this = this;\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.type = _this.options.collectionBaseType || 'Array';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.type = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createReturnTypeDefinition = function (propertySchema, definition) {\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.returnType = '$data.Queryable';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.returnType = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createProperty = function (entitySchema, propertySchema) {\r\n        var _this = this;\r\n        var self = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"maxLength\", function (v) {\r\n            definition.maxLength = _this._getMaxValue(v);\r\n        });\r\n        containsField(entitySchema, \"key\", function (keys) {\r\n            if (keys.propertyRefs.some(function (pr) { return pr.name === propertySchema.name; })) {\r\n                definition.key = true;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"concurrencyMode\", function (v) {\r\n            definition.concurrencyMode = self.$data.ConcurrencyMode[v];\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createNavigationProperty = function (entitySchema, propertySchema) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"partner\", function (p) {\r\n            definition.inverseProperty = p;\r\n        });\r\n        if (!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound';\r\n        }\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createEntityDefinition = function (entitySchema) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entitySchema));\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entitySchema));\r\n        props = props.concat(navigationProps);\r\n        var result = props.reduce(function (p, c) {\r\n            p[c.name] = c.definition;\r\n            return p;\r\n        }, {});\r\n        return result;\r\n    };\r\n    Metadata.prototype.createEntityType = function (entitySchema, namespace) {\r\n        var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType) || this.$data.Entity;\r\n        var definition = this.createEntityDefinition(entitySchema);\r\n        var entityFullName = namespace + \".\" + entitySchema.name;\r\n        var staticDefinition = {};\r\n        containsField(entitySchema, \"openType\", function (v) {\r\n            if (parsebool(v, false)) {\r\n                staticDefinition.openType = { value: true };\r\n            }\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: entityFullName,\r\n            baseType: baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition: definition,\r\n            type: 'entity'\r\n        };\r\n    };\r\n    Metadata.prototype.createEnumOption = function (entitySchema, propertySchema, i) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        };\r\n        containsField(propertySchema, \"value\", function (value) {\r\n            var v = +value;\r\n            if (!isNaN(v)) {\r\n                definition.value = v;\r\n            }\r\n        });\r\n        return definition;\r\n    };\r\n    Metadata.prototype.createEnumDefinition = function (enumSchema) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumSchema));\r\n        return props;\r\n    };\r\n    Metadata.prototype.createEnumType = function (enumSchema, namespace) {\r\n        var self = this;\r\n        var definition = this.createEnumDefinition(enumSchema);\r\n        var enumFullName = namespace + \".\" + enumSchema.name;\r\n        return {\r\n            namespace: namespace,\r\n            typeName: enumFullName,\r\n            baseType: self.$data.Enum,\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition: definition,\r\n            type: 'enum'\r\n        };\r\n    };\r\n    Metadata.prototype.createEntitySetProperty = function (entitySetSchema, contextSchema) {\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType || '$data.EntitySet',\r\n                elementType: t\r\n            }\r\n        };\r\n        return prop;\r\n    };\r\n    Metadata.prototype.indexBy = function (fieldName, pick) {\r\n        return [function (p, c) { p[c[fieldName]] = c[pick]; return p; }, {}];\r\n    };\r\n    Metadata.prototype.createContextDefinition = function (contextSchema, namespace) {\r\n        var _this = this;\r\n        var props = (contextSchema.entitySets || []).map(function (es) { return _this.createEntitySetProperty(es, contextSchema); });\r\n        var result = props.reduce.apply(props, this.indexBy(\"name\", \"definition\"));\r\n        return result;\r\n    };\r\n    Metadata.prototype.createContextType = function (contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\");\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace);\r\n        var baseType = this.options.contextType || this.$data.EntityContext;\r\n        var typeName = namespace + \".\" + contextSchema.name;\r\n        var contextImportMethods = [];\r\n        contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.actionImports);\r\n        contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.functionImports);\r\n        return {\r\n            namespace: namespace,\r\n            typeName: typeName,\r\n            baseType: baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition: definition,\r\n            type: 'context',\r\n            contextImportMethods: contextImportMethods\r\n        };\r\n    };\r\n    Metadata.prototype.createMethodParameter = function (parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        };\r\n        this.createTypeDefinition(parameter, paramDef);\r\n        definition.params.push(paramDef);\r\n    };\r\n    Metadata.prototype.applyBoundMethod = function (actionInfo, ns, typeDefinitions, type) {\r\n        var _this = this;\r\n        var definition = {\r\n            type: type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        };\r\n        containsField(actionInfo, \"returnType\", function (value) {\r\n            _this.createReturnTypeDefinition(value, definition);\r\n        });\r\n        var parameters = [].concat(actionInfo.parameters);\r\n        parameters.forEach(function (p) { return _this.createMethodParameter(p, definition); });\r\n        if (parsebool(actionInfo.isBound, false)) {\r\n            var bindingParameter = definition.params.shift();\r\n            if (bindingParameter.type === (this.options.collectionBaseType || 'Array')) {\r\n                var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.namespace === ns && d.type === 'context'; });\r\n                filteredContextDefinitions.forEach(function (ctx) {\r\n                    for (var setName in ctx.definition) {\r\n                        var set = ctx.definition[setName];\r\n                        if (set.elementType === bindingParameter.elementType) {\r\n                            set.actions = set.actions || {};\r\n                            set.actions[actionInfo.name] = definition;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var filteredTypeDefinitions = typeDefinitions.filter(function (d) { return d.typeName === bindingParameter.type && d.type === 'entity'; });\r\n                filteredTypeDefinitions.forEach(function (t) {\r\n                    t.definition[actionInfo.name] = definition;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            delete definition.namespace;\r\n            var methodFullName = ns + '.' + actionInfo.name;\r\n            var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.type === 'context'; });\r\n            filteredContextDefinitions.forEach(function (ctx) {\r\n                ctx.contextImportMethods.forEach(function (methodImportInfo) {\r\n                    if (methodImportInfo.action === methodFullName || methodImportInfo.function === methodFullName) {\r\n                        ctx.definition[actionInfo.name] = definition;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Metadata.prototype.processMetadata = function (createdTypes) {\r\n        var _this = this;\r\n        var types = createdTypes || [];\r\n        var typeDefinitions = [];\r\n        var serviceMethods = [];\r\n        var self = this;\r\n        this.metadata.dataServices.schemas.forEach(function (schema) {\r\n            var ns = schema.namespace;\r\n            if (schema.enumTypes) {\r\n                var enumTypes = schema.enumTypes.map(function (ct) { return _this.createEnumType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, enumTypes);\r\n            }\r\n            if (schema.complexTypes) {\r\n                var complexTypes = schema.complexTypes.map(function (ct) { return _this.createEntityType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, complexTypes);\r\n            }\r\n            if (schema.entityTypes) {\r\n                var entityTypes = schema.entityTypes.map(function (et) { return _this.createEntityType(et, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, entityTypes);\r\n            }\r\n            if (schema.actions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.actions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceAction'); }; }));\r\n            }\r\n            if (schema.functions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.functions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceFunction'); }; }));\r\n            }\r\n            if (schema.entityContainer) {\r\n                var contexts = schema.entityContainer.map(function (ctx) { return _this.createContextType(ctx, self.options.namespace || ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, contexts);\r\n            }\r\n        });\r\n        serviceMethods.forEach(function (m) { return m(typeDefinitions); });\r\n        types.src = '(function(mod) {\\n' +\r\n            '  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"jaydata/core\")); // CommonJS\\n' +\r\n            '  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod); // AMD\\n' +\r\n            '  mod($data.generatedContext || ($data.generatedContext = {}), $data); // Plain browser env\\n' +\r\n            '})(function(exports, $data) {\\n\\n' +\r\n            'var types = {};\\n\\n';\r\n        types.push.apply(types, typeDefinitions.map(function (d) {\r\n            var srcPart = '';\r\n            if (d.baseType == self.$data.Enum) {\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = $data.createEnum(\"' + d.params[0] + '\", [\\n' +\r\n                    Object.keys(d.params[3]).map(function (dp) { return '  ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') +\r\n                    '\\n]);\\n\\n';\r\n            }\r\n            else {\r\n                var typeName = _this.options.container.resolveName(d.baseType);\r\n                if (d.baseType == self.$data.EntityContext)\r\n                    srcPart += 'exports.type = ';\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = ' +\r\n                    (typeName == '$data.Entity' || typeName == '$data.EntityContext' ? typeName : 'types[\"' + typeName + '\"]') +\r\n                    '.extend(\"' + d.params[0] + '\", ';\r\n                if (d.params[2] && Object.keys(d.params[2]).length > 0)\r\n                    srcPart += '{\\n' + Object.keys(d.params[2]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[2][dp]); }).join(',\\n') + '\\n}';\r\n                else\r\n                    srcPart += 'null';\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0)\r\n                    srcPart += ', {\\n' + Object.keys(d.params[3]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') + '\\n}';\r\n                srcPart += ');\\n\\n';\r\n            }\r\n            types.src += srcPart;\r\n            if (_this.options.debug)\r\n                console.log('Type generated:', d.params[0]);\r\n            var baseType = _this.options.container.resolveType(d.baseType);\r\n            return baseType.extend.apply(baseType, d.params);\r\n        }));\r\n        types.src += 'var ctxType = exports.type;\\n' +\r\n            'exports.factory = function(config){\\n' +\r\n            '  if (ctxType){\\n' +\r\n            '    var cfg = $data.typeSystem.extend({\\n' +\r\n            '      name: \"oData\",\\n' +\r\n            '      oDataServiceHost: \"' + this.options.url.replace('/$metadata', '') + '\",\\n' +\r\n            '      withCredentials: ' + (this.options.withCredentials || false) + ',\\n' +\r\n            '      maxDataServiceVersion: \"' + (this.options.maxDataServiceVersion || '4.0') + '\"\\n' +\r\n            '    }, config);\\n' +\r\n            '    return new ctxType(cfg);\\n' +\r\n            '  }else{\\n' +\r\n            '    return null;\\n' +\r\n            '  }\\n' +\r\n            '};\\n\\n';\r\n        if (this.options.autoCreateContext) {\r\n            var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n            types.src += 'exports[\"' + contextName + '\"] = exports.factory();\\n\\n';\r\n        }\r\n        types.src += '});';\r\n        return types;\r\n    };\r\n    return Metadata;\r\n})();\r\nexports.Metadata = Metadata;\r\n//# sourceMappingURL=metadata.js.map","/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar odata_metadata_1 = require('odata-metadata');\r\nvar metadata_1 = require('./metadata');\r\nvar odatajs = (typeof window !== \"undefined\" ? window['odatajs'] : typeof global !== \"undefined\" ? global['odatajs'] : null);\r\nvar extend = require('extend');\r\nvar MetadataHandler = (function () {\r\n    function MetadataHandler($data, options) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.prepareRequest = options.prepareRequest || function () { };\r\n        if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n            console.error('Not Found!:', 'odatajs is required');\r\n        }\r\n        else {\r\n            this.oData = odatajs.oData;\r\n        }\r\n    }\r\n    MetadataHandler.prototype.parse = function (text) {\r\n        var _this = this;\r\n        var edmMetadata = new odata_metadata_1.Edm.Edmx(this.oData.metadata.metadataParser(null, text));\r\n        var metadata = new metadata_1.Metadata(this.$data, this.options, edmMetadata);\r\n        var types = metadata.processMetadata();\r\n        var contextType = types.filter(function (t) { return t.isAssignableTo(_this.$data.EntityContext); })[0];\r\n        var factory = this._createFactoryFunc(contextType);\r\n        factory.type = contextType;\r\n        factory.src = types.src;\r\n        return factory;\r\n    };\r\n    MetadataHandler.prototype.load = function () {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var serviceUrl = self.options.url.replace('/$metadata', '');\r\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\r\n            self.options.serivceUri = serviceUrl;\r\n            var requestData = [\r\n                {\r\n                    requestUri: metadataUrl,\r\n                    method: self.options.method || \"GET\",\r\n                    headers: self.options.headers || {}\r\n                },\r\n                function (data) {\r\n                    var edmMetadata = new odata_metadata_1.Edm.Edmx(data);\r\n                    var metadata = new metadata_1.Metadata(self.$data, self.options, edmMetadata);\r\n                    var types = metadata.processMetadata();\r\n                    var contextType = types.filter(function (t) { return t.isAssignableTo(self.$data.EntityContext); })[0];\r\n                    var factory = self._createFactoryFunc(contextType);\r\n                    factory.type = contextType;\r\n                    factory.src = types.src;\r\n                    resolve(factory);\r\n                },\r\n                reject,\r\n                self.oData.metadataHandler\r\n            ];\r\n            self._appendBasicAuth(requestData[0], self.options.user, self.options.password, self.options.withCredentials);\r\n            self.prepareRequest.call(self, requestData);\r\n            self.oData.request.apply(self.oData, requestData);\r\n        });\r\n    };\r\n    MetadataHandler.prototype._createFactoryFunc = function (ctxType) {\r\n        var _this = this;\r\n        return function (config) {\r\n            if (ctxType) {\r\n                var cfg = extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: _this.options.url.replace('/$metadata', ''),\r\n                    user: _this.options.user,\r\n                    password: _this.options.password,\r\n                    withCredentials: _this.options.withCredentials,\r\n                    maxDataServiceVersion: _this.options.maxDataServiceVersion || '4.0'\r\n                }, config);\r\n                return new ctxType(cfg);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n    };\r\n    MetadataHandler.prototype._appendBasicAuth = function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials) {\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    };\r\n    MetadataHandler.prototype.__encodeBase64 = function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n            \"QRSTUVWXYZabcdef\" +\r\n            \"ghijklmnopqrstuv\" +\r\n            \"wxyz0123456789+/\" +\r\n            \"=\";\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            base64 = base64 +\r\n                b64array.charAt(enc1) +\r\n                b64array.charAt(enc2) +\r\n                b64array.charAt(enc3) +\r\n                b64array.charAt(enc4);\r\n        } while (i < input.length);\r\n        return base64;\r\n    };\r\n    return MetadataHandler;\r\n})();\r\nexports.MetadataHandler = MetadataHandler;\r\n//# sourceMappingURL=metadataHandler.js.map","/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar metadataHandler_1 = require('./metadataHandler');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar jaydata_promise_handler_1 = require('jaydata-promise-handler');\r\nvar metadataHandler_2 = require('./metadataHandler');\r\nexports.MetadataHandler = metadataHandler_2.MetadataHandler;\r\nvar ServiceParams = (function () {\r\n    function ServiceParams() {\r\n        this.config = {};\r\n    }\r\n    return ServiceParams;\r\n})();\r\nexports.ServiceParams = ServiceParams;\r\nvar DynamicMetadata = (function () {\r\n    function DynamicMetadata($data) {\r\n        this.$data = $data;\r\n    }\r\n    DynamicMetadata.prototype.service = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        var self = this;\r\n        new metadataHandler_1.MetadataHandler(this.$data, params.config).load().then(function (factory) {\r\n            var type = factory.type;\r\n            //register to local store\r\n            var storeAlias = params.config.serviceName || params.config.storeAlias;\r\n            if (storeAlias && 'addStore' in self.$data) {\r\n                self.$data.addStore(storeAlias, factory, params.config.isDefault === undefined || params.config.isDefault);\r\n            }\r\n            _callback.success(factory, type);\r\n        }, function (err) {\r\n            _callback.error(err);\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.prototype.initService = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        this.service(params.config.url, params.config, {\r\n            success: function (factory) {\r\n                var ctx = factory();\r\n                if (ctx) {\r\n                    return ctx.onReady(_callback);\r\n                }\r\n                return _callback.error(new jaydata_error_handler_1.Exception(\"Missing Context Type\"));\r\n            },\r\n            error: _callback.error\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.use = function ($data) {\r\n        var dynamicMetadata = new DynamicMetadata($data);\r\n        $data.service = dynamicMetadata.service;\r\n        $data.initService = dynamicMetadata.initService;\r\n    };\r\n    DynamicMetadata.getParam = function (paramValue, params) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    params.callback = paramValue;\r\n                }\r\n                else {\r\n                    params.config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                params.callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return DynamicMetadata;\r\n})();\r\nexports.DynamicMetadata = DynamicMetadata;\r\n//# sourceMappingURL=service.js.map","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Exception = (function (_super) {\r\n    __extends(Exception, _super);\r\n    function Exception(message, name, data) {\r\n        _super.call(this);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n        this.name = name || \"Exception\";\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n    Exception.prototype._getStackTrace = function () { };\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\nvar Guard = (function () {\r\n    function Guard() {\r\n    }\r\n    Guard.requireValue = function (name, value) {\r\n        if (typeof value === 'undefined' || value === null) {\r\n            Guard.raise(name + \" requires a value other than undefined or null\");\r\n        }\r\n    };\r\n    Guard.requireType = function (name, value, typeOrTypes) {\r\n        var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n        return types.some(function (item) {\r\n            switch (typeof item) {\r\n                case \"string\":\r\n                    return typeof value === item;\r\n                case \"function\":\r\n                    return value instanceof item;\r\n                default:\r\n                    Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n            }\r\n        });\r\n    };\r\n    Guard.raise = function (exception) {\r\n        if (typeof exports.intellisense === 'undefined') {\r\n            if (exception instanceof Exception) {\r\n                console.error(exception.name + ':', exception.message + '\\n', exception);\r\n            }\r\n            else {\r\n                console.error(exception);\r\n            }\r\n            throw exception;\r\n        }\r\n    };\r\n    Guard.isNullOrUndefined = function (value) {\r\n        return value === undefined || value === null;\r\n    };\r\n    return Guard;\r\n}());\r\nexports.Guard = Guard;\r\n//# sourceMappingURL=errorHandler.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar promiseHandlerBase_1 = require('./promiseHandlerBase');\r\nvar PromiseHandler = (function (_super) {\r\n    __extends(PromiseHandler, _super);\r\n    function PromiseHandler() {\r\n        _super.call(this);\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.resolve = resolve;\r\n            self.reject = reject;\r\n        });\r\n        this.deferred = {\r\n            resolve: function () { self.resolve.apply(promise, arguments); },\r\n            reject: function () { self.reject.apply(promise, arguments); },\r\n            promise: promise\r\n        };\r\n    }\r\n    PromiseHandler.prototype.createCallback = function (callback) {\r\n        var settings = promiseHandlerBase_1.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var self = this;\r\n        var result = new promiseHandlerBase_1.CallbackSettings();\r\n        result = extend(result, {\r\n            success: function () {\r\n                settings.success.apply(self.deferred, arguments);\r\n                self.resolve.apply(self.deferred, arguments);\r\n            },\r\n            error: function () {\r\n                Array.prototype.push.call(arguments, self.deferred);\r\n                settings.error.apply(self.deferred, arguments);\r\n            },\r\n            notify: function () {\r\n                settings.notify.apply(self.deferred, arguments);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    PromiseHandler.prototype.getPromise = function () {\r\n        return this.deferred.promise;\r\n    };\r\n    PromiseHandler.compatibilityMode = function () {\r\n        Promise.prototype['fail'] = function (onReject) {\r\n            return this.then(null, function (reason) {\r\n                onReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        Promise.prototype['always'] = function (onResolveOrReject) {\r\n            return this.then(onResolveOrReject, function (reason) {\r\n                onResolveOrReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n    };\r\n    PromiseHandler.use = function ($data) {\r\n        $data.PromiseHandler = typeof Promise == 'function' ? PromiseHandler : promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.PromiseHandlerBase = promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.Promise = promiseHandlerBase_1.PromiseNotImplemented;\r\n    };\r\n    return PromiseHandler;\r\n}(promiseHandlerBase_1.PromiseHandlerBase));\r\nexports.PromiseHandler = PromiseHandler;\r\n//# sourceMappingURL=promise.js.map","\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar CallbackSettings = (function () {\r\n    function CallbackSettings() {\r\n    }\r\n    return CallbackSettings;\r\n}());\r\nexports.CallbackSettings = CallbackSettings;\r\nvar PromiseNotImplemented = (function () {\r\n    function PromiseNotImplemented() {\r\n    }\r\n    PromiseNotImplemented.prototype.always = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.always', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.done = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.done', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.fail = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.fail', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isRejected = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isRejected', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isResolved = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isResolved', 'Not implemented!')); };\r\n    //notify() { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); }\r\n    //notifyWith() { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.pipe = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.pipe', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.progress = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.progress', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.promise = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.promise', 'Not implemented!')); };\r\n    //reject() { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); }\r\n    //rejectWith() { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); }\r\n    //resolve() { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); }\r\n    //resolveWith() { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.state = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.state', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.then = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.then', 'Not implemented!')); };\r\n    return PromiseNotImplemented;\r\n}());\r\nexports.PromiseNotImplemented = PromiseNotImplemented;\r\nvar PromiseHandlerBase = (function () {\r\n    function PromiseHandlerBase() {\r\n    }\r\n    PromiseHandlerBase.defaultSuccessCallback = function () { };\r\n    PromiseHandlerBase.defaultNotifyCallback = function () { };\r\n    PromiseHandlerBase.defaultErrorCallback = function () {\r\n        if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n            (console.error || console.log).call(console, arguments[0]);\r\n            arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n        }\r\n        else {\r\n            if (arguments[0] instanceof Error) {\r\n                console.error(arguments[0]);\r\n            }\r\n            else {\r\n                console.error(\"DefaultError:\", \"DEFAULT ERROR CALLBACK!\", arguments);\r\n            }\r\n        }\r\n    };\r\n    PromiseHandlerBase.createCallbackSettings = function (callback, defaultSettings) {\r\n        var settings = defaultSettings || {\r\n            success: PromiseHandlerBase.defaultSuccessCallback,\r\n            error: PromiseHandlerBase.defaultErrorCallback,\r\n            notify: PromiseHandlerBase.defaultNotifyCallback\r\n        };\r\n        var result = new CallbackSettings();\r\n        if (callback == null || callback == undefined) {\r\n            result = settings;\r\n        }\r\n        else if (typeof callback == 'function') {\r\n            result = extend(settings, {\r\n                success: callback\r\n            });\r\n        }\r\n        else {\r\n            result = extend(settings, callback);\r\n        }\r\n        var wrapCode = function (fn) {\r\n            var t = this;\r\n            function r() {\r\n                fn.apply(t, arguments);\r\n                fn = function () { };\r\n            }\r\n            return r;\r\n        };\r\n        if (typeof result.error === 'function')\r\n            result.error = wrapCode(result.error);\r\n        return result;\r\n    };\r\n    PromiseHandlerBase.prototype.createCallback = function (callback) {\r\n        return PromiseHandlerBase.createCallbackSettings(callback);\r\n    };\r\n    PromiseHandlerBase.prototype.getPromise = function () {\r\n        return new PromiseNotImplemented();\r\n    };\r\n    return PromiseHandlerBase;\r\n}());\r\nexports.PromiseHandlerBase = PromiseHandlerBase;\r\n//# sourceMappingURL=promiseHandlerBase.js.map","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = require('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    })();\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                var v = parser.invoke(definition, _this);\r\n                _this[membername] = v;\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    })();\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        return Property;\r\n    })(EdmItemBase);\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        return NavigationProperty;\r\n    })(EdmItemBase);\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    })(EdmItemBase);\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    })(EdmItemBase);\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    })(EdmItemBase);\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        return EntityType;\r\n    })(EdmItemBase);\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        return ComplexType;\r\n    })(EdmItemBase);\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        return Parameter;\r\n    })(EdmItemBase);\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        return ReturnType;\r\n    })(EdmItemBase);\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    })(EdmItemBase);\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        return Action;\r\n    })(Invokable);\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        return Function;\r\n    })(Invokable);\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        return Member;\r\n    })(EdmItemBase);\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        return EnumType;\r\n    })(EdmItemBase);\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        return EntitySet;\r\n    })(EdmItemBase);\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    })(EdmItemBase);\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    })(EdmItemBase);\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    })(EdmItemBase);\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        return Schema;\r\n    })(EdmItemBase);\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    })(EdmItemBase);\r\n    Edm.DataServices = DataServices;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        return Edmx;\r\n    })(EdmItemBase);\r\n    Edm.Edmx = Edmx;\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n//# sourceMappingURL=edm.js.map","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\nrequire('reflect-metadata');\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var md = (Reflect.getMetadata(\"members\", target) || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        Reflect.defineMetadata(\"members\", md, target);\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            //console.log(\"decorator runs\",key, this.attributeName, decoratorValue, value)\r\n            Reflect.defineMetadata(_this.attributeName, decoratorValue, target, key);\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.prototype.isApplied = function (instance, memberName) {\r\n        return Reflect.getMetadataKeys(Object.getPrototypeOf(instance), memberName).indexOf(this.attributeName) > -1;\r\n    };\r\n    MemberAttribute.getMembers = function (target) {\r\n        return Reflect.getMetadata(\"members\", isFunction(target) ? target.prototype : target);\r\n    };\r\n    MemberAttribute.getAttributeNames = function (target, memberName) {\r\n        return Reflect.getMetadataKeys(target, memberName);\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return Reflect.getMetadata(attributeName, target, memberName);\r\n    };\r\n    return MemberAttribute;\r\n})();\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n})();\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n})(MemberAttribute);\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n//# sourceMappingURL=metacode.js.map","/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    \"use strict\";\r\n    // Load global or shim versions of Map, Set, and WeakMap\r\n    var functionPrototype = Object.getPrototypeOf(Function);\r\n    var _Map = typeof Map === \"function\" ? Map : CreateMapPolyfill();\r\n    var _Set = typeof Set === \"function\" ? Set : CreateSetPolyfill();\r\n    var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n    // [[Metadata]] internal slot\r\n    var __Metadata__ = new _WeakMap();\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param targetKey (Optional) The property key to decorate.\r\n      * @param targetDescriptor (Optional) The property descriptor for the target key\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     C = Reflect.decorate(decoratorsArray, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(C, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(C.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators, target, targetKey, targetDescriptor) {\r\n        if (!IsUndefined(targetDescriptor)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (IsUndefined(targetKey)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(targetDescriptor)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);\r\n        }\r\n        else {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsConstructor(target)) {\r\n                throw new TypeError();\r\n            }\r\n            return DecorateConstructor(decorators, target);\r\n        }\r\n    }\r\n    Reflect.decorate = decorate;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class C {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey, metadataValue) {\r\n        function decorator(target, targetKey) {\r\n            if (!IsUndefined(targetKey)) {\r\n                if (!IsObject(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                targetKey = ToPropertyKey(targetKey);\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n            }\r\n            else {\r\n                if (!IsConstructor(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);\r\n            }\r\n        }\r\n        return decorator;\r\n    }\r\n    Reflect.metadata = metadata;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): Decorator {\r\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n    }\r\n    Reflect.defineMetadata = defineMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasMetadata = hasMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasOwnMetadata = hasOwnMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getMetadata = getMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadata = getOwnMetadata;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getMetadataKeys = getMetadataKeys;\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryOwnMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        if (IsUndefined(metadataMap)) {\r\n            return false;\r\n        }\r\n        if (!metadataMap.delete(metadataKey)) {\r\n            return false;\r\n        }\r\n        if (metadataMap.size > 0) {\r\n            return true;\r\n        }\r\n        var targetMetadata = __Metadata__.get(target);\r\n        targetMetadata.delete(targetKey);\r\n        if (targetMetadata.size > 0) {\r\n            return true;\r\n        }\r\n        __Metadata__.delete(target);\r\n        return true;\r\n    }\r\n    Reflect.deleteMetadata = deleteMetadata;\r\n    function DecorateConstructor(decorators, target) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsConstructor(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                target = decorated;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target, propertyKey, descriptor);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsObject(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                descriptor = decorated;\r\n            }\r\n        }\r\n        return descriptor;\r\n    }\r\n    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            decorator(target, propertyKey);\r\n        }\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-\r\n    function GetOrCreateMetadataMap(target, targetKey, create) {\r\n        var targetMetadata = __Metadata__.get(target);\r\n        if (!targetMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            targetMetadata = new _Map();\r\n            __Metadata__.set(target, targetMetadata);\r\n        }\r\n        var keyMetadata = targetMetadata.get(targetKey);\r\n        if (!keyMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            keyMetadata = new _Map();\r\n            targetMetadata.set(targetKey, keyMetadata);\r\n        }\r\n        return keyMetadata;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-\r\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return true;\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n        }\r\n        return false;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-\r\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return false;\r\n        }\r\n        return Boolean(metadataMap.has(MetadataKey));\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-\r\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n        }\r\n        return undefined;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-\r\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return undefined;\r\n        }\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-\r\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-\r\n    function OrdinaryMetadataKeys(O, P) {\r\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent === null) {\r\n            return ownKeys;\r\n        }\r\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n        if (parentKeys.length <= 0) {\r\n            return ownKeys;\r\n        }\r\n        if (ownKeys.length <= 0) {\r\n            return parentKeys;\r\n        }\r\n        var set = new _Set();\r\n        var keys = [];\r\n        for (var _i = 0; _i < ownKeys.length; _i++) {\r\n            var key = ownKeys[_i];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (var _a = 0; _a < parentKeys.length; _a++) {\r\n            var key = parentKeys[_a];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-\r\n    function OrdinaryOwnMetadataKeys(target, targetKey) {\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        var keys = [];\r\n        if (metadataMap) {\r\n            metadataMap.forEach(function (_, key) { return keys.push(key); });\r\n        }\r\n        return keys;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type\r\n    function IsUndefined(x) {\r\n        return x === undefined;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\r\n    function IsArray(x) {\r\n        return Array.isArray(x);\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type\r\n    function IsObject(x) {\r\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\r\n    function IsConstructor(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\r\n    function IsSymbol(x) {\r\n        return typeof x === \"symbol\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\r\n    function ToPropertyKey(value) {\r\n        if (IsSymbol(value)) {\r\n            return value;\r\n        }\r\n        return String(value);\r\n    }\r\n    function GetPrototypeOf(O) {\r\n        var proto = Object.getPrototypeOf(O);\r\n        if (typeof O !== \"function\" || O === functionPrototype) {\r\n            return proto;\r\n        }\r\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. \r\n        // Try to determine the superclass constructor. Compatible implementations\r\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n        // or ensure each class has a valid `constructor` property on its prototype that\r\n        // points back to the constructor.\r\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n        if (proto !== functionPrototype) {\r\n            return proto;\r\n        }\r\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n        var prototype = O.prototype;\r\n        var prototypeProto = Object.getPrototypeOf(prototype);\r\n        if (prototypeProto == null || prototypeProto === Object.prototype) {\r\n            return proto;\r\n        }\r\n        // if the constructor was not a function, then we cannot determine the heritage.\r\n        var constructor = prototypeProto.constructor;\r\n        if (typeof constructor !== \"function\") {\r\n            return proto;\r\n        }\r\n        // if we have some kind of self-reference, then we cannot determine the heritage.\r\n        if (constructor === O) {\r\n            return proto;\r\n        }\r\n        // we have a pretty good guess at the heritage.\r\n        return constructor;\r\n    }\r\n    // naive Map shim\r\n    function CreateMapPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Map() {\r\n            this._keys = [];\r\n            this._values = [];\r\n            this._cache = cacheSentinel;\r\n        }\r\n        Map.prototype = {\r\n            get size() {\r\n                return this._keys.length;\r\n            },\r\n            has: function (key) {\r\n                if (key === this._cache) {\r\n                    return true;\r\n                }\r\n                if (this._find(key) >= 0) {\r\n                    this._cache = key;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._cache = key;\r\n                    return this._values[index];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (key, value) {\r\n                this.delete(key);\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this._cache = key;\r\n                return this;\r\n            },\r\n            delete: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._keys.splice(index, 1);\r\n                    this._values.splice(index, 1);\r\n                    this._cache = cacheSentinel;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                this._keys.length = 0;\r\n                this._values.length = 0;\r\n                this._cache = cacheSentinel;\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                var size = this.size;\r\n                for (var i = 0; i < size; ++i) {\r\n                    var key = this._keys[i];\r\n                    var value = this._values[i];\r\n                    this._cache = key;\r\n                    callback.call(this, value, key, this);\r\n                }\r\n            },\r\n            _find: function (key) {\r\n                var keys = this._keys;\r\n                var size = keys.length;\r\n                for (var i = 0; i < size; ++i) {\r\n                    if (keys[i] === key) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n        };\r\n        return Map;\r\n    }\r\n    // naive Set shim\r\n    function CreateSetPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Set() {\r\n            this._map = new _Map();\r\n        }\r\n        Set.prototype = {\r\n            get size() {\r\n                return this._map.length;\r\n            },\r\n            has: function (value) {\r\n                return this._map.has(value);\r\n            },\r\n            add: function (value) {\r\n                this._map.set(value, value);\r\n                return this;\r\n            },\r\n            delete: function (value) {\r\n                return this._map.delete(value);\r\n            },\r\n            clear: function () {\r\n                this._map.clear();\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                this._map.forEach(callback, thisArg);\r\n            }\r\n        };\r\n        return Set;\r\n    }\r\n    // naive WeakMap shim\r\n    function CreateWeakMapPolyfill() {\r\n        var UUID_SIZE = 16;\r\n        var isNode = typeof global !== \"undefined\" && Object.prototype.toString.call(global.process) === '[object process]';\r\n        var nodeCrypto = isNode && require(\"crypto\");\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        var keys = {};\r\n        var rootKey = CreateUniqueKey();\r\n        function WeakMap() {\r\n            this._key = CreateUniqueKey();\r\n        }\r\n        WeakMap.prototype = {\r\n            has: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return this._key in table;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return table[this._key];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (target, value) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                table[this._key] = value;\r\n                return this;\r\n            },\r\n            delete: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table && this._key in table) {\r\n                    return delete table[this._key];\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                // NOTE: not a real clear, just makes the previous data unreachable\r\n                this._key = CreateUniqueKey();\r\n            }\r\n        };\r\n        function FillRandomBytes(buffer, size) {\r\n            for (var i = 0; i < size; ++i) {\r\n                buffer[i] = Math.random() * 255 | 0;\r\n            }\r\n        }\r\n        function GenRandomBytes(size) {\r\n            if (nodeCrypto) {\r\n                var data = nodeCrypto.randomBytes(size);\r\n                return data;\r\n            }\r\n            else if (typeof Uint8Array === \"function\") {\r\n                var data = new Uint8Array(size);\r\n                if (typeof crypto !== \"undefined\") {\r\n                    crypto.getRandomValues(data);\r\n                }\r\n                else if (typeof msCrypto !== \"undefined\") {\r\n                    msCrypto.getRandomValues(data);\r\n                }\r\n                else {\r\n                    FillRandomBytes(data, size);\r\n                }\r\n                return data;\r\n            }\r\n            else {\r\n                var data = new Array(size);\r\n                FillRandomBytes(data, size);\r\n                return data;\r\n            }\r\n        }\r\n        function CreateUUID() {\r\n            var data = GenRandomBytes(UUID_SIZE);\r\n            // mark as random - RFC 4122 § 4.4\r\n            data[6] = data[6] & 0x4f | 0x40;\r\n            data[8] = data[8] & 0xbf | 0x80;\r\n            var result = \"\";\r\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                var byte = data[offset];\r\n                if (offset === 4 || offset === 6 || offset === 8) {\r\n                    result += \"-\";\r\n                }\r\n                if (byte < 16) {\r\n                    result += \"0\";\r\n                }\r\n                result += byte.toString(16).toLowerCase();\r\n            }\r\n            return result;\r\n        }\r\n        function CreateUniqueKey() {\r\n            var key;\r\n            do {\r\n                key = \"@@WeakMap@@\" + CreateUUID();\r\n            } while (hasOwn.call(keys, key));\r\n            keys[key] = true;\r\n            return key;\r\n        }\r\n        function GetOrCreateWeakMapTable(target, create) {\r\n            if (!hasOwn.call(target, rootKey)) {\r\n                if (!create) {\r\n                    return undefined;\r\n                }\r\n                Object.defineProperty(target, rootKey, { value: Object.create(null) });\r\n            }\r\n            return target[rootKey];\r\n        }\r\n        return WeakMap;\r\n    }\r\n    // hook global Reflect\r\n    (function (__global) {\r\n        if (typeof __global.Reflect !== \"undefined\") {\r\n            if (__global.Reflect !== Reflect) {\r\n                for (var p in Reflect) {\r\n                    __global.Reflect[p] = Reflect[p];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            __global.Reflect = Reflect;\r\n        }\r\n    })(typeof window !== \"undefined\" ? window :\r\n        typeof WorkerGlobalScope !== \"undefined\" ? self :\r\n            typeof global !== \"undefined\" ? global :\r\n                Function(\"return this;\")());\r\n})(Reflect || (Reflect = {}));\r\n//# sourceMappingURL=Reflect.js.map","module.exports={\r\n  \"name\": \"jaydata\",\r\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\r\n  \"keywords\": [\r\n    \"HTML5 data management\",\r\n    \"JavaScript\",\r\n    \"JavaScript Language Query\",\r\n    \"JSLQ\",\r\n    \"OData\",\r\n    \"SQLite\",\r\n    \"WebSQL\",\r\n    \"IndexedDB\",\r\n    \"YQL\",\r\n    \"Facebook\",\r\n    \"cross-platform\",\r\n    \"iPhone\",\r\n    \"Android\"\r\n  ],\r\n  \"version\": \"1.5.1\",\r\n  \"homepage\": \"http://jaydata.org\",\r\n  \"author\": {\r\n    \"name\": \"JayData\",\r\n    \"url\": \"http://jaydata.org\"\r\n  },\r\n  \"dependencies\": {\r\n    \"acorn\": \"^3.0.2\",\r\n    \"atob\": \"^2.0.0\",\r\n    \"btoa\": \"^1.1.2\",\r\n    \"dot\": \"^1.0.3\",\r\n    \"jaydata-dynamic-metadata\": \"^0.0.5\",\r\n    \"jaydata-error-handler\": \"^0.0.1\",\r\n    \"jaydata-odatajs\": \"^4.0.0\",\r\n    \"jaydata-promise-handler\": \"^0.0.1\",\r\n    \"odata-metadata\": \"^0.1.0\",\r\n    \"xmldom\": \"^0.1.19\"\r\n  },\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Dániel József\"\r\n    },\r\n    {\r\n      \"name\": \"Hajnalka Battancs\"\r\n    },\r\n    {\r\n      \"name\": \"János Roden\"\r\n    },\r\n    {\r\n      \"name\": \"László Horváth\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Zentai\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Nochta\"\r\n    },\r\n    {\r\n      \"name\": \"Róbert Bónay\"\r\n    },\r\n    {\r\n      \"name\": \"Szabolcs Czinege\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Borza\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Lázár\"\r\n    },\r\n    {\r\n      \"name\": \"Zoltán Gyebrovszki\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.6.0\"\r\n  },\r\n  \"license\": \"(MIT OR GPL-2.0)\",\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.1.18\",\r\n    \"babel-eslint\": \"^5.0.0-beta4\",\r\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-register\": \"^6.2.0\",\r\n    \"babelify\": \"^7.2.0\",\r\n    \"browserify\": \"^12.0.1\",\r\n    \"browserify-derequire\": \"^0.9.4\",\r\n    \"browserify-shim\": \"^3.8.11\",\r\n    \"chai\": \"^3.4.1\",\r\n    \"del\": \"^2.2.0\",\r\n    \"google-closure-compiler\": \"^20151015.0.0\",\r\n    \"gulp\": \"^3.9.0\",\r\n    \"gulp-babel\": \"^6.1.1\",\r\n    \"gulp-browserify\": \"^0.5.1\",\r\n    \"gulp-closure-compiler\": \"^0.3.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-derequire\": \"^2.1.0\",\r\n    \"gulp-eslint\": \"^1.1.1\",\r\n    \"gulp-footer\": \"^1.0.5\",\r\n    \"gulp-header\": \"^1.7.1\",\r\n    \"gulp-nightwatch\": \"^0.2.6\",\r\n    \"gulp-nuget-pack\": \"0.0.6\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-replace\": \"^0.5.4\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-uglify\": \"^1.5.1\",\r\n    \"gulp-vinyl-zip\": \"^1.1.2\",\r\n    \"gulp-webserver\": \"^0.9.1\",\r\n    \"istanbul\": \"^0.4.1\",\r\n    \"jaguarjs-jsdoc\": \"0.0.1\",\r\n    \"jsdoc\": \"^3.4.0\",\r\n    \"minimist\": \"^1.2.0\",\r\n    \"nightwatch\": \"^0.8.8\",\r\n    \"npm\": \"^3.5.2\",\r\n    \"selenium-standalone\": \"^4.7.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"^1.1.0\",\r\n    \"yargs\": \"^3.31.0\"\r\n  },\r\n  \"browserify-shim\": {\r\n    \"atob\": \"global:atob\",\r\n    \"btoa\": \"global:btoa\",\r\n    \"jquery\": \"global:jQuery\",\r\n    \"jaydata-odatajs\": \"global:odatajs\",\r\n    \"angular\": \"global:angular\",\r\n    \"Handlebars\": \"global:Handlebars\",\r\n    \"kendo\": \"global:kendo\",\r\n    \"ko\": \"global:ko\",\r\n    \"q\": \"global:Q\",\r\n    \"Ext\": \"global:Ext\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n","import $data from '../TypeSystem/index.js';\r\nimport { DynamicMetadata } from 'jaydata-dynamic-metadata';\r\n\r\n$data.DynamicMetadata = DynamicMetadata;\r\nvar dynamicMetadata = new DynamicMetadata($data);\r\n$data.service = dynamicMetadata.service.bind(dynamicMetadata);\r\n$data.initService = dynamicMetadata.initService.bind(dynamicMetadata);\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport { StringFunctions } from './Extensions.js'\r\n\r\n\r\nvar Container = new ContainerCtor()\r\n\r\nexport var ContainerInstance = Container\r\n\r\nexport function ContainerCtor(parentContainer) {\r\n    var parent = parentContainer;\r\n    if (parent) {\r\n      parent.addChildContainer(this);\r\n    }\r\n\r\n    var classNames = {};\r\n    var consolidatedClassNames = [];\r\n    var classTypes = [];\r\n\r\n    this.classNames = classNames;\r\n    this.consolidatedClassNames = consolidatedClassNames;\r\n    this.classTypes = classTypes;\r\n\r\n    var mappedTo = [];\r\n    this.mappedTo = mappedTo;\r\n\r\n    var self = this;\r\n\r\n    this[\"holder\"] = null;\r\n\r\n    var IoC = function(type, parameters) {\r\n      var t = self.resolveType(type);\r\n      var inst = Object.create(t.prototype);\r\n      t.apply(inst, parameters);\r\n      return inst;\r\n    };\r\n\r\n    var pendingResolutions = {};\r\n    this.pendingResolutions = pendingResolutions;\r\n\r\n    function addPendingResolution(name, onResolved) {\r\n      pendingResolutions[name] = pendingResolutions[name] || [];\r\n      pendingResolutions[name].push(onResolved);\r\n    }\r\n\r\n    this.addChildContainer = function(container) {\r\n      //children.push(container);\r\n    }\r\n\r\n    this.createInstance = function(type, parameters) {\r\n      return IoC(type, parameters);\r\n    };\r\n\r\n    this.mapType = function(aliasTypeOrName, realTypeOrName) {\r\n        Guard.requireValue(\"aliasType\", aliasTypeOrName);\r\n        Guard.requireValue(\"realType\", realTypeOrName);\r\n        var aliasT = this.getType(aliasTypeOrName);\r\n        var realT = this.getType(realTypeOrName);\r\n        var aliasPos = classTypes.indexOf(aliasT);\r\n        var realPos = classTypes.indexOf(realT);\r\n        mappedTo[aliasPos] = realPos;\r\n      },\r\n\r\n      //this.resolve = function (type, parameters) {\r\n      //    var classFunction = this.resolveType(type, parameters);\r\n      //    return new classFunction(parameters);\r\n      //};\r\n\r\n\r\n\r\n      this.isPrimitiveType = function(type) {\r\n        var t = this.resolveType(type);\r\n\r\n        switch (true) {\r\n          case t === Number:\r\n          case t === String:\r\n          case t === Date:\r\n          case t === Boolean:\r\n          case t === Array:\r\n          case t === Object:\r\n\r\n          case t === $data.Number:\r\n          case t === $data.Integer:\r\n          case t === $data.Date:\r\n          case t === $data.String:\r\n          case t === $data.Boolean:\r\n          case t === $data.Array:\r\n          case t === $data.Object:\r\n          case t === $data.Guid:\r\n\r\n          case t === $data.Byte:\r\n          case t === $data.SByte:\r\n          case t === $data.Decimal:\r\n          case t === $data.Float:\r\n          case t === $data.Int16:\r\n          case t === $data.Int32:\r\n          case t === $data.Int64:\r\n          case t === $data.DateTimeOffset:\r\n          case t === $data.Time:\r\n          case t === $data.Day:\r\n          case t === $data.Duration:\r\n\r\n          case t === $data.SimpleBase:\r\n          case t === $data.Geospatial:\r\n          case t === $data.GeographyBase:\r\n          case t === $data.GeographyPoint:\r\n          case t === $data.GeographyLineString:\r\n          case t === $data.GeographyPolygon:\r\n          case t === $data.GeographyMultiPoint:\r\n          case t === $data.GeographyMultiLineString:\r\n          case t === $data.GeographyMultiPolygon:\r\n          case t === $data.GeographyCollection:\r\n          case t === $data.GeometryBase:\r\n          case t === $data.GeometryPoint:\r\n          case t === $data.GeometryLineString:\r\n          case t === $data.GeometryPolygon:\r\n          case t === $data.GeometryMultiPoint:\r\n          case t === $data.GeometryMultiLineString:\r\n          case t === $data.GeometryMultiPolygon:\r\n          case t === $data.GeometryCollection:\r\n\r\n            return true;\r\n          default:\r\n            return false;\r\n        }\r\n      };\r\n\r\n\r\n    this.resolveName = function(type) {\r\n      var t = this.resolveType(type);\r\n      var tPos = classTypes.indexOf(t);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.resolveType = function(typeOrName, onResolved) {\r\n      var t = typeOrName;\r\n      t = this.getType(t, onResolved ? true : false, onResolved);\r\n      var posT = classTypes.indexOf(t);\r\n      return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\r\n    };\r\n\r\n\r\n\r\n    this.getType = function(typeOrName, doNotThrow, onResolved) {\r\n      Guard.requireValue(\"typeOrName\", typeOrName);\r\n      if (typeof typeOrName === 'function') {\r\n        return typeOrName;\r\n      };\r\n\r\n      if (!(typeOrName in classNames)) {\r\n        if (parent) {\r\n          var tp = parent.getType(typeOrName, true);\r\n          if (tp) return tp;\r\n        }\r\n        if (onResolved) {\r\n          addPendingResolution(typeOrName, onResolved);\r\n          return;\r\n        } else if (doNotThrow) {\r\n          return undefined;\r\n        } else {\r\n          Guard.raise(new Exception(\"Unable to resolve type:\" + typeOrName));\r\n        }\r\n      };\r\n      var result = classTypes[classNames[typeOrName]];\r\n      if (onResolved) {\r\n        onResolved(result);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    this.getName = function(typeOrName) {\r\n      var t = this.getType(typeOrName);\r\n      var tPos = classTypes.indexOf(t);\r\n      if (tPos == -1)\r\n        Guard.raise(\"unknown type to request name for: \" + typeOrName);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.getTypes = function() {\r\n      var keys = Object.keys(classNames);\r\n      var ret = [];\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var className = keys[i];\r\n        ret.push({\r\n          name: className,\r\n          type: classTypes[classNames[className]],\r\n          toString: function() {\r\n            return this.name;\r\n          }\r\n        });\r\n      }\r\n      return ret;\r\n    };\r\n\r\n    //this.getTypeName( in type);\r\n    //this.resolveType()\r\n    //this.inferTypeFromValue = function (value) {\r\n\r\n    this.getTypeName = function(value) {\r\n      //TODO refactor\r\n      switch (typeof value) {\r\n        case 'object':\r\n          if (value == null) return '$data.Object';\r\n          if (value instanceof Array) return '$data.Array';\r\n          if (value.getType) return value.getType().fullName;\r\n          if (value instanceof Date) return '$data.Date';\r\n          if (value instanceof $data.Guid) return '$data.Guid';\r\n          if (value instanceof $data.DateTimeOffset) return '$data.DateTimeOffset';\r\n          if (value instanceof $data.GeographyPoint) return '$data.GeographyPoint';\r\n          if (value instanceof $data.GeographyLineString) return '$data.GeographyLineString';\r\n          if (value instanceof $data.GeographyPolygon) return '$data.GeographyPolygon';\r\n          if (value instanceof $data.GeographyMultiPoint) return '$data.GeographyMultiPoint';\r\n          if (value instanceof $data.GeographyMultiLineString) return '$data.GeographyMultiLineString';\r\n          if (value instanceof $data.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\r\n          if (value instanceof $data.GeographyCollection) return '$data.GeographyCollection';\r\n          if (value instanceof $data.GeographyBase) return '$data.GeographyBase';\r\n          if (value instanceof $data.GeometryPoint) return '$data.GeometryPoint';\r\n          if (value instanceof $data.GeometryLineString) return '$data.GeometryLineString';\r\n          if (value instanceof $data.GeometryPolygon) return '$data.GeometryPolygon';\r\n          if (value instanceof $data.GeometryMultiPoint) return '$data.GeometryMultiPoint';\r\n          if (value instanceof $data.GeometryMultiLineString) return '$data.GeometryMultiLineString';\r\n          if (value instanceof $data.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\r\n          if (value instanceof $data.GeometryCollection) return '$data.GeometryCollection';\r\n          if (value instanceof $data.GeometryBase) return '$data.GeometryBase';\r\n          if (value instanceof $data.Geospatial) return '$data.Geospatial';\r\n          if (value instanceof $data.SimpleBase) return '$data.SimpleBase';\r\n          if (typeof value.toHexString === 'function') return '$data.ObjectID';\r\n          //if(value instanceof \"number\") return\r\n        default:\r\n          return typeof value;\r\n      }\r\n    };\r\n\r\n    this.isTypeRegistered = function(typeOrName) {\r\n      if (typeof typeOrName === 'function') {\r\n        return classTypes.indexOf(typeOrName) > -1;\r\n      } else {\r\n        return typeOrName in classNames;\r\n      }\r\n    };\r\n\r\n    this.unregisterType = function(type) {\r\n      Guard.raise(\"Unimplemented\");\r\n    };\r\n\r\n\r\n\r\n    this.getDefault = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      switch (t) {\r\n        case $data.Number:\r\n          return 0.0;\r\n        case $data.Float:\r\n          return 0.0;\r\n        case $data.Decimal:\r\n          return '0.0';\r\n        case $data.Integer:\r\n          return 0;\r\n        case $data.Int16:\r\n          return 0;\r\n        case $data.Int32:\r\n          return 0;\r\n        case $data.Int64:\r\n          return '0';\r\n        case $data.Byte:\r\n          return 0;\r\n        case $data.SByte:\r\n          return 0;\r\n        case $data.String:\r\n          return null;\r\n        case $data.Boolean:\r\n          return false;\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    //name array ['', '', '']\r\n    this.getIndex = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      return classTypes.indexOf(t);\r\n    }\r\n\r\n    this.resolveByIndex = function(index) {\r\n      return classTypes[index];\r\n    }\r\n\r\n    this.registerType = function(nameOrNamesArray, type, factoryFunc) {\r\n      ///<signature>\r\n      ///<summary>Registers a type and optionally a lifetimeManager with a name\r\n      ///that can be used to later resolve the type or create new instances</summary>\r\n      ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\r\n      ///<param name=\"type\" type=\"Function\">The type to register</param>\r\n      ///<param name=\"instanceManager\" type=\"Function\"></param>\r\n      ///</signature>\r\n      ///<signature>\r\n      ///<summary>Registers a new type that </summary>\r\n      ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\r\n      ///<param name=\"actualType\" type=\"Function\">The type to register</param>\r\n      ///</signature>\r\n\r\n\r\n      ///TODO remove\r\n      /*if (typeof typeNameOrAlias === 'string') {\r\n          if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n              Guard.raise(\"Type already registered. Remove first\");\r\n          }\r\n      }*/\r\n\r\n      if (!nameOrNamesArray) {\r\n        return;\r\n      }\r\n\r\n      //todo add ('number', 'number')\r\n      if (typeof type === \"string\") {\r\n        type = self.resolveType(type);\r\n      }\r\n\r\n      var namesArray = [];\r\n      if (typeof nameOrNamesArray === 'string') {\r\n        var tmp = [];\r\n        tmp.push(nameOrNamesArray);\r\n        namesArray = tmp;\r\n      } else {\r\n        namesArray = nameOrNamesArray;\r\n      }\r\n\r\n      for (var i = 0; i < namesArray.length; i++) {\r\n        var parts = namesArray[i].split('.');\r\n        var item = {};\r\n        item.shortName = parts[parts.length - 1];\r\n        item.fullName = namesArray[i];\r\n        namesArray[i] = item;\r\n      }\r\n\r\n      //if (type.\r\n\r\n\r\n      var creatorFnc = function() {\r\n        return IoC(type, arguments);\r\n      };\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        intellisense.annotate(creatorFnc, type);\r\n      }\r\n\r\n      for (var i = 0, l = namesArray.length; i < l; i++) {\r\n        var item = namesArray[i];\r\n        if (!((\"create\" + item.shortName) in self)) {\r\n          if (typeof factoryFunc === 'function') {\r\n            self[\"create\" + item.shortName] = factoryFunc;\r\n          } else {\r\n            self[\"create\" + item.shortName] = creatorFnc;\r\n          }\r\n        }\r\n\r\n        var typePos = classTypes.indexOf(type);\r\n        if (typePos == -1) {\r\n          //new type\r\n          typePos = classTypes.push(type) - 1;\r\n          var fn = item.fullName;\r\n          consolidatedClassNames[typePos] = item.fullName;\r\n        };\r\n\r\n        classNames[item.fullName] = typePos;\r\n\r\n        var pending = pendingResolutions[item.fullName] || [];\r\n        if (pending.length > 0) {\r\n          pending.forEach(function(t) {\r\n            t(type);\r\n          });\r\n          pendingResolutions[item.fullName] = [];\r\n        }\r\n      }\r\n      if (parent) {\r\n        parent.registerType.apply(parent, arguments);\r\n      }\r\n      if (!type.name) {\r\n        try{ type.name = namesArray[0].shortName; }catch(err){ }\r\n      }\r\n    };\r\n\r\n\r\n    var _converters = {\r\n      from: {},\r\n      to: {}\r\n    };\r\n    this.converters = _converters;\r\n\r\n    this.convertTo = function(value, tType, eType /*if Array*/ , options) {\r\n      Guard.requireValue(\"typeOrName\", tType);\r\n\r\n      if (Guard.isNullOrUndefined(value))\r\n        return value;\r\n\r\n      var sourceTypeName = Container.getTypeName(value);\r\n      var sourceType = Container.resolveType(sourceTypeName);\r\n      var sourceTypeName = Container.resolveName(sourceType);\r\n      var targetType = Container.resolveType(tType);\r\n      var targetTypeName = Container.resolveName(targetType);\r\n\r\n      var result;\r\n      try {\r\n        if (typeof targetType['from' + sourceTypeName] === 'function') {\r\n          // target from\r\n          result = targetType['from' + sourceTypeName].apply(targetType, arguments);\r\n\r\n        } else if (typeof sourceType['to' + targetTypeName] === 'function') {\r\n          // source to\r\n          result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\r\n          // target from source\r\n          result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\r\n\r\n        } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\r\n          // source to target\r\n          result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\r\n\r\n        } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\r\n          result = value;\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\r\n          // target from anything\r\n          result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\r\n\r\n        } else {\r\n          throw \"converter not found\";\r\n        }\r\n      } catch (e) {\r\n        Guard.raise(new Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\r\n      }\r\n\r\n      if (targetType === $data.Array && eType && Array.isArray(result)) {\r\n        for (var i = 0; i < result.length; i++) {\r\n          result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n    this.registerConverter = function(target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\r\n      //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\r\n      //registerConverter($data.Guid, $data.String, fn, fn);\r\n\r\n      var targetName = Container.resolveName(target);\r\n      if (Container.isTypeRegistered(sourceOrToConverters)) {\r\n        //isSource\r\n        _converters.to[targetName] = _converters.to[targetName] || {};\r\n        _converters.from[targetName] = _converters.from[targetName] || {};\r\n\r\n        var sourceName = Container.resolveName(sourceOrToConverters);\r\n\r\n        if (toConverterOrFromConverters)\r\n          _converters.to[targetName][sourceName] = toConverterOrFromConverters;\r\n        if (fromConverter)\r\n          _converters.from[targetName][sourceName] = fromConverter;\r\n\r\n      } else {\r\n        // converterGroup\r\n\r\n        //fromConverters\r\n        if (_converters.to[targetName]) {\r\n          _converters.to[targetName] = $data.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\r\n        } else {\r\n          _converters.to[targetName] = sourceOrToConverters;\r\n        }\r\n\r\n        //toConverters\r\n        if (_converters.from[targetName]) {\r\n          _converters.from[targetName] = $data.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\r\n        } else {\r\n          _converters.from[targetName] = toConverterOrFromConverters;\r\n        }\r\n      }\r\n    };\r\n\r\n    this.createOrGetNamespace = function(parts, root) {\r\n      for (var i = 0; i < parts.length; i++) {\r\n        var part = parts[i];\r\n        if (!root[part]) {\r\n          var ns = {};\r\n          ns.__namespace = true;\r\n          root[part] = ns;\r\n        }\r\n        root = root[part];\r\n      }\r\n      return root;\r\n    };\r\n  }\r\n","export var StringFunctions = {\r\n    startsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) === 0;\r\n    },\r\n    endsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.slice(-str.length) === str;\r\n    },\r\n    contains: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) >= 0;\r\n    }\r\n};\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.Logger', $data.TraceBase, null, {\r\n    log: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.log.apply(console, arguments);\r\n    },\r\n    warn: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.warn.apply(console, arguments);\r\n    },\r\n    error: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.error.apply(console, arguments);\r\n    },\r\n\r\n    getDateFormat: function () {\r\n        var date = new Date();\r\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.TraceBase', null, null, {\r\n    log: function () { },\r\n    warn: function () { },\r\n    error: function () { }\r\n});\r\n\r\n$data.Trace = new $data.TraceBase();\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport { StringFunctions } from './Extensions.js'\r\nimport {ContainerInstance, ContainerCtor} from './Container.js'\r\n\r\n\r\n$data.StringFunctions = StringFunctions\r\n\r\nvar _modelHolder = null;\r\n$data.setModelContainer = function(modelHolder){\r\n  _modelHolder = modelHolder;\r\n};\r\n\r\n$data.defaults = $data.defaults || {}\r\n$data.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\r\n$data.defaults.openTypeDefaultType = '$data.Object';\r\n$data.defaults.openTypeDefaultValue = function() { return {}; };\r\n\r\n$data.__global = process.browser ? window : global\r\n$data.setGlobal = function(obj){\r\n  $data.__global = obj;\r\n};\r\n\r\n(function init($data) {\r\n\r\n  function il(msg) {\r\n    if (typeof intellisense !== 'undefined') {\r\n      if (!intellisense.i) {\r\n        intellisense.i = 0;\r\n      }\r\n      intellisense.i = intellisense.i + 1;\r\n      intellisense.logMessage(msg + \":\" + intellisense.i);\r\n    }\r\n  }\r\n\r\n  function MemberDefinition(memberDefinitionData, definedClass) {\r\n\r\n    ///<field name=\"name\" type=\"String\">*</field>\r\n    ///<field name=\"dataType\" type=\"Object\">*</field>\r\n    ///<field name=\"elementType\" type=\"Object\"></field>\r\n    ///<field name=\"kind\" type=\"String\" />\r\n    ///<field name=\"classMember\" type=\"Boolean\" />\r\n    ///<field name=\"set\" type=\"Function\" />\r\n    ///<field name=\"get\" type=\"Function\" />\r\n    ///<field name=\"value\" type=\"Object\" />\r\n    ///<field name=\"initialValue\" type=\"Object\" />\r\n    ///<field name=\"method\" type=\"Function\" />\r\n    ///<field name=\"enumerable\" type=\"Boolean\" />\r\n    ///<field name=\"configurable\" type=\"Boolean\" />\r\n    ///<field name=\"key\" type=\"Boolean\" />\r\n    ///<field name=\"computed\" type=\"Boolean\" />\r\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\r\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\r\n\r\n    this.kind = MemberTypes.property;\r\n    //this.definedBy = definedClass;\r\n    Object.defineProperty(this, 'definedBy', {\r\n      value: definedClass,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false\r\n    });\r\n    if (memberDefinitionData) {\r\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\r\n        this.method = memberDefinitionData;\r\n        this.kind = MemberTypes.method;\r\n      } else {\r\n        this.enumerable = true;\r\n        this.configurable = true;\r\n        if (typeof memberDefinitionData === \"number\") {\r\n          this.value = memberDefinitionData;\r\n          this.type = $data.Number;\r\n          this.dataType = $data.Number;\r\n        } else if (typeof memberDefinitionData === \"string\") {\r\n          this.value = memberDefinitionData;\r\n          this.dataType = $data.String;\r\n          this.type = $data.String;\r\n        } else {\r\n          for (var item in memberDefinitionData) {\r\n            if (memberDefinitionData.hasOwnProperty(item)) {\r\n              this[item] = memberDefinitionData[item];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (this.type !== undefined) {\r\n        this.dataType = this.dataType || this.type;\r\n      } else {\r\n        this.type = this.dataType;\r\n      }\r\n\r\n      this.originalType = this.type;\r\n      if (this.elementType !== undefined) {\r\n        this.originalElementType = this.elementType;\r\n      }\r\n    }\r\n  }\r\n  MemberDefinition.prototype.createPropertyDescriptor = function(classFunction, value) {\r\n    ///<returns type=\"Object\" />\r\n    var pd = this;\r\n    var result = {\r\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\r\n      configurable: this.configurable == undefined ? true : this.configurable\r\n    };\r\n    if (this.set && this.get) {\r\n      result.set = this.set;\r\n      result.get = this.get;\r\n    } else if (\"value\" in this || value) {\r\n      result.value = value || this.value;\r\n      //TODO\r\n      //result.writable = this.writable;\r\n      result.writable = true;\r\n    } else {\r\n      result.set = function(value) {\r\n        this.storeProperty(pd, value);\r\n      };\r\n      result.get = function() {\r\n        return this.retrieveProperty(pd);\r\n      };\r\n    }\r\n    return result;\r\n  };\r\n  MemberDefinition.prototype.createStorePropertyDescriptor = function(value) {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: pd.configurable,\r\n      value: value\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createGetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(callback, tran) {\r\n        return this.getProperty(pd, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createSetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(value, callback, tran) {\r\n        return this.setProperty(pd, value, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.translateDefinition = function(memDef, name, classFunction) {\r\n    var holder = classFunction;\r\n    var memberDefinition;\r\n\r\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\r\n      holder = Container.resolveType(memDef.type);\r\n      if (typeof holder.translateDefinition === 'function') {\r\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\r\n        memberDefinition.name = memberDefinition.name || name;\r\n      } else {\r\n        holder = classFunction;\r\n      }\r\n    }\r\n\r\n\r\n    if (!(memberDefinition instanceof MemberDefinition)) {\r\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\r\n      memberDefinition.name = name;\r\n    }\r\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\r\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\r\n\r\n\r\n    var t = memberDefinition.type;\r\n    var et = memberDefinition.elementType;\r\n\r\n    function addChildThunk(referencedType) {\r\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\r\n        classFunction.childResolverThunks.push(function() {\r\n          if (referencedType.resolveForwardDeclarations) {\r\n            referencedType.resolveForwardDeclarations();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    addChildThunk(t);\r\n    addChildThunk(et);\r\n\r\n    if (\"string\" === typeof t) {\r\n      if (\"@\" === t[0]) {\r\n        memberDefinition.type = t.substr(1);\r\n        memberDefinition.dataType = t.substr(1);\r\n      } else {\r\n        //forward declared types get this callback when type is registered\r\n        classFunction.resolverThunks.push(function() {\r\n          var rt = classFunction.container.resolveType(t);\r\n          addChildThunk(rt);\r\n          memberDefinition.type = rt;\r\n          memberDefinition.dataType = rt;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (et) {\r\n      if (\"string\" === typeof et) {\r\n        if (\"@\" === et[0]) {\r\n          memberDefinition.elementType = et.substr(1);\r\n        } else {\r\n          //forward declared types get this callback when type is registered\r\n          classFunction.resolverThunks.push(function() {\r\n            var rt = classFunction.container.resolveType(et);\r\n            addChildThunk(rt);\r\n            memberDefinition.elementType = rt;\r\n          });\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //if (!classFunction)\r\n\r\n    classFunction.resolveForwardDeclarations = function() {\r\n      classFunction.resolveForwardDeclarations = function() {};\r\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\r\n      this.resolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.resolverThunks = [];\r\n      this.childResolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.childResolverThunks = [];\r\n    }\r\n\r\n    return memberDefinition;\r\n  };\r\n\r\n  MemberDefinition.prototype.toJSON = function() {\r\n    var property = {};\r\n    for (var name in this) {\r\n      if (name !== 'defineBy' && name !== 'storageModel') {\r\n        if ((name === 'type' || name === 'dataType') && (this[name] && typeof this[name] === 'function')) {\r\n          try {\r\n            property[name] = Container.resolveName(this[name]);\r\n          } catch (e) {\r\n            property[name] = this[name];\r\n          }\r\n        } else {\r\n          property[name] = this[name];\r\n        }\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  $data.MemberDefinition = MemberDefinition;\r\n\r\n  var memberDefinitionPrefix = '$';\r\n\r\n  function MemberDefinitionCollection() {};\r\n  MemberDefinitionCollection.prototype = {\r\n    clearCache: function() {\r\n      this.arrayCache = undefined;\r\n      this.pubMapPropsCache = undefined;\r\n      this.keyPropsCache = undefined;\r\n      this.propByTypeCache = undefined;\r\n      this.pubMapMethodsCache = undefined;\r\n      this.pubMapPropNamesCache = undefined;\r\n    },\r\n    asArray: function() {\r\n      if (!this.arrayCache) {\r\n        this.arrayCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0)\r\n            this.arrayCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.arrayCache;\r\n    },\r\n    getPublicMappedProperties: function() {\r\n      if (!this.pubMapPropsCache) {\r\n        this.pubMapPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\r\n    },\r\n    getPublicMappedPropertyNames: function() {\r\n      if (!this.pubMapPropNamesCache) {\r\n        this.pubMapPropNamesCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropNamesCache.push(this[i].name);\r\n        }\r\n      }\r\n      return this.pubMapPropNamesCache;\r\n    },\r\n    getKeyProperties: function() {\r\n      if (!this.keyPropsCache) {\r\n        this.keyPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key)\r\n            this.keyPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.keyPropsCache;\r\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\r\n    },\r\n    getPublicMappedMethods: function() {\r\n      if (!this.pubMapMethodsCache) {\r\n        this.pubMapMethodsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/ )\r\n            this.pubMapMethodsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapMethodsCache;\r\n    },\r\n    getPropertyByType: function(type) {\r\n      if (!this.propByTypeCache) {\r\n        this.propByTypeCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type)\r\n            this.propByTypeCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.propByTypeCache;\r\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\r\n    },\r\n    getMember: function(name) {\r\n      return this[memberDefinitionPrefix + name];\r\n    },\r\n    setMember: function(value) {\r\n      this[memberDefinitionPrefix + value.name] = value;\r\n    }\r\n  };\r\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\r\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\r\n\r\n  function ClassEngineBase() {\r\n    this.classNames = {};\r\n  }\r\n\r\n  function MemberTypes() {\r\n    ///<field name=\"method\" type=\"string\" />\r\n    ///<field name=\"property\" type=\"string\" />\r\n    ///<field name=\"field\" type=\"string\" />\r\n    ///<field name=\"complexProperty\" type=\"string\" />\r\n  }\r\n  MemberTypes.__enum = true;\r\n\r\n  MemberTypes.method = \"method\";\r\n  MemberTypes.property = \"property\";\r\n  MemberTypes.navProperty = \"navProperty\";\r\n  MemberTypes.complexProperty = \"complexProperty\";\r\n  MemberTypes.field = \"field\";\r\n\r\n  $data.MemberTypes = MemberTypes;\r\n\r\n  //function classToJSON() {\r\n  //    var ret = {};\r\n  //    for (var i in this) {\r\n  //        if (this.hasOwnProperty(i)) {\r\n  //            ret[i] = this[i];\r\n  //        }\r\n  //    }\r\n  //    return ret;\r\n  //}\r\n  //$data.Base.toJSON = classToJSON;\r\n\r\n  ClassEngineBase.prototype = {\r\n\r\n    //getClass: function (classReference) {\r\n    //},\r\n\r\n    //getProperties: function (classFunction) {\r\n    //    return classFunction.propertyDefinitions;\r\n    //},\r\n\r\n    define: function(className, baseClass, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      return this.defineEx(className, [{\r\n        type: baseClass\r\n      }], container, instanceDefinition, classDefinition);\r\n    },\r\n    defineEx: function(className, baseClasses, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [\r\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\r\n      ///                         { type: $data.Mixin1, },\r\n      ///                         { type: $data.Mixin2, },\r\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\r\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\r\n      ///                     ], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      container = container || $data.Container;\r\n\r\n      if (baseClasses.length == 0) {\r\n        baseClasses.push({\r\n          type: $data.Base\r\n        });\r\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\r\n        baseClasses[0].type = $data.Base;\r\n      }\r\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\r\n        if (typeof baseClasses[i] === 'function')\r\n          baseClasses[i] = {\r\n            type: baseClasses[i]\r\n          };\r\n      }\r\n\r\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\r\n\r\n      var classNameParts = className.split('.');\r\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\r\n\r\n      $data.models = $data.models || {}\r\n      var root = container === $data.Container ? $data.models : container;\r\n      root = $data.Container.createOrGetNamespace(classNameParts, root)\r\n\r\n      var classFunction = null;\r\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\r\n      classFunction.fullName = className;\r\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\r\n      //classFunction.name = shortClassName;\r\n      classFunction.container = container;\r\n      classFunction.container.registerType(className, classFunction);\r\n\r\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\r\n\r\n\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        if (instanceDefinition && instanceDefinition.constructor) {\r\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\r\n        }\r\n      }\r\n\r\n      root[shortClassName] = this.classNames[className] = classFunction;\r\n\r\n      if(classNameParts[0] == '$data') {\r\n        var _classNameParts = [].concat(classNameParts)\r\n        _classNameParts.shift()\r\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data)\r\n        _root[shortClassName] = classFunction\r\n      }\r\n      if(_modelHolder && container == $data.Container){\r\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder)\r\n        innerNS[shortClassName] = classFunction\r\n      }\r\n\r\n      //classFunction.toJSON = classToJSON;\r\n      var baseCount = classFunction.baseTypes.length;\r\n      for (var i = 0; i < baseCount; i++) {\r\n        var b = classFunction.baseTypes[i];\r\n        if (\"inheritedTypeProcessor\" in b) {\r\n          b.inheritedTypeProcessor(classFunction);\r\n        }\r\n      }\r\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\r\n      //classFunction.constructor = instanceDefinition.constructor;\r\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\r\n      return classFunction;\r\n    },\r\n    classFunctionBuilder: function(name, base, classDefinition, instanceDefinition) {\r\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\r\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' +\r\n        body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\r\n    },\r\n    bodyBuilder: function(bases, classDefinition, instanceDefinition) {\r\n      var mixin = '';\r\n      var body = '';\r\n      var propagation = '';\r\n\r\n      for (var i = 0, l = bases.length; i < l; i++) {\r\n        var base = bases[i];\r\n        var index = i;\r\n        if (index == 0) { //ctor func\r\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\r\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\r\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\r\n          }\r\n        } else {\r\n          if (base && base.type && base.propagateTo) {\r\n            //propagation\r\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' +\r\n              index + '].params, this); \\n';\r\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' +\r\n              '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\r\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\r\n            //mixin\r\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\r\n          }\r\n        }\r\n      }\r\n      if (instanceDefinition && instanceDefinition.constructor != Object)\r\n        body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\r\n\r\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\r\n    },\r\n\r\n    buildType: function(classFunction, baseClasses, instanceDefinition, classDefinition) {\r\n      var baseClass = baseClasses[0].type;\r\n      classFunction.inheritsFrom = baseClass;\r\n\r\n      if (baseClass) {\r\n        classFunction.prototype = Object.create(baseClass.prototype);\r\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\r\n        classFunction.memberDefinitions.clearCache();\r\n\r\n        var staticDefs = baseClass.staticDefinitions;\r\n        if (staticDefs) {\r\n          staticDefs = staticDefs.asArray();\r\n          if (staticDefs) {\r\n            for (var i = 0; i < staticDefs.length; i++) {\r\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n            }\r\n          }\r\n        }\r\n        classFunction.baseTypes = baseClass.baseTypes ? [].concat(baseClass.baseTypes) : [];\r\n        for (var i = 0; i < baseClasses.length; i++) {\r\n          classFunction.baseTypes.push(baseClasses[i].type);\r\n        }\r\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\r\n        if (!classFunction.isAssignableTo) {\r\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\r\n            value: function(type) {\r\n              return this === type || this.baseTypes.indexOf(type) >= 0;\r\n            },\r\n            writable: false,\r\n            enumerable: false,\r\n            configurable: false\r\n          });\r\n        }\r\n      }\r\n\r\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\r\n      if (classDefinition) {\r\n        if(openTypeDefinition) delete classDefinition.openType;\r\n        this.buildStaticMembers(classFunction, classDefinition);\r\n\r\n        if (classDefinition.constructor)\r\n          classFunction.classConstructor = classDefinition.constructor;\r\n      }\r\n\r\n      if (instanceDefinition) {\r\n\r\n        //build open type member\r\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\r\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\r\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\r\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\r\n          if (typeof classFunction.openType == \"string\") {\r\n            openTypePropertyName = classFunction.openType;\r\n          }\r\n\r\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\r\n          if(definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\r\n            Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n          }\r\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\r\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\r\n            if(memberType !== openTypeDefaultType){\r\n              Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n            }\r\n          }\r\n          if(!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]){\r\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : (function() { return {}; });\r\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue:  defaultValue };\r\n          }\r\n        }\r\n\r\n        this.buildInstanceMembers(classFunction, instanceDefinition);\r\n      }\r\n\r\n      var mixins = [].concat(baseClasses);\r\n      mixins.shift();\r\n      if (Object.keys(mixins).length > 0)\r\n        this.buildInstanceMixins(classFunction, mixins);\r\n\r\n      classFunction.__class = true;\r\n\r\n      classFunction.prototype.constructor = classFunction;\r\n\r\n      Object.defineProperty(classFunction.prototype, \"getType\", {\r\n        value: function() {\r\n          return classFunction;\r\n        },\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false\r\n      });\r\n    },\r\n\r\n    addMethod: function(holder, name, method, propagation) {\r\n      if (!propagation || (typeof intellisense !== 'undefined')) {\r\n        holder[name] = method;\r\n      } else {\r\n        holder[name] = function() {\r\n          return method.apply(this[propagation], arguments);\r\n        };\r\n      }\r\n    },\r\n\r\n    addProperty: function(holder, name, propertyDescriptor, propagation) {\r\n\r\n      //holder[name] = {};\r\n\r\n      if (propagation) {\r\n        propertyDescriptor.configurable = true;\r\n        if (propertyDescriptor.get) {\r\n          var origGet = propertyDescriptor.get;\r\n          propertyDescriptor.get = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            return origGet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n        if (propertyDescriptor.set) {\r\n          var origSet = propertyDescriptor.set;\r\n          propertyDescriptor.set = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            origSet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n      }\r\n\r\n      Object.defineProperty(holder, name, propertyDescriptor);\r\n    },\r\n\r\n    addField: function(holder, name, field) {\r\n      Guard.raise(\"not implemented\");\r\n    },\r\n\r\n    buildMethod: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\r\n    },\r\n\r\n    buildProperty: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\r\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\r\n\r\n      //if lazyload TODO\r\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true &&\r\n        !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\r\n        var pdGetMethod = memberDefinition.createGetMethod();\r\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\r\n\r\n        var pdSetMethod = memberDefinition.createSetMethod();\r\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\r\n      }\r\n    },\r\n\r\n\r\n    buildMember: function(classFunction, memberDefinition, propagation, memberCollectionName) {\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\r\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\r\n      classFunction[memberCollectionName].setMember(memberDefinition);\r\n\r\n      switch (memberDefinition.kind) {\r\n        case MemberTypes.method:\r\n          this.buildMethod(classFunction, memberDefinition, propagation);\r\n          break;\r\n        case MemberTypes.navProperty:\r\n        case MemberTypes.complexProperty:\r\n        case MemberTypes.property:\r\n          this.buildProperty(classFunction, memberDefinition, propagation);\r\n          break;\r\n        default:\r\n          Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\r\n      }\r\n    },\r\n\r\n    buildStaticMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          memberDefinition.classMember = true;\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    buildInstanceMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    copyMembers: function(sourceType, targetType) {\r\n      ///<param name=\"sourceType\" type=\"Function\" />\r\n      ///<param name=\"targetType\" type=\"Function\" />\r\n      function il(msg) {\r\n        if (typeof intellisense === 'undefined') {\r\n          return;\r\n        }\r\n        intellisense.logMessage(msg);\r\n      }\r\n\r\n      Object.keys(sourceType.prototype).forEach(function(item, i, src) {\r\n        if (item !== 'constructor' && item !== 'toString') {\r\n          il(\"copying item:\" + item);\r\n          targetType.prototype[item] = sourceType[item];\r\n        }\r\n      });\r\n    },\r\n\r\n    buildInstanceMixins: function(classFunction, mixinList) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"mixinList\" type=\"Array\"></param>\r\n\r\n      classFunction.mixins = classFunction.mixins || [];\r\n      classFunction.propagations = classFunction.propagations || [];\r\n\r\n      for (var i = 0; i < mixinList.length; i++) {\r\n        var item = mixinList[i];\r\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\r\n        if (item.propagateTo) {\r\n          this.buildInstancePropagation(classFunction, item);\r\n          classFunction.propagations.push(item);\r\n          classFunction.propagations[item.type.name] = true;\r\n        } else {\r\n          this.buildInstanceMixin(classFunction, item);\r\n          classFunction.mixins.push(item);\r\n          classFunction.mixins[item.type.name] = true;\r\n        }\r\n      };\r\n    },\r\n    buildInstanceMixin: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i]);\r\n        }\r\n      }\r\n\r\n      if (typeObj.type.staticDefinitions) {\r\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\r\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\r\n          var itemName = staticDefs[i].name;\r\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n          }\r\n        }\r\n      }\r\n    },\r\n    buildInstancePropagation: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n  var Class\r\n  $data.Class = Class = new ClassEngineBase();\r\n\r\n\r\n  $data.ContainerClass = ContainerCtor;\r\n\r\n  var c;\r\n  $data.Container = c = ContainerInstance\r\n\r\n  $data.createContainer = function() {\r\n    return new ContainerCtor($data.Container);\r\n  }\r\n\r\n  var storeProperty = function(memberDefinition, value) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    if (!this[backingFieldName]) {\r\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\r\n    } else {\r\n      this[backingFieldName] = value;\r\n    }\r\n  };\r\n  var retrieveProperty = function(memberDefinition) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    return this[backingFieldName];\r\n  };\r\n\r\n\r\n  $data.Class.define('$data.Base', function Base() {}, null, {\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    setProperty: function(memberDefinition, value, callback) {\r\n      this[memberDefinition.name] = value;\r\n      callback();\r\n    },\r\n    getProperty: function(memberDefinition, callback) {\r\n      callback.apply(this, [this[memberDefinition.name]]);\r\n    }\r\n  }, {\r\n    create: function() {\r\n      return Container.createInstance(this, arguments);\r\n    },\r\n    extend: function(name, container, instanceDefinition, classDefinition) {\r\n      if (container && !(container instanceof ContainerCtor)) {\r\n        classDefinition = instanceDefinition;\r\n        instanceDefinition = container;\r\n        container = undefined;\r\n      }\r\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\r\n    },\r\n    getMemberDefinition: function(name) {\r\n      return this.memberDefinitions.getMember(name);\r\n    },\r\n    addProperty: function(name, getterOrType, setterOrGetter, setter) {\r\n      var _getter = getterOrType;\r\n      var _setter = setterOrGetter;\r\n      var _type;\r\n      if (typeof _getter === 'string') {\r\n        _type = getterOrType;\r\n        _getter = setterOrGetter;\r\n        _setter = setter;\r\n      }\r\n\r\n      var propDef = {\r\n        notMapped: true,\r\n        storeOnObject: true,\r\n        get: typeof _getter === 'function' ? _getter : function() {},\r\n        set: typeof _setter === 'function' ? _setter : function() {},\r\n        type: _type\r\n      };\r\n\r\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\r\n      $data.Class.buildMember(this, memberDefinition);\r\n\r\n      this.memberDefinitions.clearCache();\r\n\r\n      return this;\r\n    },\r\n    addMember: function(name, definition, isClassMember) {\r\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\r\n\r\n      if (isClassMember) {\r\n        memberDefinition.classMember = true;\r\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\r\n        this.staticDefinitions.clearCache();\r\n      } else {\r\n        $data.Class.buildMember(this, memberDefinition);\r\n        this.memberDefinitions.clearCache();\r\n      }\r\n      return this;\r\n    },\r\n    describeField: function(name, definition) {\r\n      var memDef = this.memberDefinitions.getMember(name);\r\n      if (!memDef) {\r\n        this.addMember(name, definition);\r\n      } else {\r\n        Guard.raise(new Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\r\n      }\r\n      return this;\r\n    },\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    'from$data.Object': function(value) {\r\n      return value;\r\n    }\r\n  });\r\n\r\n\r\n  //override after typeSystem initialized\r\n\r\n\r\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\r\n    constructor: function(paramIndex) {\r\n      ///<param name=\"paramIndex\" type=\"integer\" />\r\n      this.paramIndex = paramIndex;\r\n    },\r\n    paramIndex: {}\r\n  });\r\n  /*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n      constructor: function (typeName) {\r\n          ///<param name=\"paramIndex\" type=\"integer\">\r\n          this.typeName = typeName;\r\n      },\r\n      typeName: {}\r\n  });*/\r\n\r\n  //var e = new Entity();\r\n\r\n\r\n  /*$data.Interface = Class.define(\"Interface\", null, null, {\r\n      constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n  },\r\n  {\r\n      define: function (name, definition) {\r\n          var result = Class.define(name, $data.Interface, null, null, definition);\r\n          delete result.__class;\r\n          result.__interface = true;\r\n          return result;\r\n      }\r\n  });\r\n\r\n\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n      propertyChanged: { dataType: $data.Event }\r\n  }, {\r\n      createFromInstance: function(instance) {\r\n          var propNames = instance.getClass().memberDefinitions.f\r\n      }\r\n  });*/\r\n\r\n\r\n\r\n})($data);\r\n\r\n$data.defaultErrorCallback = function() {\r\n  //console.log('DEFAULT ERROR CALLBACK:');\r\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\r\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n    (console.error || console.log).call(console, arguments[0]);\r\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n  } else {\r\n    if (arguments[0] instanceof Error) {\r\n      Guard.raise(arguments[0]);\r\n    } else {\r\n      Guard.raise(new Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\r\n    }\r\n  }\r\n};\r\n$data.defaultSuccessCallback = function() { /*console.log('DEFAULT SUCCES CALLBACK');*/ };\r\n$data.defaultNotifyCallback = function() { /*console.log('DEFAULT NOTIFY CALLBACK');*/ };\r\n\r\n$data.typeSystem = {\r\n  __namespace: true,\r\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\r\n  //mix: function (type, mixin) {\r\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\r\n  //    type.mixins = type.mixins || [];\r\n  //    type.mixins.push(mixin);\r\n  //    return type;\r\n  //},\r\n  extend: function(target) {\r\n    /// <summary>\r\n    /// Extends an object with properties of additional parameters.\r\n    /// </summary>\r\n    /// <signature>\r\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\r\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\r\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\r\n    /// </signature>\r\n    /// <returns></returns>\r\n    if (typeof target !== 'object' && typeof target !== 'function')\r\n      Guard.raise('Target must be object or function');\r\n\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var obj = arguments[i];\r\n      if (obj === null || typeof obj === 'undefined')\r\n        continue;\r\n      for (var key in obj) {\r\n        target[key] = obj[key];\r\n      }\r\n    }\r\n    return target;\r\n  },\r\n  createCallbackSetting: function(callBack, defaultSetting) {\r\n    var setting = {\r\n      success: $data.defaultSuccessCallback,\r\n      error: $data.defaultErrorCallback,\r\n      notify: $data.defaultNotifyCallback\r\n    };\r\n\r\n    if (defaultSetting != undefined && defaultSetting != null) {\r\n      setting = defaultSetting;\r\n    }\r\n\r\n    var result;\r\n    if (callBack == null || callBack == undefined) {\r\n      result = setting;\r\n\r\n    } else if (typeof callBack == 'function') {\r\n      result = this.extend(setting, {\r\n        success: callBack\r\n      });\r\n\r\n    } else {\r\n      result = this.extend(setting, callBack);\r\n    }\r\n\r\n    function wrapCode(fn) {\r\n      var t = this;\r\n\r\n      function r() {\r\n        fn.apply(t, arguments);\r\n        fn = function() {}\r\n      }\r\n      return r;\r\n    }\r\n\r\n    if (typeof result.error === 'function')\r\n      result.error = wrapCode(result.error);\r\n\r\n    return result;\r\n  },\r\n  createCtorParams: function(source, indexes, thisObj) {\r\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\r\n    ///<param name=\"indexes\" type=\"Array\" />\r\n    ///<param name=\"thisObj\" type=\"Object\" />\r\n    if (indexes) {\r\n      var paramArray = [];\r\n      for (var i = 0, l = indexes.length; i < l; i++) {\r\n        var item = i;\r\n        if (indexes[item] instanceof $data.Class.ConstructorParameter)\r\n          paramArray.push(source[indexes[item].paramIndex]);\r\n        else if (typeof indexes[item] === \"function\")\r\n          paramArray.push(indexes[item].apply(thisObj));\r\n        else\r\n          paramArray.push(indexes[item]);\r\n      }\r\n      return paramArray;\r\n    }\r\n    return source;\r\n  },\r\n  writePropertyValues: function(obj) {\r\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\r\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(\r\n        function(md) {\r\n          return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\r\n        }\r\n      ));\r\n    }\r\n  },\r\n  writeProperties: function(obj, members) {\r\n    var defines = {};\r\n    for (var i = 0, l = members.length; i < l; i++) {\r\n      var memDef = members[i];\r\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\r\n    }\r\n\r\n    Object.defineProperties(obj, defines);\r\n\r\n  },\r\n  writeProperty: function(obj, member, value) {\r\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\r\n    if (memDef) {\r\n      var propDef = memDef.createPropertyDescriptor(null, value);\r\n      //////OPTIMIZATION\r\n      Object.defineProperty(obj, memDef.name, propDef);\r\n    }\r\n  }\r\n};\r\n\r\n$data.debug = function() {\r\n  (console.debug || console.log).apply(console, arguments);\r\n};\r\n\r\n$data.debugWith = function() {\r\n  var cArgs = arguments;\r\n  return function(r) {\r\n    (console.debug || console.log).apply(console, cArgs);\r\n    if ((typeof Error !== 'undefined' && r instanceof Error) ||\r\n      (typeof Exception !== 'undefined' && r instanceof Exception)) {\r\n      (console.error || console.log).apply(console, arguments);\r\n    } else {\r\n      (console.debug || console.log).apply(console, arguments);\r\n    }\r\n  }\r\n};\r\n\r\n$data.fdebug = {\r\n  success: $data.debugWith('success'),\r\n  error: $data.debugWith('error')\r\n};\r\n\r\n\r\nexport var $C = function() {\r\n  $data.Class.define.apply($data.Class, arguments);\r\n}\r\nexport var Container = $data.Container\r\nexport var MemberDefinition = $data.MemberDefinition\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport btoa from 'btoa'\r\n\r\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\r\n$data.Blob = function Blob(){};\r\n\r\n$data.Blob.createFromHexString = function(value){\r\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]){\r\n        Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Blob', value));\r\n    }else{\r\n        //if (value.length & 1) value = '0' + value;\r\n        var arr = new (bufferOrArray)(value.length >> 1);\r\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\r\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n};\r\n\r\n$data.Blob.toString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += String.fromCharCode(value[i]);\r\n    }\r\n\r\n    return s;\r\n};\r\n\r\n$data.Blob.toBase64 = function(value){\r\n    if (!value || !value.length) return null;\r\n    return btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Blob.toArray = function(src){\r\n    if (!src || !src.length) return null;\r\n    var arr = new Array(src.length);\r\n    for (var i = 0; i < src.length; i++){\r\n        arr[i] = src[i];\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\r\n\r\n$data.Blob.toHexString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += ('00' + value[i].toString(16)).slice(-2);\r\n    }\r\n\r\n    return s.toUpperCase();\r\n};\r\n\r\n$data.Blob.toDataURL = function(value){\r\n    if (!value || !value.length) return null;\r\n    return 'data:application/octet-stream;base64,' + btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], $data.Blob);\r\n$data.Container.registerConverter('$data.Blob',{\r\n    '$data.String': function (value){\r\n        if (value && value.length){\r\n            var blob = new (bufferOrArray)(value.length);\r\n            for (var i = 0; i < value.length; i++){\r\n                blob[i] = value.charCodeAt(i);\r\n            }\r\n\r\n            return blob;\r\n        }else return null;\r\n    },\r\n    '$data.Array': function(value){\r\n        return new (bufferOrArray)(value);\r\n    },\r\n    '$data.Number': function(value){\r\n        return new (bufferOrArray)($data.packIEEE754(value, 11, 52).reverse());\r\n    },\r\n    '$data.Boolean': function(value){\r\n        return new (bufferOrArray)([value | 0]);\r\n    },\r\n    'default': function(value){\r\n        if (typeof Blob !== 'undefined' && value instanceof Blob){\r\n            var req = new XMLHttpRequest();\r\n            req.open('GET', URL.createObjectURL(value), false);\r\n            req.send(null);\r\n            return $data.Container.convertTo(req.response, $data.Blob);\r\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\r\n            return new (bufferOrArray)(new Uint8Array(value));\r\n        }else if (value instanceof Uint8Array){\r\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\r\n            //else\r\n            return value;\r\n        }else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n            return value;\r\n        }else*/ if (value.buffer){\r\n            return new (bufferOrArray)(value);\r\n        }else if (typeof value == 'object' && value instanceof Object){\r\n            var arr = [];\r\n            for (var i in value){\r\n                arr[i] = value[i];\r\n            }\r\n            if (!arr.length) throw 0;\r\n            return new (bufferOrArray)(arr);\r\n        }\r\n        throw 0;\r\n    }\r\n}, {\r\n    '$data.String': function(value){\r\n        return $data.Blob.toString(value);\r\n    },\r\n    '$data.Array': function(value){\r\n        return $data.Blob.toArray(value);\r\n    }\r\n});\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Container.registerConverter('$data.Boolean', {\r\n    '$data.String': function(value){\r\n        if (value.toLowerCase() == 'true') return true;\r\n        if (value.toLowerCase() == 'false') return false;\r\n\r\n        return !!value;\r\n    },\r\n    'default': function(value){\r\n        return !!value;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Integer', {\r\n    'default': function (value) {\r\n        if (value === Number.POSITIVE_INFINITY ||\r\n            value === Number.NEGATIVE_INFINITY ||\r\n            value === Number.MAX_VALUE ||\r\n            value === Number.MIN_VALUE) {\r\n            return value;\r\n        }\r\n\r\n        var r = parseInt(+value, 10);\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int32', {\r\n    'default': function (value) {\r\n        return value | 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Number', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Byte', {\r\n    'default': function(value){\r\n        return (value | 0) & 0xff;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Date', {\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.DateTimeOffset', {\r\n    '$data.Date': function(value){\r\n        return value;\r\n    },\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var time = '';\r\n        time += ('00' + matches[1]).slice(-2);\r\n        time += ':' + ('00' + matches[2]).slice(-2);\r\n        if (matches[4]) {\r\n            time += ':' + ('00' + matches[4]).slice(-2);\r\n        } else {\r\n            time += ':00';\r\n        }\r\n        if (matches[6])\r\n            time += '.' + (matches[6] + '000').slice(0, 3);\r\n\r\n        return time;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Time', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var metrics = [1000, 60, 60];\r\n            var result = [0, 0, 0, value | 0];\r\n\r\n            for (var i = 0; i < metrics.length; i++) {\r\n                result[metrics.length - (i + 1)] = (result[metrics.length - i] / metrics[i]) | 0;\r\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\r\n            }\r\n\r\n            var time = '';\r\n            for (var i = 0; i < result.length; i++) {\r\n                if (i < result.length - 1) {\r\n                    time += ('00' + result[i]).slice(-2);\r\n                    if (i < result.length - 2) time += ':';\r\n                } else {\r\n                    time += '.' + ('000' + result[i]).slice(-3);\r\n                }\r\n            }\r\n\r\n            return parseFromString(time);\r\n        },\r\n        '$data.Date': function (value) {\r\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\r\n            var ms = value.getMilliseconds()\r\n            if (ms) {\r\n                val += '.' + ms;\r\n            }\r\n\r\n            return parseFromString(val);\r\n        }\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var date = matches[1];\r\n        date += ('0000' + matches[2]).slice(-4);\r\n        date += '-' + ('00' + matches[3]).slice(-2);\r\n        date += '-' + ('00' + matches[4]).slice(-2);\r\n        return date;\r\n    }\r\n    function parseFromDate(value){\r\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\r\n        return parseFromString(val);\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Day', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var t = 1000*60*60*24;\r\n            var day = value * t;\r\n            if(isNaN(day)) throw 0;\r\n            \r\n            return parseFromDate(new Date(day));\r\n        },\r\n        '$data.Date': parseFromDate\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        return value;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Duration', {\r\n        '$data.String': parseFromString\r\n    });\r\n})();\r\n$data.Container.registerConverter('$data.Decimal', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        return value.toString();\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.packIEEE754 = function(v, ebits, fbits){\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str, bytes;\r\n\r\n    // Compute sign, exponent, fraction\r\n    if (v !== v){\r\n        // NaN\r\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\r\n        e = (1 << bias) - 1; f = Math.pow(2, fbits - 1); s = 0;\r\n    }else if (v === Infinity || v === -Infinity){\r\n        e = (1 << bias) - 1; f = 0; s = (v < 0) ? 1 : 0;\r\n    }else if (v === 0){\r\n        e = 0; f = 0; s = (1 / v === -Infinity) ? 1 : 0;\r\n    }else{\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n\r\n        if (v >= Math.pow(2, 1 - bias)){\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }else{\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) { bits.push(f % 2 ? 1 : 0); f = Math.floor(f / 2); }\r\n    for (i = ebits; i; i -= 1) { bits.push(e % 2 ? 1 : 0); e = Math.floor(e / 2); }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Bits to bytes\r\n    bytes = [];\r\n    while (str.length){\r\n        bytes.push(parseInt(str.substring(0, 8), 2));\r\n        str = str.substring(8);\r\n    }\r\n\r\n    return bytes;\r\n};\r\n\r\n$data.unpackIEEE754 = function(bytes, ebits, fbits){\r\n    // Bytes to bits\r\n    var bits = [], i, j, b, str, bias, s, e, f;\r\n\r\n    for (i = bytes.length; i; i -= 1){\r\n        b = bytes[i - 1];\r\n        for (j = 8; j; j -= 1){\r\n            bits.push(b % 2 ? 1 : 0); b = b >> 1;\r\n        }\r\n    }\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Unpack sign, exponent, fraction\r\n    bias = (1 << (ebits - 1)) - 1;\r\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\r\n    e = parseInt(str.substring(1, 1 + ebits), 2);\r\n    f = parseInt(str.substring(1 + ebits), 2);\r\n\r\n    // Produce number\r\n    if (e === (1 << ebits) - 1){\r\n        return f !== 0 ? NaN : s * Infinity;\r\n    }else if (e > 0){\r\n        // Normalized\r\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\r\n    }else if (f !== 0){\r\n        // Denormalized\r\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\r\n    }else{\r\n        return s < 0 ? -0 : 0;\r\n    }\r\n};\r\n\r\n$data.IEEE754 = function(v, e, f){\r\n    return $data.unpackIEEE754($data.packIEEE754(v, e, f), e, f);\r\n};\r\n\r\n$data.Container.registerConverter('$data.Float', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return $data.IEEE754(r, 8, 23);\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int16', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xffff;\r\n        if (r >= 0x8000) return r - 0x10000;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int64', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        var r = value.toString();\r\n        if (r.indexOf('.') > 0) return r.split('.')[0];\r\n        if (r.indexOf('.') == 0) throw 0;\r\n        return r;\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        if (value.indexOf('.') > 0) return value.split('.')[0];\r\n        if (value.indexOf('.') == 0) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.SByte', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xff;\r\n        if (r >= 0x80) return r - 0x100;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.String', {\r\n    '$data.Date': function(value){\r\n        return value.toISOString();\r\n    },\r\n    '$data.ObjectID': function(value){\r\n        return btoa(value.toString());\r\n    },\r\n    'default': function(value){\r\n        if (typeof value === 'object') return JSON.stringify(value);\r\n        return value.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Object', {\r\n    '$data.String': function(value){\r\n        return JSON.parse(value);\r\n    },\r\n    '$data.Function': function(){\r\n        throw 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Array', {\r\n    '$data.String': function(value){\r\n        var r = JSON.parse(value);\r\n        if (!Array.isArray(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.ObjectID', {\r\n    '$data.ObjectID': function(value){\r\n        try{\r\n            return btoa(value.toString());\r\n        }catch(e){\r\n            return value;\r\n        }\r\n    },\r\n    '$data.String': function(id){\r\n        return id;\r\n    }\r\n});\r\n\r\n$data.Container.proxyConverter = function(v){ return v; };\r\n$data.Container.defaultConverter = function(type){ return function(v){ return $data.Container.convertTo(v, type); }; };\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n(function ($data) {\r\n\r\n    function Edm_Boolean() { };\r\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\r\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\r\n\r\n    function Edm_Binary() { };\r\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\r\n    $data.Container.mapType(Edm_Binary, $data.Blob);\r\n\r\n    function Edm_DateTime() { };\r\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\r\n    $data.Container.mapType(Edm_DateTime, $data.Date);\r\n\r\n    function Edm_DateTimeOffset() { };\r\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\r\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\r\n\r\n    function Edm_Time() { };\r\n    $data.Container.registerType('Edm.Time', Edm_Time);\r\n    $data.Container.mapType(Edm_Time, $data.Time);\r\n\r\n    function Edm_TimeOfDay() { };\r\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\r\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\r\n    \r\n    function Edm_Date() { };\r\n    $data.Container.registerType('Edm.Date', Edm_Date);\r\n    $data.Container.mapType(Edm_Date, $data.Day);\r\n\r\n    function Edm_Duration() { }    ;\r\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\r\n    $data.Container.mapType(Edm_Duration, $data.Duration);\r\n\r\n    function Edm_Decimal() { };\r\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\r\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\r\n\r\n    function Edm_Float() { };\r\n    $data.Container.registerType('Edm.Float', Edm_Float);\r\n    $data.Container.mapType(Edm_Float, $data.Float);\r\n\r\n    function Edm_Single() { };\r\n    $data.Container.registerType('Edm.Single', Edm_Single);\r\n    $data.Container.mapType(Edm_Single, $data.Float);\r\n\r\n    function Edm_Double() { };\r\n    $data.Container.registerType('Edm.Double', Edm_Double);\r\n    $data.Container.mapType(Edm_Double, $data.Number);\r\n\r\n    function Edm_Guid() { };\r\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\r\n    $data.Container.mapType(Edm_Guid, $data.Guid);\r\n\r\n    function Edm_Int16() { };\r\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\r\n    $data.Container.mapType(Edm_Int16, $data.Int16);\r\n\r\n    function Edm_Int32() { };\r\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\r\n    $data.Container.mapType(Edm_Int32, $data.Integer);\r\n\r\n    function Edm_Int64() { };\r\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\r\n    $data.Container.mapType(Edm_Int64, $data.Int64);\r\n\r\n    function Edm_Byte() { };\r\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\r\n    $data.Container.mapType(Edm_Byte, $data.Byte);\r\n\r\n    function Edm_SByte() { };\r\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\r\n    $data.Container.mapType(Edm_SByte, $data.SByte);\r\n\r\n    function Edm_String() { };\r\n    $data.Container.registerType('Edm.String', Edm_String);\r\n    $data.Container.mapType(Edm_String, $data.String);\r\n\r\n    function Edm_GeographyPoint() { };\r\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\r\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\r\n\r\n    function Edm_GeographyLineString() { };\r\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\r\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\r\n\r\n    function Edm_GeographyPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\r\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\r\n\r\n    function Edm_GeographyMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\r\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\r\n\r\n    function Edm_GeographyMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\r\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\r\n\r\n    function Edm_GeographyMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\r\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\r\n\r\n    function Edm_GeographyCollection() { };\r\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\r\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\r\n\r\n    function Edm_GeometryPoint() { };\r\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\r\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\r\n\r\n    function Edm_GeometryLineString() { };\r\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\r\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\r\n\r\n    function Edm_GeometryPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\r\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\r\n\r\n    function Edm_GeometryMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\r\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\r\n\r\n    function Edm_GeometryMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\r\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\r\n\r\n    function Edm_GeometryMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\r\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\r\n\r\n    function Edm_GeometryCollection() { };\r\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\r\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\r\n\r\n    $data.oDataEdmMapping = {\r\n        '$data.Byte': 'Edm.Byte',\r\n        '$data.SByte': 'Edm.SByte',\r\n        '$data.Decimal': 'Edm.Decimal',\r\n        '$data.Float': 'Edm.Float',\r\n        '$data.Int16': 'Edm.Int16',\r\n        '$data.Int64': 'Edm.Int64',\r\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\r\n        '$data.Time': 'Edm.TimeOfDay',\r\n        '$data.Day': 'Edm.Date',\r\n        '$data.Duration': 'Edm.Duration',\r\n        '$data.Boolean': 'Edm.Boolean',\r\n        '$data.Blob': 'Edm.Binary',\r\n        '$data.Date': 'Edm.DateTime',\r\n        '$data.Number': 'Edm.Double',\r\n        '$data.Integer': 'Edm.Int32',\r\n        '$data.Int32': 'Edm.Int32',\r\n        '$data.String': 'Edm.String',\r\n        '$data.ObjectID': 'Edm.String',\r\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\r\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\r\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\r\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\r\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\r\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\r\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\r\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\r\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\r\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\r\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\r\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\r\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\r\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\r\n        '$data.Guid': 'Edm.Guid'\r\n    };\r\n\r\n})($data);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\n\r\n/* $data.GeographyBase */\r\n$data.GeographyBase = function GeographyBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeographyBase.defaultCrs;\r\n    $data.GeographyBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeographyBase.disableSRID = false;\r\n$data.GeographyBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:4326'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeographyBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if(lparenIdx >= 0){\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeographyBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeographyBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeographyBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geography'\";\r\n        function getSRID(g){\r\n            if(!$data.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeographyBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeographyBase);\r\n\r\n    $data.GeographyBase.registered = $data.GeographyBase.registered || {};\r\n    $data.GeographyBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeographyBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeographyBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeographyBase', $data.GeographyBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeographyBase'], $data.GeographyBase);\r\n\r\n/* $data.GeographyPoint */\r\n$data.GeographyPoint = function GeographyPoint(lon, lat) {\r\n    if (lon && typeof lon === 'object' && Array.isArray(lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: lon });\r\n    } else if (lon && typeof lon === 'object' && ('longitude' in lon || 'latitude' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\r\n    } else if (lon && typeof lon === 'object' && ('lng' in lon || 'lat' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\r\n    } else if (lon && typeof lon === 'object') {\r\n        $data.GeographyBase.call(this, lon);\r\n    } else {\r\n        $data.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\r\n    }\r\n};\r\n$data.GeographyPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeographyPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeographyPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Point', $data.GeographyPoint);\r\nObject.defineProperty($data.GeographyPoint.prototype, 'longitude', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeographyPoint.prototype, 'latitude', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], $data.GeographyPoint);\r\n$data.Geography = $data.GeographyPoint;\r\n\r\n/* $data.GeographyLineString */\r\n$data.GeographyLineString = function GeographyLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('LineString', $data.GeographyLineString);\r\n$data.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], $data.GeographyLineString);\r\n\r\n/* $data.GeographyPolygon */\r\n$data.GeographyPolygon = function GeographyPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeographyPoint ? data.topLeft : new $data.GeographyPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeographyPoint ? data.bottomRight : new $data.GeographyPoint(data.bottomRight);\r\n            tr = new $data.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeographyPoint ? data.topRight : new $data.GeographyPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeographyPoint ? data.bottomLeft : new $data.GeographyPoint(data.bottomLeft);\r\n            tl = new $data.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeographyBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeographyPolygon(data);\r\n};\r\n$data.GeographyPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Polygon', $data.GeographyPolygon);\r\n$data.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], $data.GeographyPolygon);\r\n\r\n/* $data.GeographyMultiPoint */\r\n$data.GeographyMultiPoint = function GeographyMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPoint', $data.GeographyMultiPoint);\r\n$data.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], $data.GeographyMultiPoint);\r\n\r\n/* $data.GeographyMultiLineString */\r\n$data.GeographyMultiLineString = function GeographyMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiLineString', $data.GeographyMultiLineString);\r\n$data.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], $data.GeographyMultiLineString);\r\n\r\n/* $data.GeographyMultiPolygon */\r\n$data.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPolygon', $data.GeographyMultiPolygon);\r\n$data.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], $data.GeographyMultiPolygon);\r\n\r\n/* $data.GeographyCollection */\r\n$data.GeographyCollection = function GeographyCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeographyBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyCollection.validMembers = ['geometries'];\r\n$data.GeographyBase.registerType('GeometryCollection', $data.GeographyCollection);\r\n$data.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], $data.GeographyCollection);\r\n\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeographyPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeographyCollection(value) : value;\r\n});\r\n\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\n\r\n/* $data.Geometry */\r\n$data.GeometryBase = function GeometryBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeometryBase.defaultCrs;\r\n    $data.GeometryBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeometryBase.disableSRID = false;\r\n$data.GeometryBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:0'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeometryBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if (lparenIdx >= 0) {\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeometryBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeometryBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeometryBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geometry'\";\r\n        function getSRID(g){\r\n            if(!$data.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeometryBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeometryBase);\r\n\r\n    $data.GeometryBase.registered = $data.GeometryBase.registered || {};\r\n    $data.GeometryBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeometryBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeometryBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeometryBase', $data.GeometryBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeometryBase'], $data.GeometryBase);\r\n\r\n/* $data.GeometryPoint */\r\n$data.GeometryPoint = function GeometryPoint(x, y) {\r\n    var param = x;\r\n    if (param && typeof param === 'object' && Array.isArray(param)) {\r\n        $data.GeometryBase.call(this, { coordinates: param });\r\n    } else if (param && typeof param === 'object' && ('x' in param || 'y' in param)) {\r\n        $data.GeometryBase.call(this, { coordinates: [param.x, param.y] });\r\n    } else if (param && typeof param === 'object') {\r\n        $data.GeometryBase.call(this, param);\r\n    } else {\r\n        $data.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\r\n    }\r\n};\r\n$data.GeometryPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeometryPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeometryPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Point', $data.GeometryPoint);\r\nObject.defineProperty($data.GeometryPoint.prototype, 'x', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeometryPoint.prototype, 'y', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], $data.GeometryPoint);\r\n\r\n/* $data.GeometryLineString */\r\n$data.GeometryLineString = function GeometryLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('LineString', $data.GeometryLineString);\r\n$data.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], $data.GeometryLineString);\r\n\r\n/* $data.GeometryPolygon */\r\n$data.GeometryPolygon = function GeometryPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeometryPoint ? data.topLeft : new $data.GeometryPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeometryPoint ? data.bottomRight : new $data.GeometryPoint(data.bottomRight);\r\n            tr = new $data.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeometryPoint ? data.topRight : new $data.GeometryPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeometryPoint ? data.bottomLeft : new $data.GeometryPoint(data.bottomLeft);\r\n            tl = new $data.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeometryBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeometryPolygon(data);\r\n};\r\n$data.GeometryPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Polygon', $data.GeometryPolygon);\r\n$data.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], $data.GeometryPolygon);\r\n\r\n/* $data.GeometryMultiPoint */\r\n$data.GeometryMultiPoint = function GeometryMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPoint', $data.GeometryMultiPoint);\r\n$data.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], $data.GeometryMultiPoint);\r\n\r\n/* $data.GeometryMultiLineString */\r\n$data.GeometryMultiLineString = function GeometryMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiLineString', $data.GeometryMultiLineString);\r\n$data.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], $data.GeometryMultiLineString);\r\n\r\n/* $data.GeometryMultiPolygon */\r\n$data.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPolygon', $data.GeometryMultiPolygon);\r\n$data.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], $data.GeometryMultiPolygon);\r\n\r\n/* $data.GeometryCollection */\r\n$data.GeometryCollection = function GeometryCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeometryBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryCollection.validMembers = ['geometries'];\r\n$data.GeometryBase.registerType('GeometryCollection', $data.GeometryCollection);\r\n$data.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], $data.GeometryCollection);\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeometryPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeometryCollection(value) : value;\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Geospatial = function Geospatial() {\r\n    this.type = this.constructor.type;\r\n    if (Array.isArray(this.constructor.validMembers)) {\r\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n            var name = this.constructor.validMembers[i];\r\n            this[name] = undefined;\r\n        }\r\n    }\r\n\r\n    $data.SimpleBase.apply(this, arguments);\r\n    this.type = this.constructor.type || 'Unknown';\r\n};\r\n$data.SimpleBase.registerType('Geospatial', $data.Geospatial);\r\n$data.Container.registerType(['$data.Geospatial', 'Geospatial'], $data.Geospatial);\r\n\r\n$data.point = function (arg) {\r\n    if (arg && arg.crs) {\r\n        if (arg.crs.properties && arg.crs.properties.name === $data.GeometryBase.defaultCrs.properties.name) {\r\n            return new $data.GeometryPoint(arg);\r\n        } else {\r\n            return new $data.GeographyPoint(arg);\r\n        }\r\n    } else if(arg) {\r\n        if ('x' in arg && 'y' in arg) {\r\n            return new $data.GeometryPoint(arg.x, arg.y);\r\n        } else if ('longitude' in arg && 'latitude' in arg) {\r\n            return new $data.GeographyPoint(arg.longitude, arg.latitude);\r\n        } else if ('lng' in arg && 'lat' in arg) {\r\n            return new $data.GeographyPoint(arg.lng, arg.lat);\r\n        }\r\n    }\r\n};\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\n\n$data.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || (typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value))) {\r\n        this.value = value || '00000000-0000-0000-0000-000000000000';\r\n    } else {\r\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\r\n    }\n};\n$data.Container.registerType(['$data.Guid', 'Guid', 'guid'], $data.Guid);\n$data.Container.registerConverter('$data.Guid', {\r\n    '$data.String': function (value) {\r\n        return value ? $data.parseGuid(value).toString() : value;\r\n    },\r\n    '$data.Guid': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n}, {\r\n    '$data.String': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n});\n\n\n$data.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n$data.Guid.NewGuid = function () {\n    return $data.createGuid();\n};\n\n$data.parseGuid = function (guid) {\n    return new $data.Guid(guid);\n};\n\n(function () {\r\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n\r\n    Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\r\n\r\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n    $data.createGuid = function (guidString) {\r\n        if (guidString) {\r\n            return new $data.Guid(guidString);\r\n        };\r\n\r\n        var len;\r\n        var chars = CHARS, uuid = [], i;\r\n        var radix = chars.length;\r\n\r\n        if (len) {\r\n            // Compact form\r\n            for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\r\n        } else {\r\n            // rfc4122, version 4 form\r\n            var r;\r\n\r\n            // rfc4122 requires these characters\r\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n            uuid[14] = '4';\r\n\r\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n            // per rfc4122, sec. 4.1.5\r\n            for (i = 0; i < 36; i++) {\r\n                if (!uuid[i]) {\r\n                    r = 0 | Math.random() * 16;\r\n                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n                }\r\n            }\r\n        }\r\n\r\n        return $data.parseGuid(uuid.join(''));\r\n    };\r\n})();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n/* $data.SimpleBase */\r\n$data.SimpleBase = function SimpleBase(data) {\r\n    if (typeof data === 'object' && data) {\r\n        if (Array.isArray(this.constructor.validMembers)) {\r\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n                var name = this.constructor.validMembers[i];\r\n\r\n                if (data[name] !== undefined) {\r\n                    this[name] = data[name];\r\n                }\r\n            }\r\n\r\n        } else {\r\n            delete data.type;\r\n            $data.typeSystem.extend(this, data);\r\n        }\r\n    }\r\n}\r\n$data.SimpleBase.registerType = function (name, type, base) {\r\n    base = base || $data.SimpleBase;\r\n\r\n    type.type = name;\r\n    type.prototype = Object.create(base.prototype);\r\n    type.prototype.constructor = type;\r\n}\r\n$data.Container.registerType(['$data.SimpleBase', 'SimpleBase'], $data.SimpleBase);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Number = typeof Number !== 'undefined' ? Number : function JayNumber() { };\r\n$data.Date = typeof Date !== 'undefined' ? Date : function JayDate() { };\r\n$data.String = typeof String !== 'undefined' ? String : function JayString() { };\r\n$data.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() { };\r\n$data.Array = typeof Array !== 'undefined' ? Array : function JayArray() { };\r\n$data.Object = typeof Object !== 'undefined' ? Object : function JayObject() { };\r\n$data.Function = Function;\r\n\r\n$data.Byte = function JayByte() { };\r\n$data.SByte = function JaySByte() { };\r\n$data.Decimal = function JayDecimal() { };\r\n$data.Float = $data.Single = function JayFloat() { };\r\n$data.Integer = function JayInteger() { };\r\n$data.Int16 = function JayInt16(v) { };\r\n$data.Int32 = function JayInt32() { };\r\n$data.Int64 = function JayInt64(v) { };\r\n$data.ObjectID = typeof $data.mongoDBDriver !== 'undefined' && typeof $data.mongoDBDriver.ObjectID !== 'undefined' ? $data.mongoDBDriver.ObjectID : function JayObjectID() { };\r\n$data.Time = function JayTime() { };\r\n$data.Day = function JayDay() { };\r\n$data.Duration = function JayDuration() { };\r\n$data.DateTimeOffset = function JayDateTimeOffset(val) {\r\n    this.value = val;\r\n};\r\n$data.DateTimeOffset.prototype.toJSON = function () {\r\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\r\n};\r\n\r\n$data.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], $data.Number);\r\n$data.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], $data.Integer);\r\n$data.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], $data.Int32);\r\n$data.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], $data.Byte);\r\n$data.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], $data.SByte);\r\n$data.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], $data.Decimal);\r\n$data.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], $data.Float);\r\n$data.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], $data.Int16);\r\n$data.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], $data.Int64);\r\n$data.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], $data.String);\r\n$data.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], $data.Array, function () {\r\n    return $data.Array.apply(undefined, arguments);\r\n});\r\n$data.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], $data.Date);\r\n$data.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], $data.Time);\r\n$data.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], $data.Day);\r\n$data.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], $data.Duration);\r\n$data.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], $data.DateTimeOffset);\r\n$data.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], $data.Boolean);\r\n$data.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], $data.Object);\r\n$data.Container.registerType([\"$data.Function\", \"Function\", \"function\"], $data.Function);\r\n$data.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], $data.ObjectID);\r\n\r\nexport default $data\r\n","import $data, { $C as _$C, Container as _container } from './TypeSystem.js';\r\nimport Types from './Types/Types.js';\r\nimport Trace from './Trace/Trace.js';\r\nimport Logger from './Trace/Logger.js';\r\nimport SimpleBase from './Types/SimpleBase.js';\r\nimport Geospatial from './Types/Geospatial.js';\r\nimport Geography from './Types/Geography.js';\r\nimport Geometry from './Types/Geometry.js';\r\nimport Guid from './Types/Guid.js';\r\nimport Blob from './Types/Blob.js';\r\nimport EdmTypes from './Types/EdmTypes.js';\r\nimport Converter from './Types/Converter.js';\r\n\r\nimport { Guard as _guard, Exception as _exception } from 'jaydata-error-handler';\r\n\r\nexport var Guard = _guard;\r\n$data.Guard = _guard;\r\n\r\nexport var Exception = _exception;\r\n$data.Exception = _exception;\r\n\r\nexport var $C = _$C;\r\n$data.$C = _$C;\r\n\r\nexport var Container = _container;\r\nexport default $data;\r\n","import $data from './initializeJayDataClient.js';\r\nimport * as acorn from 'acorn';\r\nimport * as pkg from '../../package.json';\r\n\r\nif (typeof console === 'undefined') {\r\n  console = {\r\n    warn: function() {},\r\n    error: function() {},\r\n    log: function() {},\r\n    dir: function() {},\r\n    time: function() {},\r\n    timeEnd: function() {}\r\n  };\r\n}\r\n\r\nif (!console.warn) console.warn = function() {};\r\nif (!console.error) console.error = function() {};\r\n\r\n(function($data) {\r\n  ///<summary>\r\n  /// Collection of JayData services\r\n  ///</summary>\r\n  $data.__namespace = true;\r\n  $data.version = \"JayData \" + pkg.version;\r\n  $data.versionNumber = pkg.version;\r\n  $data.root = {};\r\n  $data.Acorn = acorn;\r\n\r\n})($data);\r\nexport default $data\r\n  // Do not remove this block, it is used by jsdoc\r\n  /**\r\n      @name $data.Base\r\n      @class base class\r\n  */\r\n","export default function _data_handler() {\r\n  console.log(\"@@@@\", this);\r\n  if (this instanceof _data_handler) {\r\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\r\n    return new type(arguments[1]);\r\n  } else {\r\n    return _data_handler[\"implementation\"].apply(this, arguments)\r\n  }\r\n};\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Access', null, null, {}, {\r\n    isAuthorized: function(access, user, sets, callback){\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        //clbWrapper.error('Authorization failed', 'Access authorization');\r\n        clbWrapper.success(true);\r\n\r\n        return pHandlerResult;\r\n\r\n        /*var error;\r\n\r\n        if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n\r\n        if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n\r\n        if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n\r\n        var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n\r\n        var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n\r\n        var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n\r\n            if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n\r\n                if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        callbackFn();\r\n\r\n        return pHandlerResult;*/\r\n    },\r\n    getAccessBitmaskFromPermission: function(p){\r\n        var access = $data.Access.None;\r\n\r\n        if (p.Create) access |= $data.Access.Create;\r\n        if (p.Read) access |= $data.Access.Read;\r\n        if (p.Update) access |= $data.Access.Update;\r\n        if (p.Delete) access |= $data.Access.Delete;\r\n        if (p.DeleteBatch) access |= $data.Access.DeleteBatch;\r\n        if (p.Execute) access |= $data.Access.Execute;\r\n\r\n        return access;\r\n    },\r\n    None: { value: 0 },\r\n    Create: { value: 1 },\r\n    Read: { value: 2 },\r\n    Update: { value: 4 },\r\n    Delete: { value: 8 },\r\n    DeleteBatch: { value: 16 },\r\n    Execute: { value: 32 }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.ajax = $data.ajax || function () {\r\n    var cfg = arguments[arguments.length - 1];\r\n    var clb = $data.PromiseHandlerBase.createCallbackSettings(cfg);\r\n    clb.error(\"Not implemented\");\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof Ext !== 'undefined' && typeof Ext.Ajax) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        Ext.Ajax.request(options);\r\n    };\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        $data.typeSystem.extend(options, {\r\n            dataType: 'json',\r\n            headers: {}\r\n        });\r\n        var dataTypes = {\r\n            'json': {\r\n                accept: 'application/json, text/javascript',\r\n                convert: JSON.parse\r\n            },\r\n            'text': {\r\n                accept: 'text/plain',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'html': {\r\n                accept: 'text/html',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'xml': {\r\n                accept: 'application/xml, text/xml',\r\n                convert: function (e) {\r\n                    // TODO?\r\n                    return e;\r\n                }\r\n            }\r\n        }\r\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\r\n\r\n        options.headers.Accept = dataTypeContext.accept;\r\n\r\n        var successClb = options.success || $data.defaultSuccessCallback;\r\n        var errorClb = options.error || $data.defaultErrorCallback;\r\n        var progressClb = options.progress;\r\n\r\n        var success = function (r) {\r\n            var result = dataTypeContext.convert(r.responseText);\r\n            successClb(result);\r\n        }\r\n        var error = function (r) {\r\n            var error = dataTypeContext.convert(r.responseText);\r\n            errorClb(error);\r\n        }\r\n        var progress = progressClb;\r\n\r\n        WinJS.xhr(options)\r\n        .done(success, error, progress);\r\n    }\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\r\n    $data.ajax = $data.ajax || jQuery.ajax;\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.Anonymous\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        $data.ajax(cfg);\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n         Guard.raise(\"Pure class\");\r\n    },\r\n    Logout: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Username: '',\r\n            Password: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (callbacks && typeof callbacks.pending == \"function\")\r\n            callbacks.pending();\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        var origBeforeSend = cfg.beforeSend;\r\n        cfg.beforeSend = function (xhr) {\r\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\r\n\r\n            if(typeof origBeforeSend == \"function\")\r\n                origBeforeSend(xhr);\r\n        };\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.FacebookAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Url_code: '',\r\n            type_code: '',\r\n            scope: '',\r\n            Url_token: '',\r\n            type_token: '',\r\n            access_token: '',\r\n            app_id: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (this.Authenticated) {\r\n            return;\r\n        }\r\n\r\n        var provider = this;\r\n        provider.configuration.stateCallbacks = callbacks || {};\r\n\r\n        $data.ajax({\r\n            url: this.configuration.Url_code,\r\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\")\r\n                    provider.configuration.stateCallbacks.pending(data);\r\n                provider._processRequestToken(data);\r\n                provider.Authenticated = true;\r\n            },\r\n            error: function () {\r\n                if (typeof provider.configuration.stateCallbacks.error == \"function\")\r\n                    provider.configuration.stateCallbacks.error(arguments);\r\n            }\r\n        });\r\n    },\r\n    Logout: function () {\r\n        this.Authenticated = false;\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        if (cfg.url.indexOf('access_token=') === -1) {\r\n            if (cfg.url && this.Authenticated) {\r\n                var andChar = '?';\r\n                if (cfg.url.indexOf(andChar) > 0)\r\n                    andChar = '&';\r\n\r\n                if (this.configuration.access_token)\r\n                    cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\r\n            }\r\n        }\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    _processRequestToken: function (verification_data) {\r\n        var provider = this;\r\n\r\n        $data.ajax({\r\n            url: provider.configuration.Url_token,\r\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function(result) {\r\n                provider.configuration.access_token = result.access_token;\r\n                if (typeof provider.configuration.stateCallbacks.success == \"function\")\r\n                    provider.configuration.stateCallbacks.success(result);\r\n            },\r\n            error: function(obj) {\r\n                var data = eval('(' + obj.responseText + ')');\r\n                if (data.error) {\r\n                    if (data.error.message == \"authorization_pending\") {\r\n                        setTimeout(function() {\r\n                            provider._processRequestToken(verification_data);\r\n                        }, 2000);\r\n                    } else if (\"authorization_declined\") {\r\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\")\r\n                            provider.configuration.stateCallbacks.abort(arguments);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\nvar EventSubscriber = $data.Class.define(\"EventSubscriber\", null, null, {\r\n    constructor: function (handler, state, thisArg) {\r\n        /// <param name=\"handler\" type=\"Function\">\r\n        ///     <summary>event handler</summary>\r\n        ///     <signature>\r\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\r\n        ///         <param name=\"eventData\" type=\"EventData\" />\r\n        ///         <param name=\"state\" type=\"Object\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\r\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\r\n        ///\r\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\r\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\r\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\r\n        this.handler = handler;\r\n        this.state = state;\r\n        this.thisArg = thisArg;\r\n    },\r\n    handler: {},\r\n    state: {},\r\n    thisArg: {}\r\n});\r\n\r\n$data.Event = $data.Class.define(\"$data.Event\", null, null, {\r\n    constructor: function (name, sender) {\r\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\r\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\r\n        var subscriberList = null;\r\n        var parentObject = sender;\r\n\r\n        function detachHandler(list, handler) {\r\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\r\n            ///<param name=\"handler\" type=\"Function\" />\r\n            list.forEach(function (item, index) {\r\n                if (item.handler == handler) {\r\n                    list.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.attach = function (handler, state, thisArg) {\r\n            ///<param name=\"handler\" type=\"Function\">\r\n            ///<signature>\r\n            ///<param name=\"sender\" type=\"Object\" />\r\n            ///<param name=\"eventData\" type=\"Object\" />\r\n            ///<param name=\"state\" type=\"Object\" />\r\n            ///</signature>\r\n            ///</param>\r\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\r\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\r\n            if (!subscriberList) {\r\n                subscriberList = [];\r\n            }\r\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\r\n        };\r\n        this.detach = function (handler) {\r\n            detachHandler(subscriberList, handler);\r\n        };\r\n        this.fire = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\r\n                    } catch(ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.fireCancelAble = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            var isValid = true;\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\r\n                    } catch (ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n            return isValid;\r\n        };\r\n    }\r\n});\r\n\r\n\r\nvar EventData = $data.Class.define(\"EventData\", null, null, {\r\n    eventName: {}\r\n});\r\n\r\nvar PropertyChangeEventData = $data.Class.define(\"PropertyChangeEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {}\r\n});\r\n\r\nvar PropertyValidationEventData = $data.Class.define(\"PropertyValidationEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue, errors) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n        this.errors = errors;\r\n        this.cancel = false;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {},\r\n    errors: {},\r\n    cancel: {}\r\n});\r\n\r\n\r\n\r\n$data.Entity = $data.Class.define(\"$data.Entity\", null, null, {\r\n    constructor: function (initData, newInstanceOptions) {\r\n        /// <description>\r\n        ///     This class provide a light weight, object-relational interface between\r\n        ///     your javascript code and database.\r\n        /// </description>\r\n        ///\r\n        /// <signature>\r\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\r\n        ///     <example>\r\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\r\n        ///         $news.context.Categories.add(category);\r\n        ///     </example>\r\n        /// </signature>\r\n        ///\r\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\r\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\r\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\r\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\r\n        /// <field name=\"entityState\" type=\"Integer\"></field>\r\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\r\n\r\n        this.initData = {};\r\n        var thisType = this.getType();\r\n        if (thisType.__copyPropertiesToInstance) {\r\n            $data.typeSystem.writePropertyValues(this);\r\n        }\r\n\r\n        var ctx = null;\r\n        this.context = ctx;\r\n        if (\"setDefaultValues\" in thisType) {\r\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\r\n                if (!initData || Object.keys(initData).length < 1) {\r\n                    initData = thisType.setDefaultValues(initData);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (typeof initData === \"object\") {\r\n            var typeMemDefs = thisType.memberDefinitions;\r\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\r\n\r\n            for (var i in initData) {\r\n                if (memDefNames.indexOf(i) > -1) {\r\n                    var memberDef = typeMemDefs.getMember(i);\r\n                    var type = Container.resolveType(memberDef.type);\r\n                    var value = initData[i];\r\n\r\n                    if (memberDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                        this.initData[i] = value;\r\n                    } else {\r\n                        if (newInstanceOptions && newInstanceOptions.converters) {\r\n                            var converter = newInstanceOptions.converters[Container.resolveName(type)];\r\n                            if (converter)\r\n                                value = converter(value);\r\n                        }\r\n\r\n                        this.initData[i] = Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\r\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\r\n        }\r\n\r\n        this.changedProperties = undefined;\r\n        this.entityState = undefined;\r\n\r\n    },\r\n    toString: function () {\r\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\r\n        /// <returns type=\"String\"/>\r\n\r\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\"\r\n    },\r\n    toJSON: function () {\r\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\r\n        /// <returns type=\"Object\">JSON representation</returns>\r\n\r\n        var result = {};\r\n        var self = this;\r\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            if (self[memDef.name] instanceof Date && memDef.type && Container.resolveType(memDef.type) === $data.DateTimeOffset) {\r\n                result[memDef.name] = new $data.DateTimeOffset(self[memDef.name]);\r\n            } else {\r\n                result[memDef.name] = self[memDef.name];\r\n            }\r\n        });\r\n        return result;\r\n    },\r\n    equals: function (entity) {\r\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\r\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\r\n\r\n        if (entity.getType() !== this.getType()) {\r\n            return false;\r\n        }\r\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\r\n        for (var i = 0; i < entityPk.length; i++) {\r\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    propertyChanging: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanging)\r\n                this._propertyChanging = new $data.Event('propertyChanging', this);\r\n\r\n            return this._propertyChanging;\r\n        },\r\n        set: function (value) { this._propertyChanging = value; }\r\n    },\r\n\r\n    propertyChanged: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanged)\r\n                this._propertyChanged = new $data.Event('propertyChanged', this);\r\n\r\n            return this._propertyChanged;\r\n        },\r\n        set: function (value) { this._propertyChanged = value; }\r\n    },\r\n\r\n    propertyValidationError: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyValidationError)\r\n                this._propertyValidationError = new $data.Event('propertyValidationError', this);\r\n\r\n            return this._propertyValidationError;\r\n        },\r\n        set: function (value) { this._propertyValidationError = value; }\r\n    },\r\n\r\n    // protected\r\n    storeProperty: function (memberDefinition, value) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n\r\n        if (memberDefinition.concurrencyMode !== $data.ConcurrencyMode.Fixed) {\r\n            value = Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\r\n        }\r\n\r\n        var eventData = null;\r\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\r\n            var origValue = this[memberDefinition.name];\r\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\r\n            if (this._propertyChanging)\r\n                this.propertyChanging.fire(eventData);\r\n        }\r\n\r\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\r\n            var errors = $data.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\r\n            if (errors.length > 0) {\r\n                var origValue = this[memberDefinition.name];\r\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\r\n\r\n                if (this._propertyValidationError)\r\n                    this.propertyValidationError.fire(errorEventData);\r\n                if (\"instancePropertyValidationError\" in this.constructor)\r\n                    this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\r\n\r\n                if (errorEventData.cancel == true)\r\n                    return;\r\n            }\r\n        }\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            this[backingFieldName] = value;\r\n        } else {\r\n            this.initData[memberDefinition.name] = value;\r\n        }\r\n        this.isValidated = false;\r\n\r\n        if (memberDefinition.monitorChanges != false && this.entityState == $data.EntityState.Unchanged)\r\n            this.entityState = $data.EntityState.Modified;\r\n\r\n        this._setPropertyChanged(memberDefinition);\r\n\r\n        if (memberDefinition.monitorChanges != false) {\r\n            //if (!this.changedProperties) {\r\n            //    this.changedProperties = [];\r\n            //}\r\n\r\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n            //    this.changedProperties.push(memberDefinition);\r\n\r\n            if (this._propertyChanged)\r\n                this.propertyChanged.fire(eventData);\r\n\r\n            //TODO mixin framework\r\n            if (\"instancePropertyChanged\" in this.constructor) {\r\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\r\n            }\r\n        }\r\n    },\r\n    _setPropertyChanged: function (memberDefinition) {\r\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\r\n            if (!this.changedProperties) {\r\n                this.changedProperties = [];\r\n            }\r\n\r\n            if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n                this.changedProperties.push(memberDefinition);\r\n        }\r\n    },\r\n\r\n    // protected\r\n    retrieveProperty: function (memberDefinition) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            return this[backingFieldName];\r\n        } else {\r\n            return this.initData[memberDefinition.name];\r\n        }\r\n    },\r\n\r\n    // protected\r\n    getProperty: function (memberDefinition, callback, tran) {\r\n        /// <summary>Retrieve value of member</summary>\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"callback\" type=\"Function\">\r\n        ///     <signature>\r\n        ///         <param name=\"value\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\r\n\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        if (this[memberDefinition.name] != undefined) {\r\n            if (tran instanceof $data.Transaction)\r\n                callback.success(this[memberDefinition.name], tran);\r\n            else\r\n                callback.success(this[memberDefinition.name]);\r\n            return;\r\n        }\r\n\r\n        var context = this.context;\r\n        if (!this.context) {\r\n            try {\r\n                var that = this;\r\n                var storeToken = this.storeToken || this.getType().storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    var ctx = storeToken.factory();\r\n                    return ctx.onReady().then(function (context) {\r\n                        return context.loadItemProperty(that, memberDefinition, callback);\r\n                    });\r\n                }\r\n            } catch (e) { }\r\n\r\n            Guard.raise(new Exception('Entity not in context', 'Invalid operation'));\r\n        } else {\r\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\r\n        }\r\n    },\r\n    // protected\r\n    setProperty: function (memberDefinition, value, callback, tran) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n        /// <param name=\"callback\" type=\"Function\">done</param>\r\n        this[memberDefinition.name] = value;\r\n\r\n        //callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        callback.success(this[memberDefinition.name]);\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    isValid: function () {\r\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\r\n        /// <returns type=\"Boolean\" />\r\n\r\n        if (!this.isValidated) {\r\n            this.ValidationErrors = $data.Validation.Entity.ValidateEntity(this);\r\n            this.isValidated = true;\r\n        }\r\n        return this.ValidationErrors.length == 0;\r\n    },\r\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\r\n    ValidationErrors: {\r\n        dataType: Array,\r\n        elementType: $data.Validation.ValidationError,\r\n        storeOnObject: true,\r\n        monitorChanges: true,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    resetChanges: function () {\r\n        /// <summary>reset changes</summary>\r\n\r\n        delete this._changedProperties;\r\n    },\r\n\r\n    changedProperties: {\r\n        dataType: Array,\r\n        elementType: MemberDefinition,\r\n        storeOnObject: true,\r\n        monitorChanges: false,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\r\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\r\n    //,\r\n\r\n    //onReady: function (callback) {\r\n    //    this.__onReadyList = this.__onReadyList || [];\r\n    //    this.__onReadyList.push(callback);\r\n    //},\r\n\r\n    remove: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRemove' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRemove.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    save: function () {\r\n        if ($data.ItemStore && 'EntityInstanceSave' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceSave.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    refresh: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRefresh' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRefresh.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\r\n\r\n    getFieldUrl: function (field) {\r\n        if (this.context) {\r\n            return this.context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\r\n            var context = this.getType().storeToken.factory();\r\n            return context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken){\r\n            try {\r\n                var ctx = $data.ItemStore._getContextPromise('default', this.getType());\r\n                if (ctx instanceof $data.EntityContext) {\r\n                    return ctx.getFieldUrl(this, field);\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }\r\n        return '#';\r\n    }\r\n},\r\n{\r\n    //create get_[property] and set_[property] functions for properties\r\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\r\n    //copy public properties to current instance\r\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\r\n\r\n    inheritedTypeProcessor: function (type) {\r\n        if ($data.ItemStore && 'EntityInheritedTypeProcessor' in $data.ItemStore)\r\n            $data.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\r\n\r\n        //default value setter method factory\r\n        type.defaultValues = {};\r\n\r\n        type.memberDefinitions.asArray().forEach(function (pd) {\r\n            if (pd.hasOwnProperty(\"defaultValue\")) {\r\n                type.defaultValues[pd.name] = pd.defaultValue;\r\n            }\r\n        });\r\n\r\n        if (Object.keys(type.defaultValues).length > 0) {\r\n            type.setDefaultValues = function (initData, instance) {\r\n                initData = initData || {};\r\n                var dv = type.defaultValues;\r\n                for (var n in dv) {\r\n                    if (!(n in initData)) {\r\n                        var value = dv[n];\r\n                        if (\"function\" === typeof value) {\r\n                            initData[n] = dv[n](n, instance);\r\n                        } else {\r\n                            initData[n] = dv[n];\r\n                        }\r\n                    }\r\n                }\r\n                return initData;\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //Type Events\r\n    addEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            this[delegateName] = new $data.Event(eventName, this);\r\n        }\r\n        this[delegateName].attach(fn);\r\n    },\r\n    removeEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].detach(fn);\r\n    },\r\n    raiseEvent: function(eventName, data) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].fire(data);\r\n    },\r\n\r\n    getFieldNames: function () {\r\n        return this.memberDefinitions.getPublicMappedPropertyNames();\r\n    },\r\n\r\n    'from$data.Object': function (value, type, t, options) {\r\n        if (!Guard.isNullOrUndefined(value)) {\r\n            var newInstanceOptions;\r\n            if (options && options.converters) {\r\n                newInstanceOptions = {\r\n                    converters: options.converters\r\n                }\r\n            }\r\n\r\n            return new this(value, newInstanceOptions);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n\r\n$data.define = function (name, container, definition) {\r\n    if (container && !(container instanceof $data.ContainerClass)) {\r\n        definition = container;\r\n        container = undefined;\r\n    }\r\n    if (!definition) {\r\n        throw new Error(\"json object type is not supported yet\");\r\n    }\r\n    var _def = {};\r\n    var hasKey = false;\r\n    var keyFields = [];\r\n    Object.keys(definition).forEach(function (fieldName) {\r\n        var propDef = definition[fieldName];\r\n        if (typeof propDef === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\r\n\r\n            _def[fieldName] = propDef;\r\n            if (propDef.key) {\r\n                keyFields.push(propDef);\r\n            }\r\n\r\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\r\n                propDef.notMapped = true;\r\n                propDef.storeOnObject = true;\r\n            }\r\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\r\n                propDef.set = function () { };\r\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\r\n                propDef.get = function () { };\r\n            }\r\n\r\n        } else {\r\n            _def[fieldName] = { type: propDef };\r\n        }\r\n    });\r\n\r\n    if (keyFields.length < 1) {\r\n        var keyProp;\r\n        switch (true) {\r\n            case \"id\" in _def:\r\n                keyProp = \"id\";\r\n                break;\r\n            case \"Id\" in _def:\r\n                keyProp = \"Id\"\r\n                break;\r\n            case \"ID\" in _def:\r\n                keyProp = \"ID\"\r\n                break;\r\n        }\r\n        if (keyProp) {\r\n            _def[keyProp].key = true;\r\n            var propTypeName = $data.Container.resolveName(_def[keyProp].type);\r\n            _def[keyProp].computed = true;\r\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\r\n            //}\r\n        } else {\r\n            _def.Id = { type: \"int\", key: true, computed: true }\r\n        }\r\n    }\r\n\r\n\r\n    var entityType = $data.Entity.extend(name, container, _def);\r\n    return entityType;\r\n}\r\n$data.implementation = function (name) {\r\n    return Container.resolveType(name);\r\n};\r\n\r\nexport var Event = $data.Event\r\nexport var Entity = $data.Entity\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\r\n    defaultMode: 'Default',\r\n    AllChanged: function (data) {\r\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            data._setPropertyChanged(memDefs[i]);\r\n        }\r\n        data.entityState = $data.EntityState.Modified;\r\n    },\r\n    KeepChanges: function (data) {\r\n        if (data.changedProperties && data.changedProperties.length > 0) {\r\n            data.entityState = $data.EntityState.Modified;\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n        }\r\n    },\r\n    Default: function (data) {\r\n        data.entityState = $data.EntityState.Unchanged;\r\n        data.changedProperties = undefined;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n(function () {\r\n\r\n    $data.defaults = $data.defaults || {};\r\n    $data.defaults.defaultDatabaseName = 'JayDataDefault';\r\n    $data.defaults.enableRelatedEntityReadMethods = true;\r\n    $data.defaults.relatedEntityReadMethodPrefix = 'get';\r\n    $data.defaults.relatedEntityProxyPrefix = '$relatedProxy';\r\n\r\n})();\r\n\r\n\r\n$data.Class.define('$data.StorageModel', null, null, {\r\n    constructor: function () {\r\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\r\n        this.ComplexTypes = [];\r\n        this.Enums = [];\r\n        this.Associations = [];\r\n    },\r\n    LogicalType: {},\r\n    LogicalTypeName: {},\r\n    PhysicalType: {},\r\n    PhysicalTypeName: {},\r\n    EventHandlers: {},\r\n    TableName: {},\r\n    TableOptions: { value: undefined },\r\n    ComplexTypes: {},\r\n    Enums: {},\r\n    Associations: {},\r\n    ContextType: {},\r\n    Roles: {}\r\n}, null);\r\n$data.Class.define('$data.Association', null, null, {\r\n    constructor: function (initParam) {\r\n        if (initParam) {\r\n            this.From = initParam.From;\r\n            this.FromType = initParam.FromType;\r\n            this.FromMultiplicity = initParam.FromMultiplicity;\r\n            this.FromPropertyName = initParam.FromPropertyName;\r\n            this.To = initParam.To;\r\n            this.ToType = initParam.ToType;\r\n            this.ToMultiplicity = initParam.ToMultiplicity;\r\n            this.ToPropertyName = initParam.ToPropertyName;\r\n        }\r\n    },\r\n    From: {},\r\n    FromType: {},\r\n    FromMultiplicity: {},\r\n    FromPropertyName: {},\r\n    To: {},\r\n    ToType: {},\r\n    ToMultiplicity: {},\r\n    ToPropertyName: {},\r\n    ReferentialConstraint: {}\r\n}, null);\r\n$data.Class.define('$data.ComplexType', $data.Association, null, {}, null);\r\n\r\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\r\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\r\n$data.Class.define('$data.EntityContext', null, null,\r\n{\r\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\r\n    constructor: function (storageProviderCfg) {\r\n        if ($data.ItemStore && 'ContextRegister' in $data.ItemStore)\r\n            $data.ItemStore.ContextRegister.apply(this, arguments);\r\n\r\n        if (storageProviderCfg.queryCache)\r\n            this.queryCache = storageProviderCfg.queryCache;\r\n\r\n        if (\"string\" === typeof storageProviderCfg) {\r\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\r\n                storageProviderCfg = {\r\n                    name: \"oData\",\r\n                    oDataServiceHost: storageProviderCfg\r\n                }\r\n            } else {\r\n                storageProviderCfg = {\r\n                    name: \"local\",\r\n                    databaseName: storageProviderCfg\r\n                }\r\n            }\r\n        }\r\n\r\n        if (\"provider\" in storageProviderCfg) {\r\n            storageProviderCfg.name = storageProviderCfg.provider;\r\n        }\r\n\r\n        //Initialize properties\r\n        this.lazyLoad = false;\r\n        this.trackChanges = false;\r\n        this._entitySetReferences = {};\r\n        this._storageModel = [];\r\n\r\n        var ctx = this;\r\n        ctx._isOK = false;\r\n\r\n        var origSuccessInitProvider = this._successInitProvider;\r\n        this._successInitProvider = function (errorOrContext) {\r\n            if (errorOrContext instanceof $data.EntityContext) {\r\n                origSuccessInitProvider(ctx);\r\n            } else {\r\n                origSuccessInitProvider(ctx, errorOrContext);\r\n            }\r\n        }\r\n\r\n        this._storageModel.getStorageModel = function (typeName) {\r\n            var name = Container.resolveName(typeName);\r\n            return ctx._storageModel[name];\r\n        };\r\n        if (typeof storageProviderCfg.name === 'string') {\r\n            var tmp = storageProviderCfg.name;\r\n            storageProviderCfg.name = [tmp];\r\n        }\r\n        var i = 0, providerType;\r\n        var providerList = [].concat(storageProviderCfg.name);\r\n        var callBack = $data.PromiseHandlerBase.createCallbackSettings({ success: this._successInitProvider, error: this._successInitProvider });\r\n\r\n        this._initStorageModelSync();\r\n        ctx._initializeEntitySets(ctx.getType());\r\n\r\n        $data.StorageProviderLoader.load(providerList, {\r\n            success: function (providerType) {\r\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\r\n                ctx.storageProvider.setContext(ctx);\r\n                ctx.stateManager = new $data.EntityStateManager(ctx);\r\n\r\n                var contextType = ctx.getType();\r\n                if (providerType.name in contextType._storageModelCache) {\r\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\r\n                } else {\r\n                    $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\r\n                    ctx._initializeStorageModel();\r\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\r\n                }\r\n                $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\r\n\r\n                //ctx._initializeEntitySets(contextType);\r\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\r\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\r\n\r\n                //ctx._isOK = false;\r\n                ctx._initializeStore(callBack);\r\n            },\r\n            error: function () {\r\n                callBack.error('Provider fallback failed!');\r\n            }\r\n        });\r\n\r\n\r\n\r\n        this.addEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                this[delegateName] = new $data.Event(eventName, this);\r\n            }\r\n            this[delegateName].attach(fn);\r\n        };\r\n\r\n        this.removeEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].detach(fn);\r\n        };\r\n\r\n        this.raiseEvent = function (eventName, data) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].fire(data);\r\n        };\r\n\r\n\r\n        this.ready = this.onReady({\r\n            success: $data.defaultSuccessCallback,\r\n            error: function () {\r\n                if ($data.PromiseHandler !== $data.PromiseHandlerBase) {\r\n                    $data.defaultErrorCallback.apply(this, arguments);\r\n                } else {\r\n                    $data.Trace.error(arguments);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    beginTransaction: function () {\r\n        var tables = null;\r\n        var callBack = null;\r\n        var isWrite = false;\r\n\r\n        function readParam(value) {\r\n            if (Guard.isNullOrUndefined(value)) return;\r\n\r\n            if (typeof value === 'boolean') {\r\n                isWrite = value;\r\n            } else if (Array.isArray(value)) {\r\n                tables = value;\r\n            } else {\r\n                callBack = value;\r\n            }\r\n        }\r\n\r\n        readParam(arguments[0]);\r\n        readParam(arguments[1]);\r\n        readParam(arguments[2]);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        callBack = pHandler.createCallback(callBack);\r\n\r\n        //callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        this.storageProvider._beginTran(tables, isWrite, callBack);\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    _isReturnTransaction: function (transaction) {\r\n        return transaction instanceof $data.Base || transaction === 'returnTransaction';\r\n    },\r\n    _applyTransaction: function (scope, cb, args, transaction, isReturnTransaction) {\r\n        if (isReturnTransaction === true) {\r\n            if (transaction instanceof $data.Transaction) {\r\n                Array.prototype.push.call(args, transaction);\r\n                cb.apply(scope, args);\r\n            } else {\r\n                this.beginTransaction(function (tran) {\r\n                    Array.prototype.push.call(args, tran);\r\n                    cb.apply(scope, args);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            cb.apply(scope, args);\r\n        }\r\n    },\r\n\r\n    getDataType: function (dataType) {\r\n        // Obsolate\r\n        if (typeof dataType == \"string\") {\r\n            var memDef_dataType = this[dataType];\r\n            if (memDef_dataType === undefined || memDef_dataType === null) { memDef_dataType = eval(dataType); }\r\n            return memDef_dataType;\r\n        }\r\n        return dataType;\r\n    },\r\n    _initializeEntitySets: function (ctor) {\r\n\r\n        for (var i = 0, l = this._storageModel.length; i < l; i++){\r\n            var storageModel = this._storageModel[i];\r\n            this[storageModel.ItemName] = new $data.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\r\n            var sm = this[storageModel.ItemName];\r\n            sm.name = storageModel.ItemName;\r\n            sm.tableName = storageModel.TableName;\r\n            sm.tableOptions = storageModel.TableOptions;\r\n            sm.eventHandlers = storageModel.EventHandlers;\r\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\r\n\r\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\r\n\r\n        }\r\n\r\n    },\r\n    _initializeStore: function (callBack) {\r\n        if (this.storageProvider) {\r\n            this.storageProvider.initializeStore(callBack);\r\n        }\r\n    },\r\n\r\n    _initStorageModelSync: function() {\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        for (var i = 0; i < _memDefArray.length; i++) {\r\n            var item = _memDefArray[i];\r\n            if ('dataType' in item) {\r\n                var itemResolvedDataType = Container.resolveType(item.dataType);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    var storageModel = new $data.StorageModel();\r\n                    storageModel.TableName = item.tableName || item.name;\r\n                    storageModel.TableOptions = item.tableOptions;\r\n                    storageModel.ItemName = item.name;\r\n                    storageModel.LogicalType = elementType;\r\n                    storageModel.LogicalTypeName = elementType.name;\r\n                    storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                    storageModel.ContextType = this.getType();\r\n                    storageModel.Roles = item.roles;\r\n\t\t    if (item.indices) {\r\n                        storageModel.indices = item.indices;\r\n                    }\r\n                    if (item.beforeCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\r\n                    }\r\n                    if (item.beforeRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\r\n                    }\r\n                    if (item.beforeUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\r\n                    }\r\n                    if (item.beforeDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\r\n                    }\r\n                    if (item.afterCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\r\n                    }\r\n                    if (item.afterRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterRead = item.afterRead;\r\n                    }\r\n                    if (item.afterUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\r\n                    }\r\n                    if (item.afterDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\r\n                    }\r\n                    this._storageModel.push(storageModel);\r\n                    var name = Container.resolveName(elementType);\r\n                    this._storageModel[name] = storageModel;\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    _initializeStorageModel: function () {\r\n\r\n\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        if (typeof intellisense !== 'undefined')\r\n            return;\r\n\r\n\r\n        for (var i = 0; i < this._storageModel.length; i++) {\r\n            var storageModel = this._storageModel[i];\r\n\r\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\r\n            var dbEntityInstanceDefinition = {};\r\n\r\n            storageModel.Associations = storageModel.Associations || [];\r\n            storageModel.ComplexTypes = storageModel.ComplexTypes || [];\r\n            storageModel.Enums = storageModel.Enums || [];\r\n            for (var j = 0; j < storageModel.LogicalType.memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                var memDef = storageModel.LogicalType.memberDefinitions.getPublicMappedProperties()[j];\r\n                ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\r\n\r\n                var memDefResolvedDataType = Container.resolveType(memDef.dataType);\r\n\r\n                if (((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1) || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)))\r\n                    && Guard.isNullOrUndefined(memDef.inverseProperty))\r\n                {\r\n                    //copy member definition\r\n                    var t = JSON.parse(JSON.stringify(memDef));\r\n                    //change datatype to resolved type\r\n                    t.dataType = memDefResolvedDataType;\r\n                    dbEntityInstanceDefinition[memDef.name] = t;\r\n\r\n                    if(memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)){\r\n                         this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef)\r\n                    }\r\n\r\n                    continue;\r\n                }\r\n\r\n                this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\r\n\r\n                //var memDef_dataType = this.getDataType(memDef.dataType);\r\n                if ((memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) &&\r\n                    (memDef.inverseProperty && memDef.inverseProperty !== '$$unbound')) {\r\n                    this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                } else {\r\n                    if (memDef.inverseProperty) {\r\n                        if (memDef.inverseProperty === '$$unbound') {\r\n                            //member definition is navigation but not back reference\r\n                            if (memDefResolvedDataType === $data.Array) {\r\n                                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            } else {\r\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            }\r\n                        } else {\r\n                            //member definition is navigation property one..one or one..many case\r\n                            var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\r\n                            if (fields) {\r\n                                if (fields.elementType) {\r\n                                    //member definition is one..many connection\r\n                                    var referealResolvedType = Container.resolveType(fields.elementType);\r\n                                    if (referealResolvedType === storageModel.LogicalType) {\r\n                                        this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                                    } else {\r\n                                        if (typeof intellisense === 'undefined') {\r\n                                            Guard.raise(new Exception('Inverse property not valid, refereed item element type not match: ' + storageModel.LogicalTypeName, ', property: ' + memDef.name));\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    //member definition is one..one connection\r\n                                    this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                                }\r\n                            } else {\r\n                                if (typeof intellisense === 'undefined') {\r\n                                    Guard.raise(new Exception('Inverse property not valid'));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //member definition is a complex type\r\n                        this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                    }\r\n                }\r\n            }\r\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\r\n            var dbEntityClassDefinition = {};\r\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\r\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\r\n\r\n            //create physical type\r\n            //TODO\r\n            storageModel.PhysicalType = $data.Class.define(storageModel.PhysicalTypeName, $data.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\r\n        }\r\n    },\r\n    _initializeActions: function (es, ctor, esDef) {\r\n        if (esDef && esDef.actions) {\r\n            var actionKeys = Object.keys(esDef.actions);\r\n            for (var i = 0; i < actionKeys.length; i++) {\r\n                var actionName = actionKeys[i];\r\n                var action = esDef.actions[actionName];\r\n                if (typeof action === 'function') {\r\n                    es[actionName] = action;\r\n                } else {\r\n                    var actionDef = $data.MemberDefinition.translateDefinition(action, actionName, ctor);\r\n                    if (actionDef instanceof $data.MemberDefinition && actionDef.kind === $data.MemberTypes.method) {\r\n                        es[actionName] = actionDef.method;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _buildDbType_navigationPropertyComplite: function (memDef, memDefResolvedDataType, storageModel) {\r\n        if (!memDef.inverseProperty) {\r\n            var refMemDefs = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                var refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === Container.resolveType(storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            } else {\r\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if (m.elementType && ((m.inverseProperty == memDef.name) && (Container.resolveType(m.elementType) === storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                        else if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === storageModel.LogicalType))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            }\r\n            if (refMemDefs) {\r\n                if (refMemDefs.length > 1) {\r\n                    if (typeof intellisense !== 'undefined') {\r\n                        Guard.raise(new Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + Container.resolveName(storageModel.LogicalType)));\r\n                    }\r\n                }\r\n                var refMemDef = refMemDefs.pop();\r\n                if (refMemDef) {\r\n                    memDef.inverseProperty = refMemDef.name;\r\n                }\r\n            }\r\n        } else {\r\n            var refStorageModel = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n\r\n            } else {\r\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n            }\r\n\r\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n            if (p) {\r\n                if (p.inverseProperty) {\r\n                    if (p.inverseProperty != memDef.name) {\r\n                        if (typeof intellisense === 'undefined') {\r\n                            Guard.raise(new Exception('Inverse property mismatch'));\r\n                        }\r\n                    }\r\n                } else {\r\n                    p.inverseProperty = memDef.name;\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    _buildDbType_generateConvertToFunction: function (storageModel) { return function (instance) { return instance; }; },\r\n    _buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) { return; },\r\n    _buildDbType_modifyClassDefinition: function (classDefinition, storageModel) { return; },\r\n    _buildDbType_addComplexTypePropertyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, $data.MemberTypes.complexProperty);\r\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\r\n        storageModel.ComplexTypes[memDef.name] = complexType;\r\n        storageModel.ComplexTypes.push(complexType);\r\n    },\r\n    _buildDbType_Collection_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.elementType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\r\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\r\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"0..1\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneOneDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n        if (!refereedMemberDefinition.required && !memDef.required) { if (typeof intellisense === 'undefined') { if (typeof intellisense === 'undefined') { Guard.raise(new Exception('In one to one connection, one side must required!', 'One to One connection', memDef)); } } }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n\r\n        var association = this._addAssociationElement(storageModel.LogicalType,\r\n                                                 memDef.required ? \"0..1\" : \"1\",\r\n                                                 memDef.name,\r\n                                                 refereedStorageModel.LogicalType,\r\n                                                 memDef.required ? \"1\" : \"0..1\",\r\n                                                 memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _addNavigationPropertyDefinition: function (definition, member, associationName, kind) {\r\n        var t = JSON.parse(JSON.stringify(member));\r\n        t.dataType = $data.EntitySet;\r\n        t.notMapped = true;\r\n        t.kind = kind ? kind : $data.MemberTypes.navProperty;\r\n        t.association = associationName;\r\n        definition[member.name] = t;\r\n    },\r\n    _addAssociationElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.Association({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _createComplexElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.ComplexType({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _build_EnumDefinition: function (dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\r\n        storageModel.Enums.push(memDefResolvedDataType);\r\n\r\n        var typeName = Container.resolveName(memDefResolvedDataType);\r\n        var converterGroups = this.storageProvider.fieldConverter;\r\n\r\n        var createEnumConverter = function(converterGroup){\r\n            converterGroup[typeName] = function(value){\r\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\r\n            }\r\n        }\r\n\r\n        for (var i in converterGroups) {\r\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\r\n                createEnumConverter(converterGroups[i])\r\n            }\r\n        }\r\n    },\r\n\r\n    _successInitProvider: function (context, error) {\r\n        if (context instanceof $data.EntityContext && context._isOK !== undefined) {\r\n            if (!error) {\r\n                context._isOK = true;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].success(context);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            } else {\r\n                context._isOK = error;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].error(error);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\r\n    onReady: function (fn) {\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///\r\n        ///     </summary>\r\n        ///     <param name=\"successCallback\" type=\"Function\">\r\n        ///         <summary>Success callback</summary>\r\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\r\n        ///     </param>\r\n        ///     <returns type=\"\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\r\n        ///     </summary>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        var pHandler = new $data.PromiseHandler();\r\n        var callBack = pHandler.createCallback(fn);\r\n        if (this._isOK === true) {\r\n            callBack.success(this);\r\n        } else if (this._isOK !== false) {\r\n            callBack.error(this._isOK);\r\n        } else {\r\n            this.onReadyFunction = this.onReadyFunction || [];\r\n            this.onReadyFunction.push(callBack);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    ready: { type: $data.Promise },\r\n    getEntitySetFromElementType: function (elementType) {\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"String\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        var result = this._entitySetReferences[elementType];\r\n        if (!result) {\r\n            try {\r\n                result = this._entitySetReferences[eval(elementType).name];\r\n            } catch (ex) { }\r\n        }\r\n        return result;\r\n    },\r\n    executeQuery: function (queryable, callBack, transaction) {\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        query.transaction = transaction instanceof $data.Transaction ? transaction : undefined;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        var that = this;\r\n        var clbWrapper = {};\r\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\r\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\r\n\r\n        var sets = query.getEntitySets();\r\n\r\n        var authorizedFn = function () {\r\n            var ex = true;\r\n            var wait = false;\r\n            var ctx = that;\r\n\r\n            var readyFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                if (ex) {\r\n                    if (query.transaction) {\r\n                        if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                            $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                        } else {\r\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                        }\r\n                    } else {\r\n                        ctx.beginTransaction(function (tran) {\r\n                            query.transaction = tran;\r\n                            if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                                $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                            } else {\r\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    query.rawDataList = [];\r\n                    query.result = [];\r\n                    clbWrapper.success(query);\r\n                }\r\n            };\r\n\r\n            var i = 0;\r\n            var callbackFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                var es = sets[i];\r\n                if (es.beforeRead) {\r\n                    i++;\r\n                    var r = es.beforeRead.call(this, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, (i < sets.length && ex) ? callbackFn : readyFn, sets, query);\r\n                    } else {\r\n                        if (r === false) ex = false;\r\n\r\n                        if (i < sets.length && ex) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            };\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ? $data.Access.DeleteBatch : $data.Access.Read, this.user, sets, {\r\n                success: authorizedFn,\r\n                error: clbWrapper.error\r\n            });\r\n        } else authorizedFn();\r\n    },\r\n    executeQuerySuccess: function (that, returnTransaction, callBack) {\r\n        return function (query) {\r\n            if ($data.QueryCache && $data.QueryCache.isCacheable(that, query)) {\r\n                $data.QueryCache.addToCache(that, query);\r\n            }\r\n\r\n            query.buildResultSet(that);\r\n\r\n            if ($data.ItemStore && 'QueryResultModifier' in $data.ItemStore)\r\n                $data.ItemStore.QueryResultModifier.call(that, query);\r\n\r\n            var successResult;\r\n\r\n            if (query.expression.nodeType === $data.Expressions.ExpressionType.Single ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Find ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Count ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Some ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Every) {\r\n                if (query.result.length !== 1) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else if (query.expression.nodeType === $data.Expressions.ExpressionType.First) {\r\n                if (query.result.length === 0) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else {\r\n                if (typeof query.__count === 'number' && query.result)\r\n                    query.result.totalCount = query.__count;\r\n\r\n                that.storageProvider._buildContinuationFunction(that, query);\r\n\r\n                successResult = query.result;\r\n            }\r\n\r\n            var readyFn = function () {\r\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\r\n\r\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\r\n            };\r\n\r\n            var i = 0;\r\n            var sets = query.getEntitySets();\r\n\r\n            var callbackFn = function () {\r\n                var es = sets[i];\r\n                if (es.afterRead) {\r\n                    i++;\r\n                    var r = es.afterRead.call(this, successResult, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\r\n                    } else {\r\n                        if (i < sets.length) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            }\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n    },\r\n    executeQueryError: function (that, returnTransaction, callBack) {\r\n        return function () {\r\n            if (returnTransaction)\r\n                callBack.error.apply(this, arguments);\r\n            else\r\n                callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n        };\r\n    },\r\n\r\n\r\n    batchExecuteQuery: function (queryableOptions, callBack, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(callBack);\r\n\r\n        var self = this;\r\n        var methodOperationMappings = {\r\n            count: 'length',\r\n            length: 'length',\r\n            forEach: 'forEach',\r\n            toArray: 'toArray',\r\n            single: 'single',\r\n            some: 'some',\r\n            every: 'every',\r\n            first: 'first',\r\n            removeAll: 'batchDelete'\r\n        };\r\n        var methodFrameMappings = {\r\n            count: 'CountExpression',\r\n            length: 'CountExpression',\r\n            forEach: 'ForEachExpression',\r\n            toArray: 'ToArrayExpression',\r\n            single: 'SingleExpression',\r\n            some: 'SomeExpression',\r\n            every: 'EveryExpression',\r\n            first: 'FirstExpression',\r\n            removeAll: 'BatchDeleteExpression'\r\n        };\r\n\r\n\r\n        var returnFunc = function () {\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        if (typeof queryableOptions.length != \"number\") {\r\n            cbWrapper.error(new Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\r\n            return returnFunc();\r\n        }\r\n\r\n        var qOptions = [];\r\n        for (var i = 0; i < queryableOptions.length; i++) {\r\n            var queryOption = {};\r\n            if (queryableOptions[i] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i];\r\n                queryOption.method = 'toArray';\r\n            } else if (queryableOptions[i].queryable instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i].queryable;\r\n                queryOption.method = queryableOptions[i].method || 'toArray';\r\n            } else if (queryableOptions[i][0] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i][0];\r\n                queryOption.method = queryableOptions[i][1] || 'toArray';\r\n            } else {\r\n                cbWrapper.error(new Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            if (queryOption.queryable.entityContext !== self) {\r\n                cbWrapper.error(new Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\r\n            qOptions.push(queryOption);\r\n        }\r\n\r\n\r\n        var executableQueries = [];\r\n        for (var i = 0; i < qOptions.length; i++) {\r\n            var queryOption = qOptions[i];\r\n\r\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\r\n            if (frameExpressionName && $data.Expressions[frameExpressionName] && $data.Expressions[frameExpressionName].isAssignableTo($data.Expressions.FrameOperator)) {\r\n\r\n                var queryExpression = Container['create' + frameExpressionName](queryOption.queryable.expression);\r\n                var preparator = Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\r\n\r\n                try {\r\n                    var expression = preparator.Visit(queryExpression);\r\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                    var queryable = Container.createQueryable(queryOption.queryable, expression);\r\n                    executableQueries.push(queryable);\r\n                } catch (e) {\r\n                    cbWrapper.error(e);\r\n                    return returnFunc();\r\n                }\r\n            } else {\r\n                cbWrapper.error(new Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n        }\r\n\r\n        var queryResults = [];\r\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\r\n            //wrap queries\r\n            var batchExecuteQueryExpression = Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\r\n                return new $data.Query(queryable.expression, queryable.defaultType, self);\r\n            }));\r\n\r\n            var batchExecuteQuery = Container.createQueryable(self, batchExecuteQueryExpression);\r\n            self.executeQuery(batchExecuteQuery, {\r\n                success: function (results) {\r\n                    var batchResult = [];\r\n                    var hasError = false;\r\n                    var errorValue = null;\r\n                    for (var i = 0; i < results.length && !hasError; i++) {\r\n                        var query = results[i];\r\n                        self.executeQuerySuccess(self, returnTransaction, {\r\n                            success: function (result) {\r\n                                batchResult.push(result);\r\n                            },\r\n                            error: function (err) {\r\n                                hasError = true;\r\n                                errorValue = err;\r\n                            }\r\n                        })(query);\r\n                    }\r\n                    if (!hasError) {\r\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\r\n                    } else {\r\n                        cbWrapper.error(errorValue);\r\n                    }\r\n\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction);\r\n        } else {\r\n            var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n            var readIterator = function (queries, index, iteratorCallback, itTransaction) {\r\n                var query = queries[index];\r\n                if (!query) {\r\n                    return iteratorCallback.success(itTransaction);\r\n                }\r\n\r\n                self.executeQuery(executableQueries[index], {\r\n                    success: function (result, tr) {\r\n                        queryResults.push(result);\r\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\r\n                    },\r\n                    error: iteratorCallback.error\r\n                }, itTransaction);\r\n            }\r\n\r\n            readIterator(executableQueries, 0, {\r\n                success: function (lastTran) {\r\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction)\r\n        }\r\n        return returnFunc();\r\n    },\r\n\r\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\r\n    saveChanges: function (callback, transaction) {\r\n        if ($data.QueryCache) {\r\n            $data.QueryCache.reset(this);\r\n        }\r\n\r\n        var changedEntities = [];\r\n        var trackedEntities = this.stateManager.trackedEntities;\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        var skipItems = [];\r\n        while (trackedEntities.length > 0) {\r\n            var additionalEntities = [];\r\n            //trackedEntities.forEach(function (entityCachedItem) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entityCachedItem = trackedEntities[i];\r\n\r\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\r\n                if (entityCachedItem.data.entityState == $data.EntityState.Unchanged) {\r\n                    entityCachedItem.skipSave = true;\r\n                    skipItems.push(entityCachedItem.data);\r\n                } else {\r\n                    if (entityCachedItem.data.entityState == $data.EntityState.Modified) {\r\n                        if (entityCachedItem.data.changedProperties) {\r\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\r\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\r\n                                if (pMemDef.kind == $data.MemberTypes.navProperty) {\r\n                                    var a = sModel.Associations[pMemDef.association];\r\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\r\n                                    return ((multiplicity == '*0..1') || (multiplicity == '0..11'))\r\n                                }\r\n                                return true;\r\n                            });\r\n                            if (!changeStoredProperty) {\r\n                                entityCachedItem.skipSave = true;\r\n                                skipItems.push(entityCachedItem.data);\r\n                            }\r\n                        } else {\r\n                            entityCachedItem.skipSave = true;\r\n                            skipItems.push(entityCachedItem.data);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //type before events with items\r\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\r\n\r\n                var navigationProperties = [];\r\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\r\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\r\n                    var p = smPhyMemDefs[ism];\r\n                    if (p.kind == $data.MemberTypes.navProperty)\r\n                        navigationProperties.push(p);\r\n                }\r\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\r\n                //navigationProperties.forEach(function (navProp) {\r\n                for (var j = 0; j < navigationProperties.length; j++) {\r\n                    var navProp = navigationProperties[j];\r\n\r\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\r\n                    var name = navProp.name; //eg.: \"Profile\"\r\n                    var navPropertyName = association.ToPropertyName; //eg.: User\r\n\r\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\r\n                    //connectedDataList.forEach(function (data) {\r\n                    for (var k = 0; k < connectedDataList.length; k++) {\r\n                        var data = connectedDataList[k];\r\n\r\n                        if (data) {\r\n                            var value = data[navPropertyName];\r\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\r\n                            if (association.FromMultiplicity === '$$unbound') {\r\n                                if (data instanceof $data.Array) {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    //data.forEach(function (dataItem) {\r\n                                    for (var l = 0; l < data.length; l++) {\r\n                                        var dataItem = data[l];\r\n\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                    }\r\n                                    //}, this);\r\n                                } else {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                        entityCachedItem.dependentOn.push(data);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                switch (associationType) {\r\n                                    case \"*0..1\": //Array\r\n                                        if (value) {\r\n                                            if (value instanceof Array) {\r\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\r\n                                                    value.push(entityCachedItem.data);\r\n                                                    data.initData[navPropertyName] = value;\r\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                                }\r\n                                            } else {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Item must be array or subtype of array\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                    default: //Item\r\n                                        if (value) {\r\n                                            if (value !== entityCachedItem.data) {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Integrity check error! Item assigned to another entity!\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                switch (associationType) {\r\n                                    case \"*0..1\":\r\n                                    case \"0..11\":\r\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                            if (!data.entityState) {\r\n                                //if (data.storeToken === this.storeToken) {\r\n                                //    data.entityState = $data.EntityState.Modified;\r\n                                //} else {\r\n                                //    data.entityState = $data.EntityState.Added;\r\n                                //}\r\n                                this.discoverDependentItemEntityState(data);\r\n                            }\r\n                            if (additionalEntities.indexOf(data) == -1) {\r\n                                additionalEntities.push(data);\r\n                            }\r\n                        }\r\n                    }\r\n                    //}, this);\r\n                }\r\n                //}, this);\r\n            }\r\n            //}, this);\r\n\r\n            //trackedEntities.forEach(function (entity) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entity = trackedEntities[i];\r\n\r\n                if (entity.skipSave !== true) { changedEntities.push(entity); }\r\n            }\r\n            //});\r\n\r\n            trackedEntities = [];\r\n            //additionalEntities.forEach(function (item) {\r\n            for (var i = 0; i < additionalEntities.length; i++) {\r\n                var item = additionalEntities[i];\r\n\r\n                if (!skipItems.some(function (entity) { return entity == item; })) {\r\n                    if (!changedEntities.some(function (entity) { return entity.data == item; })) {\r\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\r\n                    }\r\n                }\r\n            }\r\n            //}, this);\r\n        }\r\n\r\n\r\n        //changedEntities.forEach(function (d) {\r\n        for (var j = 0; j < changedEntities.length; j++) {\r\n            var d = changedEntities[j];\r\n\r\n            if (d.dependentOn) {\r\n                var temp = [];\r\n                for (var i = 0; i < d.dependentOn.length; i++) {\r\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\r\n                        temp.push(d.dependentOn[i]);\r\n                    } else {\r\n                        d.additionalDependentOn = d.additionalDependentOn || [];\r\n                        d.additionalDependentOn.push(d.dependentOn[i]);\r\n                    }\r\n                }\r\n                d.dependentOn = temp;\r\n            }\r\n        }\r\n        //});\r\n        skipItems = null;\r\n        var ctx = this;\r\n        if (changedEntities.length == 0) {\r\n            this.stateManager.trackedEntities.length = 0;\r\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\r\n            return pHandlerResult;\r\n        }\r\n\r\n        //validate entities\r\n        var errors = [];\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (entity.data.entityState === $data.EntityState.Added) {\r\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\r\n\r\n                    var memDefType = Container.resolveType(memDef.type);\r\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\r\n                        switch (memDefType) {\r\n                            case $data.String:\r\n                            case $data.Number:\r\n                            case $data.Float:\r\n                            case $data.Decimal:\r\n                            case $data.Integer:\r\n                            case $data.Int16:\r\n                            case $data.Int32:\r\n                            case $data.Int64:\r\n                            case $data.Byte:\r\n                            case $data.SByte:\r\n                            case $data.Date:\r\n                            case $data.Boolean:\r\n                                entity.data[memDef.name] = Container.getDefault(memDef.dataType);\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                //}, this);\r\n            }\r\n            if ((entity.data.entityState === $data.EntityState.Added || entity.data.entityState === $data.EntityState.Modified)\r\n                && !entity.data.isValid()) {\r\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\r\n            }\r\n        }\r\n        //});\r\n        if (errors.length > 0) {\r\n            clbWrapper.error(errors);\r\n            return pHandlerResult;\r\n        }\r\n\r\n        var access = $data.Access.None;\r\n\r\n        var eventData = {};\r\n        var sets = [];\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var it = changedEntities[i];\r\n            var n = it.entitySet.elementType.name;\r\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\r\n            var es = this._entitySetReferences[n];\r\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || (this.user && this.checkPermission)) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (it.data.entityState) {\r\n                    case $data.EntityState.Added:\r\n                        access |= $data.Access.Create;\r\n                        if (es.beforeCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        access |= $data.Access.Update;\r\n                        if (es.beforeUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        access |= $data.Access.Delete;\r\n                        if (es.beforeDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(it);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        var readyFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n            }\r\n\r\n            if (changedEntities.length) {\r\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\r\n\r\n                var innerCallback = {\r\n                    success: function (tran) {\r\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\r\n                    },\r\n                    error: function () {\r\n                        //TODO remove trans from args;\r\n                        if (returnTransaction)\r\n                            clbWrapper.error.apply(this, arguments);\r\n                        else\r\n                            clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n                    }\r\n                };\r\n\r\n                if (transaction instanceof $data.Transaction){\r\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\r\n                } else {\r\n                    ctx.beginTransaction(true, function (tran) {\r\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\r\n                    });\r\n                }\r\n            } else if (cancelEvent) {\r\n                clbWrapper.error(new Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\r\n            } else {\r\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\r\n            };\r\n\r\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\r\n        };\r\n\r\n        var cancelEvent;\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n        var cmdAll = {\r\n            beforeCreate: 'createAll',\r\n            beforeDelete: 'deleteAll',\r\n            beforeUpdate: 'modifyAll'\r\n        };\r\n\r\n        var callbackFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n\r\n                readyFn(cancel);\r\n                return;\r\n            }\r\n\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, (i < ies.length && !cancelEvent) ? callbackFn : readyFn, m);\r\n                } else if (r === false) {\r\n                    cancelEvent = (es.name + '.' + c);\r\n                    //all.forEach(function (it) {\r\n                    for (var index = 0; index < all.length; index++) {\r\n                        var it = all[index];\r\n\r\n                        var ix = changedEntities.indexOf(it);\r\n                        changedEntities.splice(ix, 1);\r\n                    }\r\n                    //});\r\n\r\n                    readyFn();\r\n                } else {\r\n                    if (i < ies.length && !cancelEvent) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length && !cancelEvent) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(access, this.user, sets, {\r\n                success: function () {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                },\r\n                error: clbWrapper.error\r\n            });\r\n        } else {\r\n            if (i < ies.length) callbackFn();\r\n            else readyFn();\r\n        }\r\n\r\n        return pHandlerResult;\r\n    },\r\n    discoverDependentItemEntityState: function (data) {\r\n        if (data.storeToken === this.storeToken) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else {\r\n            data.entityState = $data.EntityState.Added;\r\n        }\r\n    },\r\n\r\n    processEntityTypeBeforeEventHandler: function (skipItems, entityCachedItem) {\r\n        if (!entityCachedItem.skipSave) {\r\n            var entity = entityCachedItem.data;\r\n            var entityType = entity.getType();\r\n            var state = entity.entityState;\r\n\r\n            switch (true) {\r\n                case state === $data.EntityState.Added && entityType.onbeforeCreate instanceof $data.Event:\r\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Modified && entityType.onbeforeUpdate instanceof $data.Event:\r\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Deleted && entityType.onbeforeDelete instanceof $data.Event:\r\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    processEntityTypeAfterEventHandler: function (entityCachedItem) {\r\n        var entity = entityCachedItem.data;\r\n        var entityType = entity.getType();\r\n        var state = entity.entityState;\r\n\r\n        switch (true) {\r\n            case state === $data.EntityState.Added && entityType.onafterCreate instanceof $data.Event:\r\n                entityType.onafterCreate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Modified && entityType.onafterUpdate instanceof $data.Event:\r\n                entityType.onafterUpdate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Deleted && entityType.onafterDelete instanceof $data.Event:\r\n                entityType.onafterDelete.fire(entity);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    bulkInsert: function (entitySet, fields, datas, callback) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        if (typeof entitySet === 'string') {\r\n            var currentEntitySet;\r\n\r\n            for (var entitySetName in this._entitySetReferences) {\r\n                var actualEntitySet = this._entitySetReferences[entitySetName];\r\n                if (actualEntitySet.tableName === entitySet) {\r\n                    currentEntitySet = actualEntitySet;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!currentEntitySet)\r\n                currentEntitySet = this[entitySet];\r\n\r\n            entitySet = currentEntitySet;\r\n        }\r\n        if (entitySet) {\r\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\r\n        } else {\r\n            callback.error(new Exception('EntitySet not found'));\r\n        }\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    prepareRequest: function () { },\r\n    _postProcessSavedItems: function (callBack, changedEntities, transaction, returnTransaction) {\r\n        if (this.ChangeCollector && this.ChangeCollector instanceof $data.Notifications.ChangeCollectorBase)\r\n            this.ChangeCollector.processChangedData(changedEntities);\r\n\r\n        var eventData = {};\r\n        var ctx = this;\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (!entity.data.storeToken)\r\n                entity.data.storeToken = ctx.storeToken;\r\n\r\n            //type after events with items\r\n            this.processEntityTypeAfterEventHandler(entity);\r\n\r\n            var oes = entity.data.entityState;\r\n\r\n            entity.data.entityState = $data.EntityState.Unchanged;\r\n            entity.data.changedProperties = [];\r\n            entity.physicalData = undefined;\r\n\r\n            var n = entity.entitySet.elementType.name;\r\n            var es = ctx._entitySetReferences[n];\r\n\r\n\r\n            var eventName = undefined;\r\n            switch (oes) {\r\n                case $data.EntityState.Added:\r\n                    eventName = 'added';\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    eventName = 'deleted';\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    eventName = 'updated';\r\n                    break;\r\n            }\r\n            if (eventName) {\r\n                this.raiseEvent(eventName, entity);\r\n            }\r\n\r\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (oes) {\r\n                    case $data.EntityState.Added:\r\n                        if (es.afterCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        if (es.afterUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        if (es.afterDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(entity);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        //});\r\n\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var ctx = this;\r\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n        var cmdAll = {\r\n            afterCreate: 'createAll',\r\n            afterDelete: 'deleteAll',\r\n            afterUpdate: 'modifyAll'\r\n        };\r\n\r\n        var readyFn = function () {\r\n            if (!ctx.trackChanges) {\r\n                ctx.stateManager.reset();\r\n            }\r\n\r\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\r\n        };\r\n\r\n        var callbackFn = function () {\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\r\n                } else {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (i < ies.length) callbackFn();\r\n        else readyFn();\r\n    },\r\n    forEachEntitySet: function (fn, ctx) {\r\n        /// <summary>\r\n        ///     Iterates over the entity sets' of current EntityContext.\r\n        /// </summary>\r\n        /// <param name=\"fn\" type=\"Function\">\r\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\r\n        /// </param>\r\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\r\n        for (var entitySetName in this._entitySetReferences) {\r\n            var actualEntitySet = this._entitySetReferences[entitySetName];\r\n            fn.call(ctx, actualEntitySet);\r\n        }\r\n    },\r\n\r\n    loadItemProperty: function (entity, property, callback, transaction) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>C  allback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        Guard.requireType('entity', entity, $data.Entity);\r\n\r\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        if (entity[memberDefinition.name] != undefined) {\r\n\r\n            var pHandler = new $data.PromiseHandler();\r\n            var callBack = pHandler.createCallback(callback);\r\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\r\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        var isSingleSide = true;\r\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\r\n        var elementType = Container.resolveType(memberDefinition.dataType);\r\n        if (elementType === $data.Array || (elementType.isAssignableTo && elementType.isAssignableTo($data.EntitySet))) {\r\n            elementType = Container.resolveType(memberDefinition.elementType);\r\n\r\n            isSingleSide = false;\r\n\r\n        } else {\r\n            var associations;\r\n            for (var i = 0; i < storageModel.Associations.length; i++) {\r\n                var assoc = storageModel.Associations[i];\r\n                if (assoc.FromPropertyName == memberDefinition.name) {\r\n                    associations = assoc;\r\n                    break;\r\n                }\r\n            }\r\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\r\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\")\r\n                isSingleSide = false;\r\n        }\r\n\r\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\r\n        if (isSingleSide === true) {\r\n            //singleSide\r\n\r\n            var filterFunc = \"function (e) { return\";\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            return entitySet\r\n                .map('function (e) { return e.' + memberDefinition.name + ' }')\r\n                .single(filterFunc, filterParams, callback, transaction);\r\n        } else {\r\n            //multipleSide\r\n\r\n            var filterFunc = \"function (e) { return\"\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(elementType);\r\n            return entitySet\r\n                .filter(filterFunc, filterParams)\r\n                .toArray(callback, transaction);\r\n        }\r\n\r\n    },\r\n\r\n    getTraceString: function (queryable) {\r\n        /// <summary>\r\n        /// Returns a trace string. Used for debugging purposes!\r\n        /// </summary>\r\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\r\n        /// <returns>Trace string</returns>\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        return this.storageProvider.getTraceString(query);\r\n    },\r\n    log: function (logInfo) {\r\n        //noop as do nothing\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveFieldOperation: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\r\n    },\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\r\n    },\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\r\n    },\r\n\r\n    _generateServiceOperationQueryable: function (functionName, returnEntitySet, arg, parameters) {\r\n        if (typeof console !== 'undefined' && console.log)\r\n            console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\r\n\r\n        var params = [];\r\n        for (var i = 0; i < parameters.length; i++) {\r\n            var obj = {};\r\n            obj[parameters[i]] = Container.resolveType(Container.getTypeName(arg[i]));\r\n            params.push(obj);\r\n        }\r\n\r\n        var tempOperation = $data.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: $data.Queryable, elementType: this[returnEntitySet].elementType, params: params });\r\n        return tempOperation.apply(this, arg);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attach(entity, mode);\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attachOrGet(entity, mode);\r\n    },\r\n\r\n    addMany: function (entities) {\r\n        /// <summary>\r\n        ///     Adds several entities to their matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"Array\" />\r\n        /// <returns type=\"Array\">Returns the added entities.</returns>\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            self.add(entity);\r\n        });\r\n        return entities;\r\n    },\r\n\r\n    add: function (entity) {\r\n        /// <summary>\r\n        ///     Adds a new entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.add(entity);\r\n    },\r\n    remove: function (entity) {\r\n        /// <summary>\r\n        ///     Removes an entity from its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.remove(entity);\r\n    },\r\n    storeToken: { type: Object },\r\n\r\n    getFieldUrl: function (entity, member, collection) {\r\n        try {\r\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\r\n            var fieldName = typeof member === 'string' ? member : member.name;\r\n            if (entity instanceof $data.Entity) {\r\n                entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            } else if (!Guard.isNullOrUndefined(entity) && entity.constructor !== $data.Object) { //just a single key\r\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\r\n                var key = {};\r\n                key[keyDef.name] = entity;\r\n                entity = key;\r\n            }\r\n\r\n            //key object\r\n            if (!(entity instanceof $data.Entity)) {\r\n                entity = new entitySet.elementType(entity);\r\n            }\r\n\r\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\r\n        } catch (e) {}\r\n        return '#';\r\n    },\r\n\r\n    //xxxx\r\n    _applyRelatedEntityMethodsToContext: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                var es = this._entitySetReferences[esName];\r\n                var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + es.name;\r\n                //EntitiySets\r\n                if (!(newMemberName in es)) {\r\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n                //Context\r\n                if (!(newMemberName in this)) {\r\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _applyRelatedEntityMethodsToTypes: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                //add to Type\r\n                var elementType = this._entitySetReferences[esName].elementType;\r\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\r\n                for (var i = 0; i < members.length; i++) {\r\n                    var member = members[i];\r\n                    var memberElementType = null;\r\n                    if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                        memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                    {\r\n                        var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                        if (!elementType.getMemberDefinition(newMemberName)) {\r\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _createRelatedEntityProxyClass: function (type) {\r\n        var proxyClassName = type.namespace + $data.defaults.relatedEntityProxyPrefix + type.name;\r\n        if (!Container.isTypeRegistered(proxyClassName)) {\r\n            var definition = {};\r\n            var members = type.memberDefinitions.getPublicMappedProperties();\r\n            for (var i = 0; i < members.length; i++) {\r\n                var member = members[i];\r\n                var memberElementType = null;\r\n                if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                    memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                {\r\n                    var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member)\r\n                }\r\n            }\r\n            $data.Class.define(proxyClassName, $data.RelatedEntityProxy, null, definition, null);\r\n        }\r\n\r\n        return Container.resolveType(proxyClassName);\r\n    },\r\n    _relatedEntityGetMethod: function (targetType, navigation, context){\r\n        var that = this;\r\n        var keys = targetType.memberDefinitions.getKeyProperties();\r\n\r\n        return function (keyValue) {\r\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof $data.EntityContext ? this.context : undefined));\r\n            }\r\n        }\r\n    }\r\n}, {\r\n    inheritedTypeProcessor: function(type) {\r\n        if (type.resolveForwardDeclarations) {\r\n            type.resolveForwardDeclarations();\r\n        }\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity) {\r\n                    if (!cfg.method) {\r\n                        cfg.method = 'POST';\r\n                    }\r\n\r\n                    if (this.context) {\r\n                        context = this.context;\r\n                    } else {\r\n                        Guard.raise('entity not attached into context');\r\n                        return;\r\n                    }\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: context.getEntitySetFromElementType(this.getType())\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    for (var i = 0; i < cfg.params.length; i++) {\r\n                        //TODO: check params type\r\n                        for (var name in cfg.params[i]) {\r\n                            paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(cfg.params[i][name]), name));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (typeof clb !== 'function') {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = [];\r\n        if (cfg.params) {\r\n            for (var i = 0; i < cfg.params.length; i++) {\r\n                var param = cfg.params[i];\r\n                for (var name in param) {\r\n                    params.push({\r\n                        name: name,\r\n                        type: param[name]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    },\r\n    _convertLogicalTypeNameToPhysical: function (name) {\r\n        return name + '_$db$';\r\n    },\r\n    _storageModelCache: {\r\n        get: function () {\r\n            if (!this.__storageModelCache)\r\n                this.__storageModelCache = {};\r\n            return this.__storageModelCache;\r\n        },\r\n        set: function () {\r\n            //todo exception\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n///EntitySet is responsible for\r\n/// -creating and holding entityType through schema\r\n/// - provide Add method\r\n/// - provide Delete method\r\n/// - provide Update method\r\n/// - provide queryProvider for queryable\r\n\r\n$data.EntitySchemaConfig = function EntitySchemaConfig() {\r\n    this.Name = \"\";\r\n};\r\n$data.entitySetState = { created: 0, defined: 1, active: 2 };\r\n\r\n$data.Class.defineEx('$data.EntitySet',\r\n    [\r\n        { type: $data.Queryable, params: [new $data.Class.ConstructorParameter(1)] }\r\n    ], null,\r\n{\r\n    constructor: function (elementType, context, collectionName, eventHandlers, roles) {\r\n        /// <signature>\r\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\r\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\r\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\r\n        /// </signature>\r\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\r\n        var self = this;\r\n        context['createAdd' + elementType.name] = function (initData) {\r\n            var entity  = new elementType(initData);\r\n            return self.add(entity);\r\n        }\r\n        this.stateManager = new $data.EntityStateManager(this);\r\n\r\n        this.collectionName = collectionName;\r\n        this.roles = roles;\r\n\r\n        for (var i in eventHandlers){\r\n            this[i] = eventHandlers[i];\r\n        }\r\n    },\r\n\r\n    addNew: function(item, cb) {\r\n        var callback = $data.PromiseHandlerBase.createCallbackSettings(cb);\r\n        var _item = new this.createNew(item);\r\n        this.entityContext.saveChanges(cb);\r\n        return _item;\r\n    },\r\n\r\n    executeQuery: function (expression, on_ready) {\r\n        //var compiledQuery = this.entityContext\r\n        var callBack = $data.PromiseHandlerBase.createCallbackSettings(on_ready);\r\n        this.entityContext.executeQuery(expression, callBack);\r\n    },\r\n    getTraceString: function (expression) {\r\n        return this.entityContext.getTraceString(expression);\r\n    },\r\n    setContext: function (entityContext) {\r\n        this.entitySetState = $data.entitySetState.active;\r\n        this.entityContext = entityContext;\r\n        this.entityContext[this.schema.name] = this[this.schema.name];\r\n    },\r\n    _trackEntity: function (entity) {\r\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEntities.length; i++) {\r\n            if (trackedEntities[i].data === entity)\r\n                return;\r\n        }\r\n        trackedEntities.push({ entitySet: this, data: entity });\r\n    },\r\n    add: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds the given entity to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///\r\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///         Persons.add(person);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Added;\r\n        data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n\r\n    addMany: function(entities) {\r\n        var result = [];\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            result.push(self.add(entity));\r\n        });\r\n        return result;\r\n    },\r\n    remove: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\r\n        ///         Persons.remove({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Marks the given entity as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.remove(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Deleted;\r\n        data.changedProperties = undefined;\r\n        this._trackEntity(data);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Set an entity's related entities without loading\r\n        ///\r\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\r\n        ///         Category.attach(categoryPromo);\r\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\r\n        ///         Article.attach(article);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\r\n            var current = this.entityContext.stateManager.trackedEntities[i];\r\n            if (current.data === data)\r\n                break;\r\n            if (current.data.equals(data)) {\r\n                Guard.raise(new Exception(\"Context already contains this entity!!!\"));\r\n            }\r\n        }\r\n\r\n        if (mode === true) {\r\n            if (data.changedProperties && data.changedProperties.length > 0) {\r\n                data.entityState = $data.EntityState.Modified;\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n            }\r\n        } else {\r\n            if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n            var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n            if (typeof attachMode === \"function\") {\r\n                attachMode.call($data.EntityAttachMode, data);\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n                data.changedProperties = undefined;\r\n            }\r\n        }\r\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n    },\r\n    detach: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\r\n        ///         Persons.detach({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Detach from the context and sets state Detached.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.detach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\r\n            entity.entityState = $data.EntityState.Detached;\r\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\r\n            return;\r\n        }\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var person = Persons.attachOrGet({ Id: 5  });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///\r\n        ///         var attachedPerson = Persons.attachOrGet(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var p = new $news.Types.Person({ Id: 5 });\r\n        ///         var attachedPerson = Persons.attachOrGet(p);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            return existsItem.data;\r\n        }\r\n\r\n        if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n        var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n        if (typeof attachMode === \"function\") {\r\n            attachMode.call($data.EntityAttachMode, data);\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }\r\n        //data.entityState = $data.EntityState.Unchanged;\r\n        //data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n    //find: function (keys) {\r\n    //    //todo global scope\r\n    //    if (!this.entityKeys) {\r\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\r\n    //    }\r\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\r\n    //        if (item.entitySet == this) {\r\n    //            var isOk = true;\r\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\r\n    //            if (isOk) {\r\n    //                return item.data;\r\n    //            }\r\n    //        }\r\n    //    }, this);\r\n    //    //TODO: db call\r\n    //    return null;\r\n    //},\r\n    loadItemProperty: function (entity, memberDefinition, callback) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n\r\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\r\n    },\r\n    saveChanges: function () {\r\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\r\n    },\r\n    addProperty: function (name, getter, setter) {\r\n        return this.elementType.addProperty.apply(this.elementType, arguments);\r\n    },\r\n    expression: {\r\n        get: function () {\r\n            if (!this._expression) {\r\n                var ec = Container.createEntityContextExpression(this.entityContext);\r\n                //var name = entitySet.collectionName;\r\n                //var entitySet = this.entityContext[entitySetName];\r\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\r\n                var es = Container.createEntitySetExpression(ec,\r\n                    Container.createMemberInfoExpression(memberdef), null,\r\n                    this);\r\n                this._expression = es;\r\n            }\r\n\r\n            return this._expression;\r\n        },\r\n        set: function (value) {\r\n            this._expression = value;\r\n        }\r\n    },\r\n    getFieldUrl: function (keys, field) {\r\n        return this.entityContext.getFieldUrl(keys, field, this);\r\n    },\r\n    bulkInsert: function (fields, datas, callback) {\r\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.EntityState = {\r\n    Detached:0,\r\n    Unchanged: 10,\r\n    Added: 20,\r\n    Modified: 30,\r\n    Deleted: 40\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.EntityStateManager', null, null,\r\n{\r\n    constructor: function (entityContext) {\r\n        this.entityContext = null;\r\n        this.trackedEntities = [];\r\n        this.init(entityContext);\r\n    },\r\n    init: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n    },\r\n    reset: function () {\r\n        this.trackedEntities = [];\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Base.extend('$data.EntityWrapper', {\r\n    getEntity: function () {\r\n        Guard.raise(\"pure object\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\n\r\n$data.createEnum = function (name, container, enumType, enumDefinition) {\r\n    return $data.Enum.extend(name, container, enumType, enumDefinition);\r\n}\r\n\r\n\r\n$data.Enum = $data.Class.define(\"$data.Enum\", null, null, {\r\n    constructor: function(){\r\n        return Guard.raise(new Exception(\"Type Error\", \"Cannot create instance from enum type!\"))  \r\n    }\r\n}, {\r\n    extend: function(name, container, enumType, enumDefinition){\r\n        if (!enumDefinition) {\r\n            if(!enumType){\r\n                enumDefinition = container;\r\n                container = undefined;    \r\n            } else {\r\n                enumDefinition = enumType;\r\n                enumType = container;\r\n                container = undefined;    \r\n            }\r\n        }\r\n        \r\n        enumType = enumType || $data.Integer;\r\n        enumType = Container.resolveType(enumType);\r\n        var classDefinition = {\r\n            __enumType: { get: function(){ return enumType }, set: function() { }, enumerable: false, writable: false }\r\n        };\r\n        \r\n        var getEnumDef = function(value, index){\r\n            return { get: function() { return value }, set: function() { }, enumMember: true, index: index }\r\n        }\r\n        \r\n        var defaultValue = 0;\r\n        var isValueCalculation = [$data.Byte, $data.SByte, $data.Int16, $data.Integer, $data.Int64].indexOf(enumType) >= 0;\r\n        var hasIndex = false;\r\n        \r\n        var enumDef = [];\r\n        if (Array.isArray(enumDefinition)) {\r\n            for(var i = 0; i < enumDefinition.length; i++){\r\n                var enumValA = enumDefinition[i];\r\n                if(typeof enumValA === \"object\" && typeof enumValA.name === \"string\"){\r\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\r\n                    if(typeof enumValA.index !== \"undefined\") {\r\n                         hasIndex = true;\r\n                    }\r\n                } else if(typeof enumValA === \"string\") {\r\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\r\n                } else {\r\n                    return Guard.raise(new Exception(\"Type Error\", \"Invalid enum member\"))  \r\n                }\r\n            }\r\n        } else if (typeof enumDefinition === \"object\"){\r\n            for(var enumName in enumDefinition){\r\n                var enumValO = enumDefinition[enumName];\r\n                if(typeof enumValO === \"object\"){\r\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\r\n                    if(typeof enumValO.index !== \"undefined\") { \r\n                        hasIndex = true;\r\n                    }\r\n                } else {\r\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(hasIndex){\r\n            enumDef.sort(function (a,b) {\r\n                if (a.index < b.index)\r\n                    return -1;\r\n                if (a.index > b.index)\r\n                    return 1;\r\n                return 0;\r\n            })\r\n        }\r\n        \r\n        var enumOptions = [];\r\n        for (var i = 0; i < enumDef.length; i++) {\r\n            var enumVal = enumDef[i]\r\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\r\n               enumVal.value = defaultValue;\r\n            }\r\n            if (typeof enumVal.value === \"number\") {\r\n               defaultValue = enumVal.value; \r\n            }\r\n            defaultValue++;\r\n            enumOptions.push(enumVal.name);\r\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\r\n        }\r\n        \r\n        var enumClass = $data.Base.extend.call(this, name, container, {}, classDefinition);\r\n        \r\n        $data.Container.registerConverter(name, {\r\n            'default': function (value) {\r\n                if(typeof value == \"string\" && enumOptions.indexOf(value) >= 0){\r\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\r\n                    if(enumMember){\r\n                        return enumMember.get();\r\n                    }\r\n                } \r\n                \r\n                for (var i = 0; i < enumDef.length; i++) {\r\n                    var enumVal = enumDef[i]\r\n                    if(enumVal.value === value)\r\n                        return value;\r\n                }\r\n        \r\n                throw 0;\r\n            }\r\n        });\r\n        \r\n        return enumClass;\r\n    }\r\n});\r\n\r\n\r\n\r\nexport var Enum = $data.Enum\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ArrayLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (items) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\r\n        this.items = items || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ArrayLiteral, writable: true },\r\n\r\n    items: { value: undefined, dataType: Array, elementType: $data.Expressions.ExpressionNode },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        ///<var nam\r\n        var result = \"[\" + this.items.map(function (item) { return item.toString(); }).join(\",\") + \"]\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CallExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member, args) {\r\n        ///<summary>Represents a call to an object or global method</summary>\r\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\r\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\r\n        this.expression = expression;\r\n        this.member = member;\r\n        this.args = args;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.Call\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(thisObj, method, args) {\r\n                if (typeof method !== 'function') {\r\n                    method = thisObj[method];\r\n                }\r\n                Guard.requireType(\"method\", method, Function);\r\n                return method.apply(thisObj, args);\r\n            };\r\n        },\r\n        set: function (value) { Guard.raise(\"Property can not be set\"); }\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeParser', null, null, {\r\n\r\n    constructor: function (scopeContext) {\r\n        ///<signature>\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///</signature>\r\n        this.scopeContext = scopeContext;\r\n        this.lambdaParams = [];\r\n    },\r\n\r\n    log: function(logInfo) {\r\n        if (this.scopeContext)\r\n            this.scopeContext.log(logInfo);\r\n    },\r\n\r\n    parseExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        if (typeof code === 'object') { code = ''; }\r\n        var result = {\r\n            success: true,\r\n            errorMessage: '',\r\n            errorDetails: ''\r\n        };\r\n        ///<var name=\"AST\" type=\"Date\" />\r\n\r\n        //console.log(code.toString());\r\n        if ($data.Acorn){\r\n            //console.log('using acorn.js');\r\n            return { success: true, expression: this.ParserBuild($data.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else if ($data.Esprima){\r\n            //console.log('using esprima.js');\r\n            return { success: true, expression: this.ParserBuild($data.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else{\r\n            //console.log('using JayLint');\r\n            var AST = $data.ASTParser.parseCode(code);\r\n            this.log({ event: \"AST\", data: AST });\r\n            if (!AST.success) {\r\n                return {\r\n                    success: false,\r\n                    error: \"ASTParser error\",\r\n                    errorMessage: (AST.errors) ? JSON.stringify(AST.errors) : \"could not get code\"\r\n                };\r\n            }\r\n            var b = this.Build2(AST.tree.first[0]);\r\n            result = { success: true, expression: b, errors: AST.errors };\r\n            return result;\r\n        }\r\n    },\r\n\r\n    createExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n\r\n        var result = this.parseExpression(code, resolver);\r\n        if (!result.success) {\r\n            Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\r\n        }\r\n        return result.expression;\r\n    },\r\n\r\n    ParserBuild: function(node){\r\n        //console.log(node);\r\n        return this['Parser' + node.type](node);\r\n    },\r\n\r\n    ParserExpressionStatement: function(node){\r\n        return this.ParserBuild(node.expression);\r\n    },\r\n\r\n    ParserBlockStatement: function(node){\r\n        return this.ParserBuild(node.body[0]);\r\n    },\r\n\r\n    ParserReturnStatement: function(node){\r\n        return this.ParserBuild(node.argument);\r\n    },\r\n\r\n    ParserMemberExpression: function(node){\r\n        return new $data.Expressions.PropertyExpression(\r\n            this.ParserBuild(node.object),\r\n            new $data.Expressions.ConstantExpression(node.property.name || node.property.value, typeof (node.property.name || node.property.value))\r\n        );\r\n    },\r\n\r\n    ParserIdentifier: function(node){\r\n        return this.ParserParameter(node,\r\n            this.lambdaParams.indexOf(node.name) > -1\r\n                ? $data.Expressions.ExpressionType.LambdaParameterReference\r\n                : $data.Expressions.ExpressionType.ParameterReference\r\n            );\r\n    },\r\n\r\n    ParserObjectExpression: function(node){\r\n        var props = new Array(node.properties.length);\r\n        for (var i = 0; i < node.properties.length; i++){\r\n            props[i] = this.ParserProperty(node.properties[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ObjectLiteralExpression(props);\r\n    },\r\n\r\n    ParserArrayExpression: function(node){\r\n        var items = new Array(node.elements.length);\r\n        for (var i = 0; i < node.elements.length; i++){\r\n            items[i] = this.ParserBuild(node.elements[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ArrayLiteralExpression(items);\r\n    },\r\n\r\n    ParserProperty: function(node){\r\n        return new $data.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\r\n    },\r\n\r\n    ParserArrowFunctionExpression: function(node){\r\n        return this.ParserFunctionExpression(node);\r\n    },\r\n\r\n    ParserFunctionExpression: function(node){\r\n        var params = new Array(node.params.length);\r\n        for (var i = 0; i < node.params.length; i++){\r\n            if(i === 0 || $data.defaults.parameterResolutionCompatibility){\r\n                this.lambdaParams.push(node.params[i].name);\r\n                params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.LambdaParameter);\r\n            } else {\r\n                params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.Parameter);\r\n            }\r\n            params[i].owningFunction = result;\r\n        }\r\n        var result = new $data.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserParameter: function(node, nodeType){\r\n        var result = new $data.Expressions.ParameterExpression(node.name, null, nodeType);\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference){\r\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserLogicalExpression: function(node){\r\n        return this.ParserBinaryExpression(node);\r\n    },\r\n\r\n    ParserOperators: {\r\n        value: {\r\n            \"==\": { expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n            \"===\": { expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n            \"!=\": { expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n            \"!==\": { expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n            \">\": { expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n            \">=\": { expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n            \"<=\": { expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n            \"<\": { expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n            \"&&\": { expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n            \"||\": { expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n            \"&\": { expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n            \"|\": { expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n            \"+\": { expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n            \"-\": { expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n            \"/\": { expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n            \"%\": { expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n            \"*\": { expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n            \"[\": { expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n            \"in\": { expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryOperators: {\r\n        value: {\r\n            \"+\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n            \"-\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n            \"++true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n            \"--true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n            \"++false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n            \"!\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n            \"--false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\r\n    },\r\n\r\n    ParserUpdateExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\r\n    },\r\n\r\n    ParserBinaryExpression: function(node){\r\n        return new $data.Expressions.SimpleBinaryExpression(\r\n            this.ParserBuild(node.left),\r\n            this.ParserBuild(node.right),\r\n            this.ParserOperators[node.operator].expressionType,\r\n            node.operator,\r\n            this.ParserOperators[node.operator].type\r\n        );\r\n    },\r\n\r\n    ParserThisExpression: function(node){\r\n        return new $data.Expressions.ThisExpression();\r\n    },\r\n\r\n    ParserLiteral: function(node){\r\n        return new $data.Expressions.ConstantExpression(node.value, typeof node.value);\r\n    },\r\n\r\n    ParserCallExpression: function(node){\r\n        var method = this.ParserBuild(node.callee);\r\n        var args = new Array(node.arguments.length);\r\n        for (var i = 0; i < node.arguments.length; i++){\r\n            args[i] = this.ParserBuild(node.arguments[i]);\r\n        }\r\n\r\n        var member;\r\n        var expression;\r\n        switch (true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = new $data.Expressions.ConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n        }\r\n\r\n        return new $data.Expressions.CallExpression(expression, member, args);\r\n    }/*,\r\n\r\n    Build2: function (node) {\r\n        ///<param name=\"node\" type=\"Lint\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"number\":\r\n            case \"string\":\r\n                n = this.BuildConstant(node);\r\n                break;\r\n            case \"prefix\":\r\n                switch (node.value) {\r\n                    case \"{\":\r\n                        n = this.BuildObjectLiteral(node);\r\n                        break;\r\n                    case \"[\":\r\n                        n = this.BuildArrayLiteral(node);\r\n                        break;\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    //TODO: default case\r\n                }\r\n                break;\r\n            case \"suffix\":\r\n                switch (node.value) {\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    default:\r\n                        Guard.raise(\"Unknown suffix: \" + node.value);\r\n                }\r\n                break;\r\n            case \"infix\":\r\n                switch (node.value) {\r\n                    case \"[\":\r\n                        n = this.BuildArray(node);\r\n                        break;\r\n                    case $data.binaryOperators.resolve(node.value):\r\n                        n = this.BuildSimpleBinary(node);\r\n                        break;\r\n                    case \"function\":\r\n                        Guard.raise(\"Unexpected function arity\");\r\n                    case \"(\":\r\n                        n = this.BuildCall(node);\r\n                        break;\r\n                    case \".\":\r\n                        n = this.BuildProperty(node);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        //TODO: remove debugger, throw exception or break\r\n                }\r\n                break;\r\n            case \"statement\":\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        //TODO: consider adding break\r\n                }\r\n                break;\r\n            default:\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        break;\r\n                    case \"true\":\r\n                    case \"false\":\r\n                    case \"null\":\r\n                        n = this.BuildConstant(node);\r\n                        break;\r\n                    case \"this\":\r\n                        n = this.BuildThis(node);\r\n                        break;\r\n                    default:\r\n                        n = this.BuildParameter(node);\r\n                        break;\r\n                }\r\n        }\r\n        return n;\r\n    },\r\n\r\n    BuildThis: function (node) {\r\n        var result = Container.createThisExpression();\r\n        return result;\r\n    },\r\n\r\n    BuildConstant: function (node) {\r\n        ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n        var value = node.value;\r\n        var type = node.type;\r\n        if (node.reserved === true) {\r\n            switch (node.value) {\r\n                case \"true\": value = true; type = typeof true; break;\r\n                case \"false\": value = false; type = typeof false; break;\r\n                case \"null\": value = null; type = typeof null; break;\r\n                //TODO: missing default case\r\n            }\r\n        }\r\n        var result = new $data.Expressions.ConstantExpression(value, type);\r\n        return result;\r\n    },\r\n\r\n    BuildFunctionParameter: function (node) {\r\n\r\n    },\r\n\r\n    BuildArray: function (node) {\r\n        switch (node.second.type) {\r\n            case \"string\":\r\n                return this.BuildProperty(node);\r\n            case \"number\":\r\n            default:\r\n                return this.BuildSimpleBinary(node);\r\n        }\r\n    },\r\n\r\n    BuildParameter: function (node) {\r\n        ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        var paramName = node.value;\r\n        //TODO\r\n        //var paramType = this.resolver.resolveParameterType(node);\r\n        var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                    this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n        var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n            result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    BuildArrayLiteral: function(node) {\r\n        var self = this;\r\n        var items = node.first.map(function (item) { return self.Build2(item); });\r\n        var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n        return result;\r\n    },\r\n\r\n    BuildObjectLiteral: function (node) {\r\n        var self = this;\r\n        var fields = node.first.map(function (item) {\r\n            var eItem = self.Build2(item.first);\r\n            var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n            return result;\r\n        });\r\n        var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n        return result;\r\n    },\r\n\r\n    BuildFunction: function (node) {\r\n        ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n        ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n        var self = this;\r\n        var paramStack = [];\r\n        var params = node.first && node.first.map(function (paramNode) {\r\n            //paramStack.push(paramNode.value);\r\n            this.lambdaParams.push(paramNode.value);\r\n            return self.BuildParameter(paramNode);\r\n        }, this);\r\n        params = params || [];\r\n\r\n        //skipping return for convenience\r\n        //Possible we should raise an error as predicates and selectors can\r\n        //not be code blocks just expressions\r\n\r\n        var hasReturn = node.block.length == 0 ? false :\r\n            node.block[0].value === \"return\" ? true : false;\r\n        var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n\r\n        paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n\r\n        var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n        params.forEach(function (param) {\r\n            param.owningFunction = result;\r\n        });\r\n\r\n        //TODO place on prototyope\r\n        result.name = node.name;\r\n        return result;\r\n    },\r\n\r\n    BuildCall: function (node) {\r\n        var self = this;\r\n        var method = self.Build2(node.first);\r\n        var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n        var member;\r\n        var expression;\r\n        switch(true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = Container.createConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n            //TODO: missing default case\r\n        }\r\n\r\n        var result = Container.createCallExpression(expression, member, args);\r\n        return result;\r\n    },\r\n\r\n    BuildProperty: function (node) {\r\n        ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n        ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n        ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Build2(node.first);\r\n        //TODO\r\n        //var type = expression.type;\r\n        //var member = type.getMemberDefinition()\r\n        //TODO how to not if?????\r\n        var member;\r\n        if (node.second.identifier) {\r\n            member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n        } else {\r\n            member = this.Build2(node.second);\r\n        }\r\n        var result = new $data.Expressions.PropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n\r\n    BuildUnary: function(node) {\r\n        var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n        var nodeType = operator.expressionType;\r\n        var operand = this.Build2(node.first);\r\n        var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n        return result;\r\n    },\r\n\r\n    BuildSimpleBinary: function (node) {\r\n        ///<param name=\"node\" type=\"LintInflixNode\" />\r\n\r\n        var operator = $data.binaryOperators.getOperator(node.value);\r\n        var nodeType = operator.expressionType;\r\n\r\n        var left = this.Build2(node.first || node.left);\r\n        var right = this.Build2(node.second || node.right);\r\n        var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n        return result;\r\n    }\r\n\r\n    //Build: function (node, expNode) {\r\n    //    var n;\r\n    //    switch (node.arity) {\r\n    //        case \"ternary\":\r\n    //            if (node.value == \"?\")\r\n    //                n = this.BuildDecision(node, expNode);\r\n    //            else\r\n    //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n    //            break;\r\n    //        case null:\r\n    //        default:\r\n    //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n    //    }\r\n    //    return n;\r\n    //},*/\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ConstantExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (value, type, name, elementType) {\r\n        this.value = value;\r\n        //TODO\r\n        //this.type = Container.getTypeName(value);\r\n\r\n        this.type = type;\r\n        this.name = name;\r\n        this.elementType = elementType;\r\n        if (!Guard.isNullOrUndefined(this.value)) {\r\n            this.type = Container.resolveType(this.type)\r\n            if ((this.type === $data.Array && this.elementType) || Container.resolveType(Container.getTypeName(this.value)) !== this.type)\r\n                this.value = Container.convertTo(value, this.type, this.elementType);\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Constant, enumerable: true },\r\n    type: { value: Object, writable: true },\r\n    elementType: { value: Object, writable: true },\r\n    value: { value: undefined, writable: true },\r\n    toString: function (debug) {\r\n        //return \"[constant: \" + this.value.toString() + \"]\";\r\n        return this.value.toString();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ContinuationExpressionBuilder', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (mode) {\r\n        this.mode = mode;\r\n    },\r\n    compile: function (query) {\r\n\r\n        var findContext = { mode: \"find\", skipExists: false };\r\n        this.Visit(query.expression, findContext);\r\n\r\n        var result = {\r\n            skip: findContext.skipSize,\r\n            take: findContext.pageSize,\r\n            message: ''\r\n        }\r\n\r\n\r\n        if ('pageSize' in findContext) {\r\n            var expression;\r\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\r\n\r\n            if (!findContext.skipExists && (findContext.pageSize)) {\r\n                context.append = true;\r\n                expression = this.Visit(query.expression, context);\r\n\r\n            } else if (findContext.skipExists) {\r\n                expression = this.Visit(query.expression, context)\r\n            }\r\n\r\n            if (!context.abort) {\r\n                result.expression = expression\r\n            }\r\n            else {\r\n                result.skip = (result.skip || 0) - result.take;\r\n                result.message = 'Invalid skip value!';\r\n            }\r\n        }else{\r\n            result.message = 'take expression not defined in the chain!';\r\n        }\r\n\r\n        return result;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n\r\n        switch (context.mode) {\r\n            case 'find':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Take) {\r\n                    context.pageSize = expression.amount.value;\r\n                } else {\r\n                    context.skipSize = expression.amount.value;\r\n                    context.skipExists = true;\r\n                }\r\n                break;\r\n            case 'prev':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = expression.amount.value - context.pageSize;\r\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\r\n\r\n                    var constExp = Container.createConstantExpression(Math.max(amount, 0), \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0, no prev\r\n                    context.abort = true;\r\n                }\r\n                break;\r\n            case 'next':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = context.pageSize + expression.amount.value;\r\n                    var constExp = Container.createConstantExpression(amount, \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0\r\n                    var constExp = Container.createConstantExpression(context.pageSize, \"number\");\r\n                    return Container.createPagingExpression(expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n\r\n        this.Visit(expression.source, context);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.AssociationInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (associationInfo) {\r\n        this.associationInfo = associationInfo;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.AssociationInfo, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, parameters) {\r\n        if (Container.resolveType(Container.getTypeName(source)) == $data.String && \r\n            source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\" && \r\n             !/^[^\\.]*(=>)/.test(source.replace(/^[\\s\\xA0]+/, \"\"))) \r\n        {\r\n            source = \"function (it) { return \" + source + \"; }\";\r\n        }\r\n\r\n        this.source = source;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Code, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeToEntityConverter', $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\r\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\r\n        this.scopeContext = scopeContext;\r\n        this.parameters = [];\r\n\r\n    },\r\n\r\n\r\n    VisitBinary: function (expression, context) {\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n\r\n        if ((!(left instanceof $data.Expressions.ConstantExpression) && right instanceof $data.Expressions.ConstantExpression) ||\r\n            (!(right instanceof $data.Expressions.ConstantExpression) && left instanceof $data.Expressions.ConstantExpression)) {\r\n\r\n            var refExpression, constExpr;\r\n            if (right instanceof $data.Expressions.ConstantExpression) {\r\n                refExpression = left;\r\n                constExpr = right;\r\n            } else {\r\n                refExpression = right;\r\n                constExpr = left;\r\n            }\r\n\r\n            var memInfo;\r\n            if ((memInfo = refExpression.selector) instanceof $data.Expressions.MemberInfoExpression ||\r\n                (memInfo = refExpression.operation) instanceof $data.Expressions.MemberInfoExpression) {\r\n\r\n\r\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\r\n                    var fieldType = Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\r\n                    var constExprType = Container.resolveType(constExpr.type);\r\n\r\n                    if (fieldType !== constExprType) {\r\n\r\n                        var value = constExpr.value;\r\n                        if (expression.operator === $data.Expressions.ExpressionType.In) {\r\n                            if (Array.isArray(value)) {\r\n                                var resultExp = [];\r\n                                for (var i = 0; i < value.length; i++) {\r\n                                    resultExp.push(new $data.Expressions.ConstantExpression(value[i], fieldType));\r\n                                }\r\n                                value = resultExp;\r\n                                fieldType = $data.Array;\r\n                            } else {\r\n                                fieldType = constExprType;\r\n                            }\r\n                        }\r\n\r\n                        if (right === constExpr) {\r\n                            right = new $data.Expressions.ConstantExpression(value, fieldType, right.name);\r\n                        } else {\r\n                            left = new $data.Expressions.ConstantExpression(value, fieldType, left.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitUnary: function (expression, context) {\r\n        var operand = this.Visit(expression.operand, context);\r\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitParameter: function (expression, context) {\r\n        Guard.requireValue(\"context\", context);\r\n        var et = $data.Expressions.ExpressionType;\r\n        switch (expression.nodeType) {\r\n            case et.LambdaParameterReference:\r\n                var result = Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\r\n                return result;\r\n            case et.LambdaParameter:\r\n                //TODO: throw descriptive exception or return a value\r\n                break;\r\n            default:\r\n                Guard.raise(\"Parameter '\" + expression.name + \"' is missing!\");\r\n                break;\r\n        }\r\n    },\r\n\r\n    VisitThis: function (expression, context) {\r\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\r\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\r\n        var result = Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\r\n        return result;\r\n    },\r\n\r\n    VisitFunction: function (expression, context) {\r\n        var result = $data.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\r\n        return result.body;\r\n    },\r\n\r\n    VisitCall: function (expression, context) {\r\n        //var exp = this.Visit(expression.expression);\r\n        var self = this;\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n        var args = expression.args.map(function (arg) {\r\n            if (arg instanceof $data.Expressions.FunctionExpression && \r\n               (exp instanceof $data.Expressions.EntitySetExpression || exp instanceof $data.Expressions.FrameOperationExpression))\r\n            {\r\n                var operation = self.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if(!operation){\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                \r\n                var entitySet = self.scopeContext.getEntitySetFromElementType(exp.elementType)\r\n                var setExpr = null;\r\n                if(!entitySet){\r\n                    //TODO\r\n                    Guard.raise(\"Nested operations without entity set is not supported\");\r\n                } else {\r\n                    setExpr = entitySet.expression;\r\n                }\r\n                \r\n                var frameType = context.frameType;\r\n                context.frameType = operation.frameType;\r\n                context.lambdaParameters.push(setExpr);\r\n                var res = self.Visit(arg, context);\r\n                context.lambdaParameters.pop();\r\n                context.frameType = frameType;\r\n                \r\n                if (operation.frameTypeFactory) {\r\n                    return operation.frameTypeFactory(setExpr, res)\r\n                } else {\r\n                    return new operation.frameType(setExpr, res);\r\n                }\r\n            } else {\r\n                return self.Visit(arg, context);\r\n            }\r\n        });\r\n        var result;\r\n\r\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\r\n        switch (true) {\r\n            case exp instanceof $data.Expressions.QueryParameterExpression:\r\n                var argValues = args.map(function (a) { return a.value; });\r\n                result = expression.implementation(exp.value, member.value, argValues);\r\n                //var args = expressions\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result);\r\n            case exp instanceof $data.Expressions.EntityFieldExpression:\r\n\r\n            case exp instanceof $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntitySetExpression:\r\n            case exp instanceof $data.Expressions.FrameOperationExpression:\r\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntityExpression:\r\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            case exp instanceof $data.Expressions.EntityContextExpression:\r\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            default:\r\n                Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\r\n                //TODO we must not alter the visited tree\r\n        }\r\n\r\n    },\r\n    _resolveFunctionArguments: function (args, params) {\r\n        if (params) // remove current field poz\r\n            params = params.filter(function (p, i) { return p.name !== '@expression'; });\r\n\r\n        //objectArgs\r\n        if (args.length === 1 && args[0] instanceof $data.Expressions.ConstantExpression && typeof args[0].value === 'object' && args[0].value && params && params[0] &&\r\n            args[0].value.constructor === $data.Object && params.some(function (param) { return param.name in args[0].value })) {\r\n\r\n            return params.map(function (p) {\r\n                var type = p.type || p.dataType || args[0].type;\r\n                return new $data.Expressions.ConstantExpression(args[0].value[p.name], Container.resolveType(type), p.name);\r\n            });\r\n\r\n        } else {\r\n            return args.map(function (expr, i) {\r\n                if (expr instanceof $data.Expressions.ConstantExpression && params && params[i]) {\r\n                    var type = params[i].type || params[i].dataType || expr.type;\r\n                    return new $data.Expressions.ConstantExpression(expr.value, Container.resolveType(type), params[i].name);\r\n                } else {\r\n                    return expr;\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    VisitProperty: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n\r\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n        Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n\r\n        function isPrimitiveType(memberDefinitionArg) {\r\n\r\n            var t = memberDefinitionArg.dataType;\r\n            if (typeof t === 'function') { return false; }\r\n\r\n\t\t\t// suspicious code\r\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\r\n        }\r\n\r\n        switch (exp.expressionType) {\r\n            case $data.Expressions.EntitySetExpression:\r\n            case $data.Expressions.EntityExpression:\r\n                var memberDefinition = exp.getMemberDefinition(member.value);\r\n                if (!memberDefinition) {\r\n                    Guard.raise(new Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\r\n                }\r\n                //var storageMemberDefinition =\r\n                var storageField = memberDefinition.storageModel\r\n                                                   .PhysicalType.memberDefinitions.getMember(memberDefinition.name);\r\n                var res;\r\n                var memberDefinitionExp;\r\n                switch (storageField.kind) {\r\n                    case \"property\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createEntityFieldExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                    case \"navProperty\":\r\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\r\n                        var setExpression = Container.createEntitySetExpression(exp, Container.createAssociationInfoExpression(assocInfo));\r\n                        if (assocInfo.ToMultiplicity !== \"*\") {\r\n                            var ee = Container.createEntityExpression(setExpression, {});\r\n                            return ee;\r\n                        }/* else {\r\n                            context.lambdaParameters.push(setExpression);\r\n                        }*/\r\n                        return setExpression;\r\n                    case \"complexProperty\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createComplexTypeExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                        //TODO: missing default case\r\n                }\r\n\r\n                //s/switch => property or navigationproperty\r\n            case $data.Expressions.ComplexTypeExpression:\r\n                var memDef = exp.getMemberDefinition(member.value);\r\n                if (!(memDef)) {\r\n                    Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\r\n                }\r\n                var memDefExp = Container.createMemberInfoExpression(memDef);\r\n                var result;\r\n                //TODO!!!!\r\n                if (Container.isPrimitiveType(Container.resolveType(memDef.dataType))) {\r\n                    result = Container.createEntityFieldExpression(exp, memDefExp);\r\n                    return result;\r\n                }\r\n                result = Container.createComplexTypeExpression(exp, memDefExp);\r\n                return result;\r\n            case $data.Expressions.QueryParameterExpression:\r\n                var value = expression.implementation(exp.value, member.value);\r\n                this.parameters[exp.index].name += \"$\" + member.value;\r\n                this.parameters[exp.index].value = value;\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, Container.getTypeName(value));\r\n            case $data.Expressions.EntityFieldExpression:\r\n            case $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, []);\r\n\r\n                return result;\r\n            default:\r\n                Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ComplexTypeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityExpression, $data.Expressions.ComplexTypeExpression]);\r\n        Guard.requireType(\"selector\", selector, [$data.Expressions.EntityExpression, $data.Expressions.MemberInfoExpression]);\r\n        this.source = source;\r\n        this.selector = selector;\r\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\r\n        var t = Container.resolveType(dt);\r\n        this.entityType = t;\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Com }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityContextExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (instance) {\r\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\r\n        this.instance = instance;\r\n        //this.storage_type = {};\r\n        //this.typeName = this.type.name;\r\n    },\r\n    instance: { enumerable: false },\r\n    nodeType : { value: $data.Expressions.ExpressionType.EntityContext, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\r\n        ///</signature>\r\n        Guard.requireValue(\"source\", source);\r\n        Guard.requireValue(\"selector\", selector);\r\n        if (!(source instanceof $data.Expressions.EntitySetExpression) && !(source instanceof $data.Expressions.ServiceOperationExpression)) {\r\n            Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\r\n        }\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n\r\n        this.entityType = this.source.elementType;\r\n        this.storageModel = this.source.storageModel;\r\n\r\n        Guard.requireValue(\"entityType\", this.entityType);\r\n        Guard.requireValue(\"storageModel\", this.storageModel);\r\n\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.entityType.getMemberDefinition(name);\r\n        if (!(memdef)) {\r\n            Guard.raise(new Exception(\"Unknown member \" + name + \" on type \"+ this.entityType.name, \"MemberNotFound\"));\r\n        };\r\n            memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpressionVisitor', null, null, {\r\n\r\n    constructor: function () {\r\n        this.lambdaTypes = [];\r\n    },\r\n\r\n    canVisit: function (expression) {\r\n        return expression instanceof $data.Expressions.ExpressionNode;\r\n    },\r\n\r\n    Visit: function (expression, context) {\r\n        if (!this.canVisit(expression))\r\n            return expression;\r\n\r\n        var visitorName = \"Visit\" + expression.getType().name;\r\n        if (visitorName in this) {\r\n            var fn = this[visitorName];\r\n            var result = fn.call(this, expression, context);\r\n            if (typeof result === 'undefined') {\r\n                return expression;\r\n            }\r\n            return result;\r\n        }\r\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\r\n        return expression;\r\n    },\r\n    VisitToArrayExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createToArrayExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitForEachExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createForEachExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitSingleExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSingleExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFirstExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFirstExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitSomeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSomeExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFindExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFindExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitEveryExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createEveryExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createCountExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createBatchDeleteExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchExecuteQueryExpression: function (expression, context) {\r\n        var newQueries = expression.members.map(function (expr) {\r\n            return this.Visit(expr, context);\r\n        }, this);\r\n\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newQueries[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createBatchExecuteQueryExpression(newQueries);\r\n        }\r\n\r\n        return expression;\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        var newValues = expression.members.map(function (ofe) {\r\n            return this.Visit(ofe, context);\r\n        }, this);\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newValues[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createObjectLiteralExpression(newValues);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.expression, context);\r\n        if (expression.expression !== newExpression) {\r\n            return Container.createObjectFieldExpression(expression.fieldName, newExpression);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.source, context);\r\n        if (newExpression !== expression.source) {\r\n            return Container.createIncludeExpression(newExpression, expression.selector);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitUnaryExpression: function(expression, context) {\r\n\r\n    \t/// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\r\n    \t/// <param name=\"context\"></param>\r\n        var operand = this.Visit(expression.operand, context);\r\n        if (expression.operand !== operand) {\r\n            return Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\r\n        };\r\n        return expression;\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n        if (left !== expression.left || right !== expression.right) {\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, expression.nodeType,\r\n                expression.operator, expression.type, expression.resolution);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityContextExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\r\n        /// <param name=\"context\"></param>\r\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\r\n        return expression;\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createComplexTypeExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityFieldExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var operation = this.Visit(expression.operation, context);\r\n        var parameters = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createEntityFieldOperationExpression(source, operation, parameters);\r\n        return result;\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        var exp = this.Visit(expression.expression, context);\r\n        var args = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createParametricQueryExpression(exp, args);\r\n        return result;\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var amount = this.Visit(expression.amount, context);\r\n        if (source !== expression.source || amount !== expression.amount) {\r\n            return Container.createPagingExpression(source, amount, expression.nodeType);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\r\n        this.selector = selector;\r\n        this.source = source;\r\n\r\n\r\n        if (this.selector instanceof $data.Expressions.MemberInfoExpression ||  this.selector.name) {\r\n            this.memberName = this.selector.name;\r\n        }\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityField }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFieldOperation }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntitySetExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source,\r\n                    [$data.Expressions.EntityContextExpression, $data.Expressions.EntitySetExpression]);\r\n        Guard.requireType(\"selector\", source,\r\n                    [$data.Expressions.MemberInfoExpression, $data.Expressions.CodeExpression, $data.Expressions.ParametricQueryExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n        this.params = params;\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\r\n        this.instance = instance;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        ///TODO!!!\r\n        this.storage_type = {};\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.MemberInfoExpression);\r\n                this.elementType = selector.memberDefinition.elementType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntityExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.AssociationInfoExpression);\r\n                this.elementType = selector.associationInfo.ToType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n                if (selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n                    this.elementType = selector.associationInfo.ToType,\r\n                    this.storageModel = c.instance._storageModel.getStorageModel(selector.associationInfo.ToType)\r\n                } else {\r\n                    this.elementType = this.source.elementType;\r\n                    this.storageModel = this.source.storageModel;\r\n                }\r\n                break;\r\n            case this.source instanceof $data.Expressions.ServiceOperationExpression:\r\n                this.elementType = this.source.elementType;//?????????\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n            default:\r\n                Guard.raise(\"take and skip must be the last expressions in the chain!\");\r\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\r\n                break;\r\n        }\r\n\r\n        // suspicious code\r\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\r\n        //EntityTypeInfo\r\n\r\n    },\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.elementType.getMemberDefinition(name);\r\n        if (!(memdef)) {\r\n            Guard.raise(new Exception(\"Unknown member \" + name + \" on type \"+ this.entityType.name, \"MemberNotFound\"));\r\n        };\r\n            memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n    \r\n    instance: { enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntitySet, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionMonitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.Visit = function (expression, context) {\r\n\r\n            var result = expression;\r\n            var methodName;\r\n            if (this.canVisit(expression)) {\r\n\r\n                //if (monitorDefinition.FilterExpressionNode) {\r\n\r\n                //};\r\n\r\n                if (monitorDefinition.VisitExpressionNode) {\r\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\r\n                };\r\n\r\n                methodName = \"Visit\" + expression.getType().name;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\r\n                }\r\n            }\r\n\r\n\r\n            //apply is about 3-4 times faster then call on webkit\r\n\r\n            var args = arguments;\r\n            if (result !== expression) args = [result, context];\r\n            result = $data.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\r\n\r\n            args = [result, context];\r\n\r\n            if (this.canVisit(result)) {\r\n                var expressionTypeName = result.getType().name;\r\n                if (monitorDefinition.MonitorExpressionNode) {\r\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Monitor\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n                if (monitorDefinition.MutateExpressionNode) {\r\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Mutate\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FilterExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Filter, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.InlineCountExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.InlineCount, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchExecuteQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FrameOperator', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function () {\r\n        this.isTerminated = true;\r\n    }\r\n});\r\n\r\n$C('$data.Expressions.CountExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Count, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SingleExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Single, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FindExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source, params, subMember) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.params = params;\r\n        this.subMember = subMember;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Find, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FirstExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.First, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.ForEachExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ForEach, enumerable: true }\r\n});\r\n$C('$data.Expressions.ToArrayExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ToArray, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SomeExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Some, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.EveryExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Every, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchDeleteExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchDelete, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FrameOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n        \r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n            case this.source instanceof $data.Expressions.FrameOperationExpression:\r\n                this.elementType = this.source.elementType;\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.FrameOperation }\r\n\r\n});\r\n\r\n$C('$data.Expressions.EntityFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFunctionOperation }\r\n});\r\n\r\n$C('$data.Expressions.ContextFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.ContextFunctionOperation }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.IncludeExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Include, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.MemberInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n        this.memberName = memberDefinition.name;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.MemberInfo, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.OrderExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.source = source;\r\n        //this.selector = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.OrderBy, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParametricQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, parameters) {\r\n        this.expression = expression;\r\n        this.parameters = parameters || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ParametricQuery, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ProjectionExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Projection, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryExpressionCreator', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        Guard.requireValue(\"scopeContext\", scopeContext);\r\n        this.scopeContext = scopeContext;\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\r\n        var source = expression.source.toString();\r\n        var jsCodeTree = Container.createCodeParser(this.scopeContext).createExpression(source);\r\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\r\n\r\n        //TODO rename classes to reflex variable names\r\n        //TODO engage localValueResolver here\r\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\r\n        var constantResolver = Container.createConstantValueResolver(expression.parameters, $data.__global, this.scopeContext);\r\n        var parameterProcessor = Container.createParameterResolverVisitor();\r\n\r\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\r\n\r\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\r\n        var code2entity = Container.createCodeToEntityConverter(this.scopeContext);\r\n\r\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\r\n        var entityExpression = code2entity.Visit(jsCodeTree, {  queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\r\n\r\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\r\n        var result = Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\r\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\r\n\r\n        return result;\r\n    },\r\n\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    \r\n    VisitIncludeExpression: function(expression, context){\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createIncludeExpression(source, selector);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, index, value, type) {\r\n        this.name = name;\r\n        this.index = index;\r\n        this.value = value;\r\n        //TODO\r\n        this.type = Container.getTypeName(value);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.QueryParameter, writable: false }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.RepresentationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (kind) {\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ServiceOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, cfg, boundItem) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///<param name=\"params\" type=\"$data.Array\" />\r\n        ///<param name=\"cfg\" type=\"$data.Object\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityContextExpression]);\r\n        Guard.requireType(\"selector\", source, [$data.Expressions.MemberInfoExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector\r\n        this.params = params\r\n        this.cfg = cfg;\r\n        this.boundItem = boundItem;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                this.elementType = cfg.elementType ? Container.resolveType(cfg.elementType) : (this.elementType ? Container.resolveType(cfg.returnType) : null);\r\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(Container.resolveType(cfg.elementType)) : null;\r\n                break;\r\n            default:\r\n                Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\r\n        }\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ServiceOperation, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n $data.Class.define('$data.Expressions.ExpressionBuilder', null, null,\r\n{\r\n    constructor: function (context) {\r\n        this.context = context;\r\n    },\r\n    _isLambdaParam: function (name) {\r\n        var p = this.context.lambdaParams;\r\n        for (var i = 0; i < p.length; i++) {\r\n            if (p[i] == name)\r\n                return true;\r\n        }\r\n        return false;\r\n    },\r\n    _isParam: function (name) {\r\n        return this.context.paramContext[name] != undefined;\r\n    },\r\n    _isParamRoot: function (name) {\r\n        return this.context.paramsName == name;\r\n    },\r\n    Build: function (node, expNode) {\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"infix\":\r\n                if (\"(\" == node.value)\r\n                    n = this.BuildMethodCall(node, expNode);\r\n                else if (\".\" == node.value)\r\n                    n = this.BuildMember(node, expNode);\r\n                else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildEquality(node, expNode);\r\n                else if ([\"&&\", \"||\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if (\"[\" == node.value)\r\n                    n = this.BuildArrayAccess(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"prefix\":\r\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildUnary(node, expNode);\r\n                else if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else if (\"{\" == node.value/* && \"object\" == node.type*/) //TODO: check the second condition necessity\r\n                    n = this.BuildNewExpression(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"suffix\":\r\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"string\":\r\n            case \"number\":\r\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\r\n                break;\r\n            case \"ternary\":\r\n                if (node.value == \"?\")\r\n                    n = this.BuildDecision(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\"))\r\n                    n = this.BuildBoolLiteral(node, expNode);\r\n                else\r\n                    n = this.BuildVariable(node, expNode);\r\n                break;\r\n            default:\r\n                Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n        }\r\n        return n;\r\n    },\r\n    BuildNewExpression: function (node, expNode) {\r\n        var newExpression = $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\r\n        var n = node.first;\r\n        for (var i = 0; i < n.length; i++)\r\n            newExpression.values.push(this.Build(n[i], newExpression));\r\n        return newExpression;\r\n    },\r\n    BuildLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n    },\r\n    BuildBoolLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\r\n    },\r\n    BuildVariable: function (node, expNode) {\r\n        if (!node.first) {\r\n            if (expNode.type == MEMBERACCESS) {\r\n                var subType;\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else\r\n                    subType = \"PROPERTY\";\r\n            }\r\n            else {\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else if ($data.__global[node.value] != undefined)\r\n                    subType = \"GLOBALOBJECT\";\r\n                else\r\n\t\t\t\t\tGuard.raise(\r\n\t\t\t\t\t\tnew Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\",\r\n                        \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value })\r\n\t\t\t\t\t\t);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\r\n        }\r\n\r\n        var left = $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\r\n\r\n        var jsonAssign = $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\r\n        var right = this.Build(node.first, jsonAssign);\r\n        //left.parent = jsonAssign;\r\n        jsonAssign.left = left;\r\n        jsonAssign.right = right;\r\n\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n\r\n        return jsonAssign;\r\n    },\r\n    BuildMember: function (node, expNode) {\r\n        if (node.value != \".\" || node.arity != \"infix\") {\r\n            if (node.type == \"string\") { //TODO: more types?\r\n                return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\r\n        }\r\n        var result = $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\r\n        var expression = this.Build(node.first, result);\r\n        var member = this.Build(node.second, result);\r\n        result.expression = expression;\r\n        result.member = member;\r\n        return result;\r\n    },\r\n    BuildUnary: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildIncDec: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildBinary: function (node, expNode) {\r\n        if (!node.first) Guard.raise(\"Cannot build binary: node.first is null\");\r\n        if (!node.second) Guard.raise(\"Cannot build binary: node.second is null\");\r\n        var result = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildEquality: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildDecision: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\r\n        result.expression = this.Build(node.first, result);\r\n        result.left = this.Build(node.second, result);\r\n        result.right = this.Build(node.third, result);\r\n        return result;\r\n    },\r\n    BuildMethodCall: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\r\n        if (node.first.type == \"function\") {\r\n            //-- object's function\r\n            result.object = this.Build(node.first.first, result);\r\n            result.method = node.first.second.value;\r\n        }\r\n        else {\r\n            //-- global function\r\n            if (node.first.type != null)\r\n                Guard.raise(\"Cannot build MethodCall because type is \" + type);\r\n            result.object = null;\r\n            result.method = node.first.value;\r\n        }\r\n        var argNodes = node.second;\r\n        var args = [];\r\n        for (var i = 0; i < argNodes.length; i++) {\r\n            var arg = argNodes[i];\r\n            args[i] = this.Build(arg, result);\r\n        }\r\n        result.args = args;\r\n        return result;\r\n    },\r\n    BuildArrayAccess: function (node, expNode) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var result = $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\r\n        result.array = this.Build(node.first, result);\r\n        result.index = this.Build(node.second, result);\r\n        return result;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n//TODO: Finish refactoring ExpressionNode.js\r\n\r\n$data.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\r\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\r\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\r\n    MemberAccess: \"memberAccess\",    // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n    Call: \"call\",\r\n\r\n    /* binary operators */\r\n    Equal: \"equal\",\r\n    NotEqual: \"notEqual\",\r\n    EqualTyped: \"equalTyped\",\r\n    NotEqualTyped: \"notEqualTyped\",\r\n    GreaterThen: \"greaterThan\",\r\n    LessThen: \"lessThan\",\r\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\r\n    LessThenOrEqual: \"lessThenOrEqual\",\r\n    Or: \"or\",\r\n    OrBitwise: \"orBitwise\",\r\n    And: \"and\",\r\n    AndBitwise: \"andBitwise\",\r\n\r\n\r\n    In: \"in\",\r\n\r\n    Add: \"add\",\r\n    Divide: \"divide\",\r\n    Multiply: \"multiply\",\r\n    Subtract: \"subtract\",\r\n    Modulo: \"modulo\",\r\n    ArrayIndex: \"arrayIndex\",\r\n\r\n    /* unary operators */\r\n    New: \"new\",\r\n    Positive: \"positive\",\r\n    Negative: \"negative\",\r\n    Increment: \"increment\",\r\n    Decrement: \"decrement\",\r\n    Not: \"not\",\r\n\r\n\r\n    This: \"this\",\r\n    LambdaParameterReference: \"lambdaParameterReference\",\r\n    LambdaParameter: \"lambdaParameter\",\r\n    ParameterReference: \"parameterReference\",\r\n    Parameter: \"parameter\",\r\n\r\n    ArrayLiteral: \"arrayLiteral\",\r\n    ObjectLiteral: \"objectLiteral\",\r\n    ObjectField: \"objectField\",\r\n    Function: \"Function\",\r\n    Unknown: \"UNKNOWN\",\r\n\r\n    EntitySet: \"EntitySet\",\r\n    ServiceOperation: \"ServiceOperation\",\r\n    EntityField: \"EntityField\",\r\n    EntityContext: \"EntityContext\",\r\n    Entity: \"Entity\",\r\n    Filter: \"Filter\",\r\n    First: \"First\",\r\n    Count: \"Count\",\r\n    InlineCount: \"InlineCount\",\r\n    BatchExecuteQuery: \"BatchExecuteQuery\",\r\n    Single: \"Single\",\r\n    Find: \"Find\",\r\n    Some: \"Some\",\r\n    Every: \"Every\",\r\n    ToArray: \"ToArray\",\r\n    BatchDelete: \"BatchDelete\",\r\n    ForEach: \"ForEach\",\r\n    Projection: \"Projection\",\r\n    EntityMember: \"EntityMember\",\r\n    EntityFieldOperation: \"EntityFieldOperation\",\r\n    FrameOperation: \"FrameOperation\",\r\n    EntityFunctionOperation: \"EntityFunctionOperation\",\r\n    ContextFunctionOperation: \"ContextFunctionOperation\",\r\n    EntityBinary: \"EntityBinary\",\r\n    Code: \"Code\",\r\n    ParametricQuery: \"ParametricQuery\",\r\n    MemberInfo: \"MemberInfo\",\r\n    QueryParameter: \"QueryParameter\",\r\n    ComplexEntityField: \"ComplexEntityField\",\r\n\r\n    Take: \"Take\",\r\n    Skip: \"Skip\",\r\n    OrderBy: \"OrderBy\",\r\n    OrderByDescending: \"OrderByDescending\",\r\n    Include: \"Include\",\r\n\r\n    IndexedPhysicalAnd:\"IndexedDBPhysicalAndFilterExpression\",\r\n    IndexedLogicalAnd:\"IndexedDBLogicalAndFilterExpression\",\r\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\r\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\r\n});\r\n\r\n$data.BinaryOperator = function () {\r\n    ///<field name=\"operator\" type=\"string\" />\r\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\r\n    ///<field name=\"type\" type=\"string\" />\r\n}\r\n\r\n$data.binaryOperators = [\r\n    { operator: \"==\", expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n    { operator: \"===\", expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n    { operator: \"!=\", expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n    { operator: \"!==\", expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n    { operator: \">\", expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n    { operator: \">=\", expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n    { operator: \"<=\", expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n    { operator: \"<\", expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n    { operator: \"&&\", expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n    { operator: \"||\", expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n    { operator: \"&\", expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n    { operator: \"|\", expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n    { operator: \"+\", expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n    { operator: \"-\", expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n    { operator: \"/\", expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n    { operator: \"%\", expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n    { operator: \"*\", expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n    { operator: \"[\", expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n    { operator: \"in\", expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n];\r\n\r\n\r\n$data.binaryOperators.resolve = function (operator) {\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.binaryOperators.contains = function (operator) {\r\n    return $data.binaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.binaryOperators.getOperator = function (operator) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.unaryOperators = [\r\n    { operator: \"+\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n    { operator: \"-\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n    { operator: \"++\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n    { operator: \"--\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n    { operator: \"++\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n    { operator: \"!\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n    { operator: \"--\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n\r\n    //{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\r\n];\r\n\r\n$data.unaryOperators.resolve = function (operator) {\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.unaryOperators.contains = function (operator) {\r\n    return $data.unaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.unaryOperators.getOperator = function (operator, arity) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator && (!arity || item.arity == arity); });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.timeIt = function (fn, iterations) {\r\n    iterations = iterations || 1;\r\n\r\n    console.time(\"!\");\r\n    for (var i = 0; i < iterations; i++) {\r\n        fn();\r\n    }\r\n    console.timeEnd(\"!\");\r\n}\r\n\r\n$data.Expressions.OperatorTypes = {\r\n    UNARY: \"UNARY\",                  // { type:UNARY, executable:true, operator:, operand: }\r\n    INCDEC: \"INCDEC\",                // { type:INCDEC, executable:true, operator:, operand:, suffix: }\r\n    DECISION: \"DECISION\",            // { type:DECISION, executable:true, expression:, left:, right: }\r\n    METHODCALL: \"METHODCALL\",        // { type:METHODCALL, executable:true, object:, method:, args: }\r\n    NEW: \"NEW\",                      // { type:NEW, executable:true, values: [] };\r\n    JSONASSIGN: \"JSONASSIGN\",        // { type:JSONASSIGN, executable:true, left:, right: }\r\n    ARRAYACCESS: \"ARRAYACCESS\",      // { type:ARRAYACCESS, executable:true, array:, index: }\r\n    UNKNOWN: \"UNKNOWN\"\r\n};\r\n\r\n$data.executable = true;\r\n\r\nfunction jsonify(obj) { return JSON.stringify(obj, null, \"\\t\"); }\r\n\r\n$C('$data.Expressions.ExpressionNode', null, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for all Expressions.</summary>\r\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\r\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\r\n        ///</field>\r\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\r\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.type = type;\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\r\n        ///TODO\r\n        this.expressionType = this.constructor;\r\n    },\r\n    toJSON: function(){\r\n      var res = JSON.parse(JSON.stringify(this))\r\n      res.expressionType = Container.resolveName(this._expressionType);\r\n      return res\r\n    },\r\n    getJSON: function () { return jsonify(this); },\r\n\r\n    //TOBLOG maybe\r\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n\r\n                        if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n\r\n            this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\r\n    expressionType: {\r\n        set: function (value) {\r\n            if (typeof value === 'string') {\r\n                value = Container.resolveType(value);\r\n            }\r\n            this._expressionType = value;\r\n        },\r\n        get: function (value) {\r\n            //IE ommits listing JSON.stringify in call chain\r\n\r\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n            //     return Container.resolveName(this._expressionType);\r\n            // }\r\n            return this._expressionType;\r\n        },\r\n        enumerable: true\r\n    },\r\n    ///toString: function () { },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: false },\r\n\r\n    type: {},\r\n\r\n    isTerminated: { value: false },\r\n\r\n    toString: function () {\r\n        return this.value;\r\n    }\r\n}, null);\r\n\r\n\r\n$C('$data.Expressions.UnaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (operand, operator, nodeType, resolution) {\r\n        /// <summary>\r\n        /// Represents an operation with only one operand and an operator\r\n        /// </summary>\r\n        /// <param name=\"operand\"></param>\r\n        /// <param name=\"operator\"></param>\r\n        /// <param name=\"nodeType\"></param>\r\n        /// <param name=\"resolution\"></param>\r\n        this.operand = operand;\r\n        this.operator = operator;\r\n        this.nodeType = nodeType;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    operator: { value: undefined, writable: true },\r\n    operand: { value: undefined, writable: true },\r\n    nodeType: { value: undefined, writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FunctionExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, parameters, body) {\r\n        ///<signature>\r\n        ///<summary>Represents a function declaration.</summary>\r\n        ///<param name=\"name\" type=\"String\">Function name</param>\r\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\r\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///</signature>\r\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\r\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\r\n\r\n        this.parameters = parameters || [];\r\n        this.name = name;\r\n        this.body = body;\r\n    },\r\n\r\n    toString: function (debug) {\r\n        var paramStrings = this.parameters.map(function (p) {\r\n            return p.toString();\r\n        });\r\n        paramStrings = paramStrings.join(\",\");\r\n        var bodyString = (this.body ? this.body.toString(debug) : '');\r\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Function, writable: true },\r\n    parameters: { value: undefined, dataType: Array, elementType: $data.Expressions.ParameterExpression },\r\n    body: { value: undefined, dataType: $data.Expressions.ExpressionNode },\r\n    type: {}\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (fieldName, expression) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.fieldName = fieldName;\r\n        this.expression = expression;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectField, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\r\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectLiteral, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(namesAndValues) {\r\n                var result = { };\r\n                namesAndValues.forEach(function(item) {\r\n                    result[item.name] = item.value;\r\n                });\r\n                return result;\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PagingExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.source = source;\r\n        this.amount = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, type, nodeType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.writePropertyValue(\"name\", name);\r\n        //this.writePropertyValue(\"type\", type);\r\n        this.nodeType = nodeType || $data.Expressions.ExpressionType.Parameter;\r\n        this.name = name;\r\n        this.type = type || \"unknown\";\r\n        var _owningFunction;\r\n    },\r\n\r\n    owningFunction: { value: undefined, enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Parameter, writable: true },\r\n    name: { value: undefined, dataType: String, writable: true },\r\n    type: { value: undefined, dataType: \"object\", writable: true},\r\n    toString: function (debug) {\r\n        var result;\r\n        result = debug ? this.type + \" \" : \"\";\r\n        result = result + this.name;\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PropertyExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member) {\r\n        ///<summary>Represents accessing a property or field of an object</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\r\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\r\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\r\n\r\n        this.expression = expression;\r\n        this.member = member;\r\n\r\n        this.type = member.dataType;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.MemberAccess\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function (holder, memberName) {\r\n                if (holder[memberName] === undefined)\r\n                    Guard.raise(new Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\r\n                return holder[memberName];\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.expression.toString() + \".\" + this.member.toString();\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.SimpleBinaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (left, right, nodeType, operator, type, resolution) {\r\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\r\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\r\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\r\n        ///<field name=\"implementation\" type=\"function\" />\r\n        this.left = left;\r\n        this.right = right;\r\n        this.nodeType = nodeType;\r\n        this.operator = operator;\r\n        this.type = type;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return $data.binaryOperators.getOperator(this.operator).implementation;\r\n        },\r\n        set: function () { }\r\n\r\n    },\r\n    //nodeType: { value: $data.Expressions.ExpressionType },\r\n    type: { value: \"number\", writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ThisExpression', $data.Expressions.ExpressionNode, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.This }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExecutorVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    //--\r\n    VisitVariable: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var value = (eNode.name == context.paramsName) ? context.paramContext : $data.__global[eNode.name];\r\n        if (typeof value == 'undefined')\r\n\t\t\tGuard.raise(\r\n\t\t\t\tnew Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\",\r\n                \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name })\r\n\t\t\t\t);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var chain = this.GetMemberChain(eNode);\r\n        var value;\r\n        for (var i = 0; i < chain.length; i++) {\r\n            if (i == 0)\r\n                value = context.paramContext;\r\n            else\r\n                value = value[chain[i].name];\r\n        }\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n\r\n\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var operandValue = ((operand.valueType == \"string\") ? (\"'\" + operand.value + \"'\") : operand.value);\r\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        if (eNode.suffix)\r\n            value = eNode.operator == \"++\" ? operand.value++ : operand.value--;\r\n        else\r\n            value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value = expression.value ? left.value : right.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object !== eNode.object || args != eNode.args)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var a = [];\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            var t = typeof arg.value;\r\n            a.push((t == \"string\") ? (\"'\" + arg.value + \"'\") : arg.value);\r\n        }\r\n        var value;\r\n        var src = object ?\r\n\t\t\t\"value = object.value[eNode.method](\" + a.join(\",\") + \");\"\r\n\t\t\t:\r\n\t\t\t\"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var arrayNode = this.Visit(eNode.array, context);\r\n        var indexNode = this.Visit(eNode.index, context);\r\n        var value = arrayNode.value[indexNode.value];\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExpTreeVisitor',\r\n    null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            this._deep = this._deep + 1;\r\n            var result = null;\r\n            switch (eNode.type) {\r\n                case LITERAL: result = this.VisitLiteral(eNode, context); break;\r\n                case VARIABLE: result = this.VisitVariable(eNode, context); break;\r\n                case MEMBERACCESS: result = this.VisitMember(eNode, context); break;\r\n                case BINARY: result = this.VisitBinary(eNode, context); break;\r\n                case UNARY: result = this.VisitUnary(eNode, context); break;\r\n                case INCDEC: result = this.VisitIncDec(eNode, context); break;\r\n                case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                case NEW: result = this.VisitNew(eNode, context); break;\r\n                case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                default:\r\n                    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n            }\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n        VisitLiteral: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitVariable: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitMember: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            if (expression === eNode.expression && member === eNode.member)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\r\n        },\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        },\r\n        VisitIncDec: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        },\r\n        VisitEquality: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n        VisitMethodCall: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n\r\n            var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n            var args = this.VisitArray(eNode.args, context);\r\n            if (object === eNode.object && args === eNode.args)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        },\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitJsonAssign: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            left.JSONASSIGN = true;\r\n            right.JSONASSIGN = true;\r\n            return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionVisitor', null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNode\"/>\r\n\r\n            //this._deep = this._deep + 1;\r\n            if (!eNode) {\r\n                return eNode;\r\n            }\r\n\r\n            var result = null;\r\n\r\n                switch (eNode.expressionType) {\r\n                    case $data.Expressions.ParameterExpression:\r\n                        result = this.VisitParameter(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ConstantExpression:\r\n                        result = this.VisitConstant(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.FunctionExpression:\r\n                        result = this.VisitFunction(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.CallExpression:\r\n                        result = this.VisitCall(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.SimpleBinaryExpression:\r\n                        result = this.VisitBinary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.PropertyExpression:\r\n                        result = this.VisitProperty(eNode, context);\r\n                        break;\r\n                        //result = th\r\n                    case $data.Expressions.ThisExpression:\r\n                        if ($data.defaults.parameterResolutionCompatibility) {\r\n                            result = this.VisitThis(eNode, context);\r\n                        } else {\r\n                            Guard.raise(\"Keyword 'this' is not allowed. You should get value from parameter. (it, p1) => it.Title == p1\");\r\n                        }\r\n                        break;\r\n                    case $data.Expressions.ObjectLiteralExpression:\r\n                        result = this.VisitObjectLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ObjectFieldExpression:\r\n                        result = this.VisitObjectField(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ArrayLiteralExpression:\r\n                        result = this.VisitArrayLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.UnaryExpression:\r\n                        result = this.VisitUnary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.EntityContextExpression:\r\n                        result = this.VisitEntityContext(eNode, context);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        break;\r\n                    //case VARIABLE:\r\n\r\n                    //    result = this.VisitVariable(eNode, context);\r\n                    //    break;\r\n                    //case MEMBERACCESS:\r\n                    //    result = this.VisitMember(eNode, context);\r\n                    //    break;\r\n                    //case BINARY:\r\n                    //    result = this.VisitBinary(eNode, context);\r\n                    //    break;\r\n                    //case UNARY:\r\n                    //    result = this.VisitUnary(eNode, context);\r\n                    //    break;\r\n                    //case INCDEC:\r\n                    //    result = this.VisitIncDec(eNode, context);\r\n                    //    break;\r\n                    //case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                    //case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                    //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                    //case NEW: result = this.VisitNew(eNode, context); break;\r\n                    //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                    //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                    //default:\r\n                    //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n                }\r\n\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n\r\n        VisitArrayLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\r\n            var self = this;\r\n            var items = eNode.items.map(function (item) {\r\n                return self.Visit(item, context);\r\n            });\r\n            var result = Container.createArrayLiteralExpression(items);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var self = this;\r\n            var members = eNode.members.map(function (member) {\r\n                return self.Visit(member, context);\r\n            });\r\n            var result = Container.createObjectLiteralExpression(members);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectField: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var result = Container.createObjectFieldExpression(eNode.fieldName, expression);\r\n            return result;\r\n        },\r\n\r\n        VisitThis: function (eNode, context) {\r\n            return eNode;\r\n        },\r\n        VisitCall: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n            var self = this;\r\n            var args = eNode.args.map(function (arg) { return this.Visit(arg, context); }, this);\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.CallExpression(expression, member, args);\r\n        },\r\n\r\n        VisitParameter: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitConstant: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitFunction: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n            var self = this;\r\n\r\n            var params = eNode.parameters.map(function (p, i) {\r\n                return self.Visit(p, context);\r\n            });\r\n\r\n            var body = self.Visit(eNode.body, context);\r\n            var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n            return result;\r\n        },\r\n\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n        },\r\n\r\n        VisitProperty: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.PropertyExpression(expression, member);\r\n            //var member =\r\n        },\r\n\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            ///<returns type=\"$data.Expressions.UnaryExpression\"/>\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return new $data.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n        },\r\n\r\n        VisitEntityContext: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.EntityContextExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.GlobalContextProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (global) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.global = global;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        return (paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter || ($data.defaults.parameterResolutionCompatibility && paramExpression.nodeType == $data.Expressions.ExpressionType.ParameterReference)) && \r\n               this.global && typeof this.global === 'object' &&\r\n               paramExpression.name in this.global;\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var resultValue = this.global[paramExpression.name];\r\n        var expression = Container.createConstantExpression(resultValue, typeof resultValue, paramExpression.name);\r\n        return expression;\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n$C(\"$data.Expressions.ConstantValueResolver\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (paramsObject, global, scopeContext) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.globalResolver = Container.createGlobalContextProcessor(global);\r\n        this.paramResolver = Container.createGlobalContextProcessor(paramsObject);\r\n        this.paramsObject = paramsObject;\r\n        this.scopeContext = scopeContext;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        if($data.defaults.parameterResolutionCompatibility){\r\n            return (paramExpression.name === '$context') || (paramExpression.nodeType == $data.Expressions.ExpressionType.This && this.paramsObject)\r\n                    ? true : (this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression));\r\n        }\r\n        return (paramExpression.name === '$context') ? true : this.paramResolver.canResolve(paramExpression);\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        if (paramExpression.name === '$context') {\r\n            return Container.createEntityContextExpression(this.scopeContext);\r\n        }\r\n        if ($data.defaults.parameterResolutionCompatibility) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.This) {\r\n                return Container.createConstantExpression(this.paramsObject, typeof this.paramsObject, 'this');\r\n            }\r\n            return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\r\n        }\r\n        return this.paramResolver.resolve(paramExpression);\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LambdaParameterProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (lambdaParameterTypeInfos) {\r\n        ///<param name=\"global\" />\r\n        ///<param name=\"evalMethod\" />\r\n        var paramIndices = {};\r\n        var $idx = \"name\";\r\n\r\n        this.canResolve = function (paramExpression, context) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.LambdaParameter) {\r\n                var fnParams = paramExpression.owningFunction.parameters;\r\n\r\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\r\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\r\n                    return true;\r\n                }\r\n\r\n                for (var j = 0; j < fnParams.length; j++) {\r\n                    if (fnParams[j].name == paramExpression.name) {\r\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.resolve = function(paramExpression, context) {\r\n            var lambdaParamType = paramIndices[paramExpression.name];\r\n            var result = Container.createParameterExpression(paramExpression.name,\r\n                lambdaParamType,\r\n                $data.Expressions.ExpressionType.LambdaParameter);\r\n            result.owningFunction = paramExpression.owningFunction;\r\n            return result;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LocalContextProcessor\", $data.Expressions.GlobalContextProcessor, null, {\r\n    constructor: function (evalMethod) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.canResolve = function (paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            return paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter &&\r\n                (evalMethod(\"typeof \" + paramExpression.name) !== 'undefined');\r\n        };\r\n        this.resolve = function(paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n            var resultValue = evalMethod(paramExpression.name);\r\n            var expression = Container.createConstantExpression(resultValue, typeof resultValue);\r\n            return expression;\r\n        };\r\n\r\n    }\r\n    });\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n//\"use strict\"; // suspicious code\r\n\r\n$C('$data.Expressions.LogicalSchemaBinderVisitor',\r\n    $data.Expressions.ExpressionVisitor, null,\r\n    {\r\n        constructor: function (expression, binder) {\r\n\r\n        },\r\n\r\n        VisitProperty: function (expression, context) {\r\n            ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n            var exp = this.Visit(expression.expression, context);\r\n            var mem = this.Visit(expression.member, context);\r\n\r\n            var type = exp.type;\r\n            var memberType = context.memberResolver.resolve(type, mem.value);\r\n            mem.type = memberType;\r\n            return Container.createPropertyExpression(exp, mem);\r\n        }\r\n\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.ParameterProcessor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\r\n    },\r\n\r\n    Visit: function (node, context) {\r\n        if ((node instanceof $data.Expressions.ParameterExpression ||\r\n            node instanceof $data.Expressions.ThisExpression)\r\n            && this.canResolve(node)) {\r\n            var result = this.resolve(node, context);\r\n            if (result !== node)\r\n                result[\"resolvedBy\"] = this.constructor.name;\r\n            return result;\r\n        } else {\r\n            return node;\r\n        }\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<returns type=\"boolean\" />\r\n        Guard.raise(\"Pure method\");\r\n    },\r\n    resolve: function (paramExpression) {\r\n        ///<returns type=\"XXX\" />\r\n        Guard.raise(\"Pure method\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterResolverVisitor', $data.Expressions.ExpressionVisitor, null, {\r\n\r\n    constructor: function (expression, resolver) {\r\n    \t/// <summary>\r\n    \t/// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\r\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\r\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\r\n        /// is transformed into a constant that has the current href as its value\r\n    \t/// </summary>\r\n    \t/// <param name=\"expression\"></param>\r\n    \t/// <param name=\"resolver\"></param>\r\n        this.lambdaParamCache = {};\r\n        this.paramCache = {};\r\n    },\r\n\r\n    Visit: function (expression, resolver) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\r\n        //TODO base call is just ugly\r\n        return $data.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\r\n\r\n    },\r\n\r\n\r\n    VisitArrayLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var items = eNode.items.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = items.every(function (item) {\r\n            return item instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            items = items.map(function (item) { return item.value });\r\n            return Container.createConstantExpression(items, \"array\");\r\n        } else {\r\n            return Container.createArrayLiteralExpression(items);\r\n        }\r\n    },\r\n\r\n    VisitObjectLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var members = eNode.members.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = members.every(function (member) {\r\n            return member.expression instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            var params = members.map(function (member) { return { name: member.fieldName, value: member.expression.value }; });\r\n            var value = eNode.implementation(params);\r\n            return Container.createConstantExpression(value, typeof value);\r\n        } else {\r\n            return Container.createObjectLiteralExpression(members);\r\n        }\r\n    },\r\n\r\n    VisitThis: function(eNode, resolver) {\r\n        return resolver.Visit(eNode, resolver);\r\n    },\r\n\r\n    VisitParameter: function(eNode, resolver) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n\r\n        var node;\r\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\r\n        switch(eNode.nodeType){\r\n            case $data.Expressions.ExpressionType.Parameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                this.paramCache[node.name] = node;\r\n                return node;\r\n            case $data.Expressions.ExpressionType.ParameterReference:\r\n                if ($data.defaults.parameterResolutionCompatibility) {\r\n                    return resolver.Visit(eNode, resolver);\r\n                }\r\n            \r\n                var paramNode = this.paramCache[eNode.name];\r\n                if (paramNode) {\r\n                    return paramNode;\r\n                } else {\r\n                    Guard.raise(\"Missing parameter '\" + eNode.name + \"'\");\r\n                }\r\n                break;\r\n            case $data.Expressions.ExpressionType.LambdaParameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                this.lambdaParamCache[node.name] = node;\r\n                return node;\r\n            case $data.Expressions.ExpressionType.LambdaParameterReference:\r\n                var lambdaParam = this.lambdaParamCache[eNode.name];\r\n                if (lambdaParam) {\r\n                    node = Container.createParameterExpression(eNode.name,\r\n                            lambdaParam.type,\r\n                            $data.Expressions.ExpressionType.LambdaParameterReference);\r\n                    node.paramIndex = eNode.paramIndex;\r\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\r\n                    return node;\r\n                }\r\n                break;\r\n            default:\r\n                return eNode;\r\n\r\n        }\r\n\r\n\r\n        return eNode;\r\n    },\r\n\r\n    VisitConstant: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        return eNode;\r\n    },\r\n\r\n    VisitFunction: function(eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n\r\n        var self = this;\r\n        var params = eNode.parameters.map(function (p, i) {\r\n            var result = self.Visit(p, context);\r\n            return result;\r\n        });\r\n        var body = self.Visit(eNode.body, context);\r\n        var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n\r\n        return result;\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        var expr = $data.Expressions;\r\n\r\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.implementation(left.value, right.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n    },\r\n\r\n    VisitUnary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var operand = this.Visit(eNode.operand, context);\r\n        //var imp = $data.unaryOperators.getOperator(\r\n        var expr = $data.Expressions;\r\n        if (operand  instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.operator.implementation(operand.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n    },\r\n\r\n    VisitProperty: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var member = this.Visit(eNode.member, context);\r\n        var result;\r\n        if (expression instanceof $data.Expressions.ConstantExpression &&\r\n            member instanceof $data.Expressions.ConstantExpression) {\r\n            ///TODO implement checking for the member, throw on error\r\n            result = eNode.implementation(expression.value, member.value);\r\n\r\n            //Method call processed before\r\n            //if (typeof result === 'function') {\r\n            //    return new $data.Expressions.ConstantExpression(\r\n            //        function () { return result.apply(expression.value, arguments); });\r\n            //}\r\n            return Container.createConstantExpression(result, typeof result, expression.name + '$' + member.value);\r\n        }\r\n        if (expression === eNode.expression && member === eNode.member)\r\n            return eNode;\r\n\r\n        result = Container.createPropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n    VisitCall: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n        function isExecutable(args, body, obj) {\r\n            return body instanceof $data.Expressions.ConstantExpression &&\r\n                //global methods will not have a this.\r\n                (!obj || obj instanceof $data.Expressions.ConstantExpression) &&\r\n                args.every(function(item) {\r\n                    return item instanceof $data.Expressions.ConstantExpression;\r\n                });\r\n        }\r\n        var call = $data.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\r\n        var obj = call.expression;\r\n        var body  = call.member;\r\n        var args = call.args;\r\n\r\n        function convertToValue(arg) {\r\n            if (arg instanceof $data.Expressions.ConstantExpression)\r\n                return arg.value;\r\n            return arg;\r\n        };\r\n\r\n        if (isExecutable(args, body, obj)) {\r\n            var fn = body.value;\r\n            if (typeof fn === 'string' && obj.value) {\r\n                fn = obj.value[fn];\r\n            }\r\n            if (typeof fn !== 'function') {\r\n                //TODO dig that name out from somewhere\r\n                Guard.raise(\"Constant expression is not a method...\");\r\n            }\r\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\r\n            return new $data.Expressions.ConstantExpression(value, typeof value);\r\n        }\r\n        return call;\r\n    }\r\n}, {});\r\n$C(\"$data.Expressions.AggregatedVisitor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (visitors) {\r\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\r\n\r\n        this.Visit = function (node, context) {\r\n            for (var i = 0; i < visitors.length; i++) {\r\n                var n = visitors[i].Visit(node, context);\r\n                if (n !== node)\r\n                    return n;\r\n            }\r\n            return node;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.SetExecutableVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    Visit: function (eNode, context) {\r\n        switch (eNode.type) {\r\n            case LITERAL: return this.VisitLiteral(eNode, context);\r\n            case VARIABLE: return this.VisitVariable(eNode, context);\r\n            case MEMBERACCESS: return this.VisitMember(eNode, context);\r\n            case BINARY: return this.VisitBinary(eNode, context);\r\n            case UNARY: return this.VisitUnary(eNode, context);\r\n            case INCDEC: return this.VisitIncDec(eNode, context);\r\n            case EQUALITY: return this.VisitEquality(eNode, context);\r\n            case DECISION: return this.VisitDecision(eNode, context);\r\n            case METHODCALL: return this.VisitMethodCall(eNode, context);\r\n            case NEW: return this.VisitNew(eNode, context);\r\n            case JSONASSIGN: return this.VisitJsonAssign(eNode, context);\r\n            case ARRAYACCESS: return this.VisitArrayAccess(eNode, context);\r\n            default:\r\n                Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n        }\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && (left.executable && right.executable && expression.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object === eNode.object && args === eNode.args && ((object == null ? true : object.executable) == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\r\n    },\r\n    VisitNew: function (eNode, context) {\r\n        // { type:NEW, executable:true, values: [] };\r\n        var values = this.VisitArray(eNode.values, context);\r\n        if (values === eNode.values)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n    },\r\n    VisitJsonAssign: function (eNode, context) {\r\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right)\r\n            return eNode;\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n        return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var array = this.Visit(eNode.array, context);\r\n        var index = this.Visit(eNode.index, context);\r\n        if (array === eNode.array && index === eNode.index)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n    },\r\n    VisitArray: function (eNodes, context) {\r\n        var args = [];\r\n        var ok = true;\r\n        for (var i = 0; i < eNodes.length; i++) {\r\n            args[i] = this.Visit(eNodes[i], context);\r\n            ok = ok && args[i] === eNodes[i];\r\n        }\r\n        return ok ? eNodes : args;\r\n    },\r\n\r\n    VisitLiteral: function (eNode, context) {\r\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\r\n    },\r\n    VisitVariable: function (eNode, context) {\r\n        if (typeof context.paramContext[eNode.name] == undefined) // isn't param  //TODO: check ParamContext\r\n            Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\r\n        //this._setExecutable(eNode, true);\r\n        return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        var chain = this.GetMemberChain(eNode);\r\n        var firstMember = chain[0].name;\r\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\r\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\r\n        if (!isLocalParam && !isLambdaParam)\r\n            Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data from '../../TypeSystem/index.js';\r\n\r\n$data.defaults = $data.defaults || {};\r\n$data.defaults.parameterResolutionCompatibility = true;\r\n\r\n\r\nimport ExpressionNode2 from './ExpressionNode2.js';\r\nimport ArrayLiteralExpression from './ArrayLiteralExpression.js';\r\nimport CallExpression from './CallExpression.js';\r\nimport CodeParser from './CodeParser.js';\r\nimport ConstantExpression from './ConstantExpression.js';\r\nimport FunctionExpression from './FunctionExpression.js';\r\nimport ObjectFieldExpression from './ObjectFieldExpression.js';\r\nimport ObjectLiteralExpression from './ObjectLiteralExpression.js';\r\nimport PagingExpression from './PagingExpression.js';\r\nimport ParameterExpression from './ParameterExpression.js';\r\nimport PropertyExpression from './PropertyExpression.js';\r\nimport SimpleBinaryExpression from './SimpleBinaryExpression.js';\r\nimport ThisExpression from './ThisExpression.js';\r\nimport ExpressionVisitor from './Visitors/ExpressionVisitor.js';\r\nimport ParameterProcessor from './Visitors/ParameterProcessor.js';\r\nimport GlobalContextProcessor from './Visitors/GlobalContextProcessor.js';\r\nimport LocalContextProcessor from './Visitors/LocalContextProcessor.js';\r\nimport LambdaParameterProcessor from './Visitors/LambdaParameterProcessor.js';\r\nimport ParameterResolverVisitor from './Visitors/ParameterResolverVisitor.js';\r\nimport LogicalSchemaBinderVisitor from './Visitors/LogicalSchemaBinderVisitor.js';\r\nimport ExpTreeVisitor from './Visitors/ExpTreeVisitor.js';\r\nimport SetExecutableVisitor from './Visitors/SetExecutableVisitor.js';\r\nimport ExecutorVisitor from './Visitors/ExecutorVisitor.js';\r\nimport ExpressionBuilder from './ExpressionBuilder.js';\r\nimport AssociationInfoExpression from './EntityExpressions/AssociationInfoExpression.js';\r\nimport CodeExpression from './EntityExpressions/CodeExpression.js';\r\nimport CodeToEntityConverter from './EntityExpressions/CodeToEntityConverter.js';\r\nimport ComplexTypeExpression from './EntityExpressions/ComplexTypeExpression.js';\r\nimport EntityContextExpression from './EntityExpressions/EntityContextExpression.js';\r\nimport EntityExpression from './EntityExpressions/EntityExpression.js';\r\nimport EntityExpressionVisitor from './EntityExpressions/EntityExpressionVisitor.js';\r\nimport ExpressionMonitor from './EntityExpressions/ExpressionMonitor.js';\r\nimport EntityFieldExpression from './EntityExpressions/EntityFieldExpression.js';\r\nimport EntityFieldOperationExpression from './EntityExpressions/EntityFieldOperationExpression.js';\r\nimport EntitySetExpression from './EntityExpressions/EntitySetExpression.js';\r\nimport FrameOperationExpression from './EntityExpressions/FrameOperationExpression.js';\r\nimport FilterExpression from './EntityExpressions/FilterExpression.js';\r\nimport IncludeExpression from './EntityExpressions/IncludeExpression.js';\r\nimport MemberInfoExpression from './EntityExpressions/MemberInfoExpression.js';\r\nimport OrderExpression from './EntityExpressions/OrderExpression.js';\r\nimport ParametricQueryExpression from './EntityExpressions/ParametricQueryExpression.js';\r\nimport ProjectionExpression from './EntityExpressions/ProjectionExpression.js';\r\nimport QueryExpressionCreator from './EntityExpressions/QueryExpressionCreator.js';\r\nimport QueryParameterExpression from './EntityExpressions/QueryParameterExpression.js';\r\nimport RepresentationExpression from './EntityExpressions/RepresentationExpression.js';\r\nimport ServiceOperationExpression from './EntityExpressions/ServiceOperationExpression.js';\r\nimport ContinuationExpressionBuilder from './ContinuationExpressionBuilder.js';\r\n\r\n\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ItemStoreClass', null, null, {\r\n    constructor: function () {\r\n        var self = this;\r\n        self.itemStoreConfig = {\r\n            aliases: {},\r\n            contextTypes: {}\r\n        }\r\n\r\n        self.resetStoreToDefault('local', true);\r\n        $data.addStore = function () {\r\n            return self.addItemStoreAlias.apply(self, arguments);\r\n        };\r\n        $data.implementation = self.implementation;\r\n\r\n        $data.Entity.addMember('storeToken', {\r\n            get: function () {\r\n                if (this.storeConfigs && this.storeConfigs['default'])\r\n                    return this.storeConfigs.stores[this.storeConfigs['default']];\r\n            },\r\n            set: function (value) {\r\n                self._setTypeStoreConfig(this, 'default', value);\r\n            }\r\n        }, true);\r\n    },\r\n    itemStoreConfig: {},\r\n    attachMode: $data.EntityAttachMode ? $data.EntityAttachMode.KeepChanges : true,\r\n\r\n    addItemStoreAlias: function (name, contextFactoryOrToken, isDefault) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n\r\n        if ('string' === typeof name) {\r\n            //storeToken\r\n            if ('object' === typeof contextFactoryOrToken && 'factory' in contextFactoryOrToken) {\r\n                var type = Container.resolveType(contextFactoryOrToken.typeName);\r\n\r\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\r\n                self.itemStoreConfig.contextTypes[name] = type;\r\n                if (isDefault) {\r\n                    self.itemStoreConfig['default'] = name;\r\n                }\r\n\r\n                callback.success();\r\n                return promise.getPromise();\r\n            }\r\n                //contextFactory\r\n            else if ('function' === typeof contextFactoryOrToken) {\r\n                var preContext = contextFactoryOrToken();\r\n                var contextPromise;\r\n                if (preContext && preContext instanceof $data.EntityContext) {\r\n                    callback.success(preContext);\r\n                    contextPromise = promise.getPromise();\r\n                } else {\r\n                    contextPromise = preContext;\r\n                }\r\n\r\n                return contextPromise.then(function (ctx) {\r\n                    if (typeof ctx === 'function') {\r\n                        //factory resolve factory\r\n                        return self.addItemStoreAlias(name, ctx, isDefault);\r\n                    }\r\n\r\n                    if (ctx instanceof $data.EntityContext) {\r\n                        return ctx.onReady()\r\n                            .then(function (ctx) {\r\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\r\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\r\n                                if (isDefault) {\r\n                                    self.itemStoreConfig['default'] = name;\r\n                                }\r\n\r\n                                return ctx;\r\n                            });\r\n                    } else {\r\n                        promise = new $data.PromiseHandler();\r\n                        callback = promise.createCallback();\r\n                        callback.error(new Exception('factory dont have context instance', 'Invalid arguments'));\r\n                        return promise.getPromise();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        callback.error(new Exception('Name or factory missing', 'Invalid arguments'));\r\n        return promise.getPromise();\r\n    },\r\n    resetStoreToDefault: function (name, isDefault) {\r\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\r\n        delete this.itemStoreConfig.contextTypes[name];\r\n        if (isDefault) {\r\n            this.itemStoreConfig['default'] = name;\r\n        }\r\n    },\r\n    _setStoreAlias: function (entity, storeToken) {\r\n        if ('object' === typeof storeToken && !entity.storeToken)\r\n            entity.storeToken = storeToken\r\n        return entity;\r\n    },\r\n    _getStoreAlias: function (entity, storeAlias) {\r\n        var type;\r\n        if (entity instanceof $data.Entity) {\r\n            var alias = storeAlias || entity.storeToken;\r\n            if (alias) {\r\n                return alias;\r\n            } else {\r\n                type = entity.getType();\r\n            }\r\n        } else {\r\n            type = entity;\r\n        }\r\n\r\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\r\n    },\r\n    _getStoreContext: function (aliasOrToken, type, nullIfInvalid) {\r\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\r\n\r\n        if (!contextPromise || contextPromise instanceof $data.EntityContext) {\r\n            var promise = new $data.PromiseHandler();\r\n            var callback = promise.createCallback();\r\n            callback.success(contextPromise);\r\n            contextPromise = promise.getPromise();\r\n        }\r\n\r\n        return contextPromise.then(function (context) {\r\n            if (context instanceof $data.EntityContext) {\r\n                return context.onReady();\r\n            } else if (nullIfInvalid) {\r\n                return null;\r\n            } else {\r\n                var promise = new $data.PromiseHandler();\r\n                var callback = promise.createCallback();\r\n                callback.error(new Exception('factory return type error', 'Error'));\r\n                return promise.getPromise();\r\n            }\r\n        });\r\n    },\r\n    _getContextPromise: function (aliasOrToken, type) {\r\n        /*Token*/\r\n        if (aliasOrToken && 'object' === typeof aliasOrToken && 'function' === typeof aliasOrToken.factory) {\r\n            return aliasOrToken.factory(type);\r\n        } else if (aliasOrToken && 'object' === typeof aliasOrToken && 'object' === typeof aliasOrToken.args && 'string' === typeof aliasOrToken.typeName) {\r\n            var type = Container.resolveType(aliasOrToken.typeName);\r\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\r\n        }\r\n            /*resolve alias from type (Token)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\r\n            return type.storeConfigs.stores[aliasOrToken].factory();\r\n        }\r\n            /*resolve alias from type (constructor options)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\r\n            return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\r\n        }\r\n            /*resolve alias from ItemStore (factories)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\r\n            return this.itemStoreConfig.aliases[aliasOrToken](type);\r\n        }\r\n            /*token is factory*/\r\n        else if (aliasOrToken && 'function' === typeof aliasOrToken) {\r\n            return aliasOrToken();\r\n        }\r\n            /*default no hint*/\r\n        else {\r\n            return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\r\n        }\r\n\r\n    },\r\n    _getStoreEntitySet: function (storeAlias, instanceOrType) {\r\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\r\n        var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();;\r\n\r\n        return this._getStoreContext(aliasOrToken, type)\r\n            .then(function (ctx) {\r\n                var entitySet = ctx.getEntitySetFromElementType(type);\r\n                if (!entitySet) {\r\n                    var d = new $data.PromiseHandler();\r\n                    var callback = d.createCallback();\r\n                    callback.error(\"EntitySet not exist for \" + type.fullName);\r\n                    return d.getPromise();\r\n                }\r\n                return entitySet;\r\n            });\r\n    },\r\n    _getDefaultItemStoreFactory: function (instanceOrType, initStoreConfig) {\r\n        if (instanceOrType) {\r\n            var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();\r\n            var typeName = $data.Container.resolveName(type) + \"_items\";\r\n            var typeName = typeName.replace(/\\./g, \"_\");\r\n\r\n            var storeConfig = $data.typeSystem.extend({\r\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\r\n                tableName: typeName,\r\n                initParam: { provider: 'local', databaseName: typeName }\r\n            }, initStoreConfig);\r\n\r\n            var contextDef = {};\r\n            contextDef[storeConfig.collectionName] = { type: $data.EntitySet, elementType: type }\r\n            if (storeConfig.tableName)\r\n                contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\r\n\r\n            var inMemoryType = $data.EntityContext.extend(typeName, contextDef);\r\n            var ctx = new inMemoryType(storeConfig.initParam);\r\n            if (initStoreConfig && typeof initStoreConfig === 'object')\r\n                initStoreConfig.factory = ctx._storeToken.factory;\r\n            return ctx;\r\n        }\r\n        return undefined;\r\n    },\r\n    implementation: function (name, contextOrAlias) {\r\n        var self = $data.ItemStore;\r\n        var result;\r\n\r\n        if (typeof contextOrAlias === 'string') {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias]\r\n        } else if (contextOrAlias instanceof $data.EntityContext) {\r\n            contextOrAlias = contextOrAlias.getType();\r\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\r\n        }\r\n\r\n        if (contextOrAlias) {\r\n            result = self._resolveFromContext(contextOrAlias, name);\r\n        }\r\n\r\n        if (!result) {\r\n            result = Container.resolveType(name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _resolveFromContext: function (contextType, name) {\r\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            var memDef = memDefs[i];\r\n            if (memDef.type) {\r\n                var memDefType = Container.resolveType(memDef.type);\r\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(memDef.elementType);\r\n                    if (elementType.name === name) {\r\n                        return elementType;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n\r\n    //Entity Instance\r\n    EntityInstanceSave: function (storeAlias, hint, attachMode) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                return self._getSaveMode(entity, entitySet, hint, storeAlias)\r\n                    .then(function (mode) {\r\n                        mode = mode || 'add';\r\n                        switch (mode) {\r\n                            case 'add':\r\n                                entitySet.add(entity);\r\n                                break;\r\n                            case 'attach':\r\n                                entitySet.attach(entity, attachMode || true);\r\n                                break;\r\n                            default:\r\n                                var d = new $data.PromiseHandler();\r\n                                var callback = d.createCallback();\r\n                                callback.error('save mode not supported: ' + mode);\r\n                                return d.getPromise();\r\n                        }\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { self._setStoreAlias(entity, entitySet.entityContext.storeToken); return entity; });\r\n                    });\r\n            });\r\n    },\r\n    EntityInstanceRemove: function (storeAlias) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                entitySet.remove(entity);\r\n\r\n                return entitySet.entityContext.saveChanges()\r\n                    .then(function () { return entity; });\r\n            });\r\n    },\r\n    EntityInstanceRefresh: function (storeAlias, keepStore) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        var entityType = entity.getType();\r\n\r\n        var key = self._getKeyObjectFromEntity(entity, entityType);\r\n\r\n        return entityType.read(key, storeAlias)\r\n            .then(function (loadedEntity) {\r\n                entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                    entity[memDef.name] = loadedEntity[memDef.name];\r\n                });\r\n                entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\r\n                entity.changedProperties = undefined;\r\n                return entity;\r\n            });\r\n    },\r\n\r\n    //Entity Type\r\n    EntityInheritedTypeProcessor: function (type) {\r\n        var self = $data.ItemStore;\r\n        type.readAll = self.EntityTypeReadAll(type);\r\n        type.read = self.EntityTypeRead(type);\r\n        type.removeAll = self.EntityTypeRemoveAll(type);\r\n        type.remove = self.EntityTypeRemove(type);\r\n        type.get = self.EntityTypeGet(type); //Not complete\r\n        type.save = self.EntityTypeSave(type);\r\n        type.addMany = self.EntityTypeAddMany(type);\r\n        type.itemCount = self.EntityTypeItemCount(type);\r\n        type.query = self.EntityTypeQuery(type);\r\n        type.takeFirst = self.EntityTypeTakeFirst(type);\r\n\r\n        type.setStore = self.EntityTypeSetStore(type);\r\n    },\r\n    EntityTypeReadAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemoveAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.toArray().then(function (items) {\r\n                        items.forEach(function (item) {\r\n                            entitySet.remove(item);\r\n                        });\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { return items; });\r\n                    });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRead: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    try {\r\n                        var singleParam = self._findByIdQueryable(entitySet, key);\r\n                        return entitySet.single(singleParam.predicate, singleParam.thisArgs)\r\n                            .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                    } catch (e) {\r\n                        var d = new $data.PromiseHandler();\r\n                        var callback = d.createCallback();\r\n                        callback.error(e);\r\n                        return d.getPromise();\r\n                    }\r\n                });\r\n        };\r\n    },\r\n    EntityTypeGet: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var item = new type(self._getKeyObjectFromEntity(key));\r\n            item.refresh(storeAlias);\r\n            return item;\r\n        };\r\n    },\r\n    EntityTypeSave: function (type) {\r\n        return function (initData, storeAlias, hint) {\r\n\r\n            var self = $data.ItemStore;\r\n            var instance = new type(initData);\r\n            return instance.save(storeAlias, hint);\r\n        }\r\n    },\r\n    EntityTypeAddMany: function (type) {\r\n        return function (initDatas, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    var items = entitySet.addMany(initDatas);\r\n                    return entitySet.entityContext.saveChanges()\r\n                        .then(function () {\r\n                            return items;\r\n                        });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemove: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var entityPk = type.memberDefinitions.getKeyProperties();\r\n            var entity;\r\n            if (entityPk.length === 1) {\r\n                var obj = {};\r\n                obj[entityPk[0].name] = key;\r\n                entity = new type(obj);\r\n            } else {\r\n                entity = new type(key);\r\n            }\r\n            return entity.remove(storeAlias);\r\n        }\r\n    },\r\n    EntityTypeItemCount: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.length();\r\n                });\r\n        }\r\n    },\r\n    EntityTypeQuery: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.filter(predicate, thisArg).forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeTakeFirst: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.first(predicate, thisArg)\r\n                        .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n\r\n    EntityTypeSetStore: function (type) {\r\n        return function (name, config) {\r\n            if (typeof name === 'object' && typeof config === 'undefined') {\r\n                config = name;\r\n                name = 'default';\r\n            }\r\n\r\n            var self = $data.ItemStore;\r\n\r\n            var defStoreConfig = {};\r\n            if (config) {\r\n                if (config.tableName) {\r\n                    defStoreConfig.tableName = config.tableName;\r\n                    delete config.tableName;\r\n                }\r\n\r\n                if (config.collectionName) {\r\n                    defStoreConfig.collectionName = config.collectionName;\r\n                    delete config.collectionName;\r\n                }\r\n\r\n                if (typeof config.dataSource === 'string') {\r\n                    var ds = config.dataSource;\r\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\r\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\r\n                    }\r\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\r\n                    if (!defStoreConfig.tableName)\r\n                        defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\r\n\r\n                    var provider = config.provider || config.name;\r\n                    switch (provider) {\r\n                        case 'oData':\r\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\r\n                            break;\r\n                        case 'webApi':\r\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n\r\n            } else {\r\n                config = { name: 'local' };\r\n            }\r\n\r\n            defStoreConfig.initParam = config;\r\n            self._setTypeStoreConfig(type, name, defStoreConfig);\r\n\r\n            return type;\r\n        }\r\n    },\r\n    _setTypeStoreConfig: function(type, name, config){\r\n        if (!type.storeConfigs) {\r\n            type.storeConfigs = {\r\n                stores: {}\r\n            };\r\n        }\r\n        type.storeConfigs.stores[name] = config;\r\n        if (name === 'default') {\r\n            type.storeConfigs['default'] = name;\r\n        }\r\n    },\r\n\r\n    _findByIdQueryable: function (set, keys) {\r\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\r\n        if (keysProps.length > 1 && keys && 'object' === typeof keys) {\r\n            var predicate = \"\", thisArgs = {};\r\n            for (var i = 0; i < keysProps.length; i++) {\r\n                if (i > 0) predicate += \" && \";\r\n\r\n                var key = keysProps[i];\r\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\r\n                thisArgs[key.name] = keys[key.name];\r\n            }\r\n\r\n            return {\r\n                predicate: predicate,\r\n                thisArgs: thisArgs\r\n            };\r\n        } else if (keysProps.length === 1) {\r\n            return {\r\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\r\n                thisArgs: { value: keys }\r\n            };\r\n        } else {\r\n            throw 'invalid keys';\r\n        }\r\n    },\r\n    _getKeyObjectFromEntity: function (obj, entityType) {\r\n        var key;\r\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\r\n        if (keyDefs.length === 1)\r\n            key = obj && typeof obj === 'object' ? obj[keyDefs[0].name] : obj;\r\n        else {\r\n            key = {};\r\n\r\n            for (var i = 0; i < keyDefs.length; i++) {\r\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\r\n            }\r\n        }\r\n\r\n        return key;\r\n    },\r\n    _getSaveMode: function (entity, entitySet, hint, storeAlias) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n        var entityType = entity.getType();\r\n\r\n        switch (true) {\r\n            case hint === 'update':\r\n                callback.success('attach'); break;\r\n            case hint === 'new':\r\n                callback.success('add'); break;\r\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) { return entity[keyDef.name]; }):\r\n                callback.success('add'); break;\r\n            case !!entity.storeToken:\r\n                callback.success('attach'); break;\r\n                break;\r\n            default:\r\n                //use the current entity store informations\r\n                storeAlias = this._getStoreAlias(entity, storeAlias);\r\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias)\r\n                    .then(function () { callback.success('attach'); }, function () { callback.success('add'); });\r\n                break;\r\n        }\r\n\r\n        return promise.getPromise();\r\n    },\r\n\r\n    //EntityContext\r\n    ContextRegister: function (storageProviderCfg) {\r\n        //context instance\r\n        var self = this;\r\n        if (typeof storageProviderCfg.name === \"string\") {\r\n            storageProviderCfg.name = [storageProviderCfg.name];\r\n        }\r\n\r\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\r\n        this.storeToken = {\r\n            typeName: this.getType().fullName,\r\n            args: args,\r\n            factory: function () {\r\n                return new (self.getType())(args);\r\n            }\r\n        }\r\n\r\n        //set elementType storetoken\r\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < members.length; i++) {\r\n            var item = members[i];\r\n            if (item.type) {\r\n                var itemResolvedDataType = Container.resolveType(item.type);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    if (!elementType.storeToken) {\r\n                        elementType.storeToken = this.storeToken;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    QueryResultModifier: function (query) {\r\n        var self = $data.ItemStore;\r\n        var context = query.context;\r\n        var type = query.modelBinderConfig.$type;\r\n        if ('string' === typeof type) {\r\n            type = Container.resolveType(type);\r\n        }\r\n\r\n        if (type === $data.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\r\n            type = query.modelBinderConfig.$item.$type;\r\n        }\r\n\r\n        //TODO: runs when model binding missed (inmemory)\r\n        if ((typeof type === 'undefined' && query.result && query.result[0] instanceof $data.Entity)) {\r\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\r\n                return !!memDef.inverseProperty;\r\n            });\r\n\r\n            for (var i = 0; i < query.result.length; i++) {\r\n                self._setStoreAlias(query.result[i], context.storeToken);\r\n\r\n                for (var j = 0; j < navProps.length; j++) {\r\n                    var navProp = navProps[j];\r\n                    if (query.result[i][navProp.name] instanceof $data.Entity) {\r\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\r\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\r\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\r\n                            if (query.result[i][navProp.name][k] instanceof $data.Entity) {\r\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n$data.ItemStore = new $data.ItemStoreClass();\r\n\r\n$data.Entity.addMember('field', function (propName) {\r\n    var def = this.memberDefinitions.getMember(propName);\r\n    if (def) {\r\n        if (def.definedBy === this) {\r\n            return new $data.MemberWrapper(def);\r\n        } else {\r\n            Guard.raise(new Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\r\n        }\r\n    } else {\r\n        Guard.raise(new Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\r\n    }\r\n\r\n    return this;\r\n}, true);\r\n\r\n\r\n$data.Class.define('$data.MemberWrapper', null, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n    },\r\n    setKey: function (value) {\r\n        this.memberDefinition.key = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setComputed: function (value) {\r\n        this.memberDefinition.computed = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setRequired: function (value) {\r\n        this.memberDefinition.required = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setNullable: function (value) {\r\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    changeDefinition: function (attr, value) {\r\n        this.memberDefinition[attr] = value;\r\n        return this;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ModelBinder', null, null, {\r\n\r\n    constructor: function (context) {\r\n        this.context = context;\r\n        this.providerName = null;\r\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\r\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\r\n            this.providerName = this.context.storageProvider.providerName;\r\n            if (!this.providerName) {\r\n                for (var i in $data.RegisteredStorageProviders) {\r\n                    if ($data.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\r\n                        this.providerName = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    _deepExtend: function (o, r) {\r\n        if (o === null || o === undefined) {\r\n            return r;\r\n        }\r\n        for (var i in r) {\r\n            if (o.hasOwnProperty(i)) {\r\n                if (typeof r[i] === 'object') {\r\n                    if (Array.isArray(r[i])) {\r\n                        for (var j = 0; j < r[i].length; j++) {\r\n                            if (o[i].indexOf(r[i][j]) < 0) {\r\n                                o[i].push(r[i][j]);\r\n                            }\r\n                        }\r\n                    } else this._deepExtend(o[i], r[i]);\r\n                }\r\n            } else {\r\n                o[i] = r[i];\r\n            }\r\n        }\r\n        return this._finalize(o);\r\n    },\r\n\r\n    _finalize: function(o){\r\n        if (o instanceof $data.Entity) {\r\n            o.changedProperties = undefined;\r\n            o.storeToken = this.context.storeToken;\r\n        }\r\n        return o;\r\n    },\r\n\r\n    _buildSelector: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) {\r\n                meta.$selector = [meta.$selector];\r\n            }\r\n\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                var selector = meta.$selector[i].replace('json:', '');\r\n                context.src += 'if(';\r\n                var path = selector.split('.');\r\n                for (var j = 0; j < path.length; j++) {\r\n                    context.src += 'di[\"' + path.slice(0, j + 1).join('\"][\"') + '\"]' + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\r\n                }\r\n                context.src += '){di = di[\"' + path.join('\"][\"') + '\"];}' + (i < meta.$selector.length - 1 ? 'else ' : '');\r\n            }\r\n\r\n            context.src += 'if (di === null){';\r\n            if (context.iter) context.src += context.iter + ' = null;';\r\n            context.src += 'return null;';\r\n            context.src += '}';\r\n        }\r\n    },\r\n\r\n    _buildKey: function (name, type, keys, context, data) {\r\n        if (keys) {\r\n            var type = Container.resolveType(type);\r\n            var typeIndex = Container.getIndex(type);\r\n            type = type.fullName || type.name;\r\n            context.src += 'var ' + name + 'Fn = function(di){';\r\n            if (!(Array.isArray(keys)) || keys.length == 1) {\r\n                if (typeof keys !== 'string') keys = keys[0];\r\n                context.src += 'if (typeof di[\"' + keys + '\"] === \"undefined\") return undefined;';\r\n                context.src += 'if (di[\"' + keys + '\"] === null) return null;';\r\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di[\"' + keys + '\"]);';\r\n            } else {\r\n                context.src += 'var key = \"\";';\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var id = typeof keys[i] !== 'object' ? keys[i] : keys[i].$source;\r\n                    context.src += 'if (typeof di[\"' + id + '\"] === \"undefined\") return undefined;';\r\n                    context.src += 'if (di[\"' + id + '\"] === null) return null;';\r\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di[\"' + id + '\"]);';\r\n                }\r\n            }\r\n\r\n            context.src += 'return key;};';\r\n        }\r\n\r\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\r\n    },\r\n\r\n    build: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) meta.$selector = [meta.$selector];\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\r\n            }\r\n        }\r\n\r\n        if (meta.$value) {\r\n            if (typeof meta.$value === 'function') {\r\n                context.src += 'var di = di || data;';\r\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\r\n                if (meta.$type) {\r\n                    var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                    var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                    if (converter) {\r\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\r\n                    } else {\r\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\r\n                    }\r\n                } else context.item = 'fn()';\r\n            } else if (meta.$type) {\r\n                var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\r\n                } else {\r\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\r\n                }\r\n            } else context.item = meta.$value;\r\n        } else if (meta.$source) {\r\n            var type = Container.resolveName(Container.resolveType(meta.$type));\r\n            var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (!context.forEach) context.src += 'var di = data;';\r\n            context.item = item;\r\n            this._buildSelector(meta, context);\r\n            if (converter) {\r\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta.$source + '\"]);';\r\n            } else {\r\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta.$source + '\"]);';\r\n            }\r\n        } else if (meta.$item) {\r\n            context.meta.push('$item');\r\n            var iter = (context.item && context.current ? context.item + '.' + context.current : (context.item ? context.item : 'result'));\r\n            context.iter = iter;\r\n            if (iter.indexOf('.') < 0) context.src += 'var ' + iter + ';';\r\n            context.src += 'var fn = function(di){';\r\n            if (meta.$selector) {\r\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\r\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\r\n            if (this.references && meta.$item.$keys) {\r\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\r\n                context.src += 'var ' + keycacheName + ';';\r\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\r\n                context.src += 'if (kci < 0){';\r\n                context.src += keycacheName + ' = [];';\r\n                context.src += 'keycache.push(' + keycacheName + ');';\r\n                context.src += 'keycacheIter.push(' + iter + ');';\r\n                context.src += '}else{';\r\n                context.src += keycacheName + ' = keycache[kci];';\r\n                context.src += '}';\r\n            }\r\n            context.iter = undefined;\r\n            context.forEach = true;\r\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\r\n            context.src += 'var forEachFn = function(di, i){';\r\n            context.src += 'var diBackup = di;';\r\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\r\n            var item = context.item || 'iter';\r\n            context.item = item;\r\n            if (!meta.$item.$source) {\r\n                this._buildSelector(meta.$item, context);\r\n            }\r\n            this.build(meta.$item, context);\r\n            if (this.references && meta.$keys) {\r\n                context.src += 'if (forKey){';\r\n                context.src += 'if (cache[forKey]){';\r\n                context.src += iter + ' = cache[forKey];';\r\n                context.src += 'if (' + iter + '.indexOf(' + (context.item || item) + ') < 0){';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                context.src += 'cache[forKey] = ' + iter + ';';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\r\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\r\n                context.src += '}';\r\n                context.src += '}else{';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}';\r\n                context.src += '}';\r\n                context.src += '}';\r\n            } else {\r\n                if (this.references && meta.$item.$keys) {\r\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\r\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\r\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');'\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += '}';\r\n                } else {\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                }\r\n            }\r\n            context.src += '};';\r\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\r\n            context.src += 'else forEachFn(di, 0);';\r\n            context.forEach = false;\r\n            context.item = null;\r\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);'\r\n            context.meta.pop();\r\n        } else if (meta.$type) {\r\n            if (!context.forEach) {\r\n                context.src += 'if (typeof di === \"undefined\"){';\r\n                context.src += 'var di = data;';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            var resolvedType = Container.resolveType(meta.$type);\r\n            var type = Container.resolveName(resolvedType);\r\n            var typeIndex = Container.getIndex(resolvedType);\r\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo($data.Entity);\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (context.item == item) item += 'new_';\r\n            context.item = item;\r\n\r\n\r\n            var isPrimitive = false;\r\n            if (!meta.$source && !meta.$value && resolvedType !== $data.Array && resolvedType !== $data.Object && !resolvedType.isAssignableTo)\r\n                isPrimitive = true;\r\n            if (resolvedType === $data.Object || resolvedType === $data.Array) {\r\n                var keys = Object.keys(meta);\r\n                if (keys.length == 1 || (keys.length == 2 && meta.$selector)) isPrimitive = true;\r\n            }\r\n\r\n            if (isPrimitive) {\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\r\n                } else {\r\n                    context.src += 'var ' + item + ' = di;';\r\n                }\r\n            } else {\r\n                if (this.references && meta.$keys) {\r\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\r\n                    context.src += 'if (itemKey === null) return null;';\r\n                    context.src += 'var ' + item + ';';\r\n                    context.src += 'if (itemKey && cache[itemKey]){';\r\n                    context.src += item + ' = cache[itemKey];';\r\n                    context.src += '}else{';\r\n                    if (isEntityType) {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                    context.src += 'if (itemKey){';\r\n                    context.src += 'cache[itemKey] = ' + item + ';';\r\n                    context.src += '}';\r\n                    context.src += '}';\r\n                } else {\r\n                    if (isEntityType) {\r\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                }\r\n            }\r\n            var openTypeProperty = null;\r\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType){\r\n                openTypeProperty = (resolvedType.openType === true ? $data.defaults.openTypeDefaultPropertyName : resolvedType.openType);\r\n                context.src += item + '.' + openTypeProperty + ' = {};';\r\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function(prop){\r\n                    return '\"' + prop + '\"';\r\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\r\n            }\r\n            for (var i in meta) {\r\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\r\n                    context.current = i;\r\n                    if (!meta[i].$item) {\r\n                        if (meta[i].$value) {\r\n                            context.meta.push(i);\r\n                            var item = context.item;\r\n                            this.build(meta[i], context);\r\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta[i].$source) {\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            if (meta[i].$type) {\r\n                                var type = Container.resolveName(Container.resolveType(meta[i].$type));\r\n                                var typeIndex = Container.getIndex(Container.resolveType(meta[i].$type));\r\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                                if (converter) {\r\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i].$source + '\"]);';\r\n                                } else {\r\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i].$source + '\"]);';\r\n                                }\r\n                            } else {\r\n                                context.src += item + '.' + i + ' = di[\"' + meta[i].$source + '\"];';\r\n                            }\r\n                            context.src += '};';\r\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';\r\n                            else context.src += 'fn(di);';\r\n                        } else if (meta[i].$type) {\r\n                            context.meta.push(i);\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            this.build(meta[i], context);\r\n                            context.src += 'return ' + context.item + ';};';\r\n                            if (meta[i].$type === $data.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';\r\n                            else context.src += item + '.' + i + ' = fn(di);';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta.$type) {\r\n                            var memDef = Container.resolveType(meta.$type).memberDefinitions.getMember(i);\r\n                            var type = Container.resolveName(memDef.type);\r\n                            var entityType = Container.resolveType(meta.$type);\r\n                            var entityTypeIndex = Container.getIndex(meta.$type);\r\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\r\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di[\"' + meta[i] + '\"], Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\r\n                            } else if (converter) {\r\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i] + '\"]);';\r\n                            } else {\r\n                                var typeIndex = Container.getIndex(Container.resolveType(type.memberDefinitions.getMember(i).type));\r\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i] + '\"]);';\r\n                            }\r\n                        }\r\n                    } else {\r\n                        context.meta.push(i);\r\n                        this.build(meta[i], context);\r\n                        context.item = item;\r\n                        context.meta.pop();\r\n                    }\r\n                }\r\n            }\r\n            context.src += item + ' = self._finalize(' + item + ');';\r\n        }\r\n    },\r\n\r\n    call: function (data, meta) {\r\n        if (!Object.getOwnPropertyNames(meta).length) {\r\n            return data;\r\n        }\r\n        var context = {\r\n            src: '',\r\n            meta: []\r\n        };\r\n        context.src += 'var self = this;';\r\n        context.src += 'var result;';\r\n        context.src += 'var cache = {};';\r\n        context.src += 'var keycache = [];';\r\n        context.src += 'var keycacheIter = [];';\r\n        this.build(meta, context);\r\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\r\n        context.src += 'return result;';\r\n\r\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\r\n        var ret = fn(meta, data, Container);\r\n        return ret;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollector', $data.Notifications.ChangeCollectorBase, null, {\r\n    buildData: function (entities) {\r\n        var result = [];\r\n        entities.forEach(function (element) {\r\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\r\n            var enumerableMemDefCollection = [];\r\n\r\n            switch (element.data.entityState) {\r\n                case $data.EntityState.Added:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    enumerableMemDefCollection = element.data.changedProperties;\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            enumerableMemDefCollection.forEach(function (memDef) {\r\n                resObj[memDef.name] = element.data[memDef.name];\r\n            });\r\n\r\n            result.push(resObj);\r\n        });\r\n\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\r\n    buildData: function (entityContextData) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    processChangedData: function (entityData) {\r\n        if (this.Distrbutor && this.Distrbutor.distributeData)\r\n            this.Distrbutor.distributeData(this.buildData(entityData));\r\n    },\r\n    Distrbutor: { enumerable: false, dataType: $data.Notifications.ChangeDistributorBase, storeOnObject: true }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributor', $data.Notifications.ChangeDistributorBase, null, {\r\n    constructor: function (broadcastUrl) {\r\n        this.broadcastUrl = broadcastUrl;\r\n    },\r\n    distributeData: function (data) {\r\n        $data.ajax({\r\n            url: this.broadcastUrl,\r\n            type: \"POST\",\r\n            data: 'data=' + JSON.stringify(data),\r\n            succes: this.success,\r\n            error: this.error\r\n        });\r\n    },\r\n    broadcastUrl: { dataType: \"string\" },\r\n    success: function () { },\r\n    error: function () { }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\r\n    distributeData: function (collectorData) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.Query', null, null,\r\n{\r\n    constructor: function (expression, defaultType, context) {\r\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\r\n\r\n        this.expression = expression;\r\n        this.context = context;\r\n\r\n        //TODO: expressions get as JSON string?!\r\n\r\n        this.expressions = expression;\r\n        this.defaultType = defaultType;\r\n        this.result = [];\r\n        this.rawDataList = [];\r\n        this.modelBinderConfig = {};\r\n        this.context = context;\r\n    },\r\n\r\n    rawDataList: { dataType: \"Array\" },\r\n    result: { dataType: \"Array\" },\r\n    resultType: {},\r\n    buildResultSet: function (ctx) {\r\n        var converter = new $data.ModelBinder(this.context);\r\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\r\n        return;\r\n    },\r\n    getEntitySets: function(){\r\n        var ret = [];\r\n        var ctx = this.context;\r\n\r\n        var fn = function(expression){\r\n            if (expression instanceof $data.Expressions.EntitySetExpression){\r\n                if (ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0)\r\n                    ret.push(ctx._entitySetReferences[expression.elementType.name]);\r\n            }\r\n            if (expression.source) fn(expression.source);\r\n            if (expression.members) {\r\n                for (var i = 0; i < expression.members.length; i++) {\r\n                    fn(expression.members[i].expression);\r\n                }\r\n            }\r\n        };\r\n\r\n        fn(this.expression);\r\n\r\n        return ret;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.queryBuilder', null, null, {\r\n    constructor: function () {\r\n        this._fragments = {};\r\n        this.selectedFragment = null;\r\n        this._binderConfig = {};\r\n        this.modelBinderConfig = this._binderConfig;\r\n        this._binderConfigPropertyStack = [];\r\n    },\r\n    selectTextPart: function (name) {\r\n        if (!this._fragments[name]) {\r\n            this._fragments[name] = { text: '', params: [] };\r\n        }\r\n        this.selectedFragment = this._fragments[name];\r\n    },\r\n    getTextPart: function (name) {\r\n        return this._fragments[name];\r\n    },\r\n    addText: function (textParticle) {\r\n        this.selectedFragment.text += textParticle;\r\n    },\r\n    addParameter: function (param) {\r\n        this.selectedFragment.params.push(param);\r\n    },\r\n    selectModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\r\n        if (!(name in this.modelBinderConfig)) {\r\n            this.modelBinderConfig[name] = {};\r\n        }\r\n        this.modelBinderConfig = this.modelBinderConfig[name];\r\n    },\r\n    popModelBinderProperty: function () {\r\n        if (this._binderConfigPropertyStack.length === 0) {\r\n            this.modelBinderConfig = this._binderConfig();\r\n        } else {\r\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\r\n        }\r\n    },\r\n    resetModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack = [];\r\n        this.modelBinderConfig = this._binderConfig;\r\n    },\r\n    addKeyField: function (name) {\r\n        if(!this.modelBinderConfig['$keys']){\r\n            this.modelBinderConfig['$keys'] = new Array();\r\n        }\r\n        this.modelBinderConfig['$keys'].push(name);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.QueryProvider', null, null,\r\n{\r\n    //TODO: instance member?????\r\n    constructor: function () { this.requiresExpressions= false },\r\n    executeQuery: function (queryable, resultHandler) {\r\n    },\r\n    getTraceString: function (queryable) {\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Queryable', null, null,\r\n{\r\n    constructor: function (source, rootExpression) {\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n\r\n        var context = source instanceof $data.EntityContext ? source : source.entityContext;\r\n        this.defaultType = source instanceof $data.EntityContext ? null : source.defaultType;\r\n        this.entityContext = context;\r\n        this.expression = rootExpression;\r\n    },\r\n\r\n    filter: function (predicate, thisArg) {\r\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\r\n        ///<param name=\"predicate\" type=\"string\">\r\n        ///The expression body of the predicate function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: filter(\"it.Title == 'Hello'\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function and parameters&#10;\r\n        ///var draftables = Persons.filter( function( person ) {\r\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\r\n        /// }, { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\r\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\r\n        /// { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///</signature>\r\n        if (arguments.length === 3) {\r\n            predicate = \"it.\" + arguments[0] +\r\n                (arguments[1][0] === \".\" ? (arguments[1] + \"(param)\") : (\" \" + arguments[1] + \" param\"));\r\n            thisArg = { param : arguments[2] }\r\n        }\r\n        this._checkOperation('filter');\r\n        var expression = Container.createCodeExpression(predicate, thisArg);\r\n        var expressionSource = this.expression;\r\n        if (this.expression instanceof $data.Expressions.FilterExpression) {\r\n            expressionSource = this.expression.source;\r\n\r\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\r\n            expression = Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\r\n        }\r\n        var exp = Container.createFilterExpression(expressionSource, expression);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    where: function (predicate, params) {\r\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.filter(predicate, params);\r\n    },\r\n\r\n    map: function (projection, thisArg, mappedTo) {\r\n\t\t///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\r\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"string\">\r\n        ///\t\t\tThe expression body of the projection function in string. &#10;\r\n\t\t///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\r\n\t\t///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"Function\">\r\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///\t\t\tContains the projection parameters.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\r\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\r\n        ///\t\t\tvar custom = Persons.map( function( person ) {\r\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('map');\r\n        var codeExpression = Container.createCodeExpression(projection, thisArg);\r\n        var exp = Container.createProjectionExpression(this.expression, codeExpression);\r\n\r\n        if (mappedTo === 'default')\r\n            exp.projectionAs = this.defaultType;\r\n        else if (mappedTo)\r\n            exp.projectionAs = Container.resolveType(mappedTo);\r\n        else\r\n            exp.projectionAs = $data.Object;\r\n\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    select: function (projection, thisArg, mappedTo) {\r\n\t\t///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.map(projection, thisArg, mappedTo);\r\n    },\r\n\r\n    length: function (onResult, transaction) {\r\n\t\t///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet the count of Person entities. &#10;\r\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('length');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var countExpression = Container.createCountExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(countExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\tcount: function (onResult, transaction) {\r\n\t\t///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\r\n\t\t///<returns type=\"$data.Integer\" />\r\n\t    return this.length(onResult, transaction);\r\n    },\r\n\r\n\tforEach: function (iterator, transaction) {\r\n\t\t///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t\t<param name=\"iterator\" type=\"Function\">\r\n        ///\t\t\tIterator function to handle the result elements.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('forEach');\r\n        var pHandler = new $data.PromiseHandler();\r\n        function iteratorFunc(items) { items.forEach(iterator); }\r\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\r\n\r\n        var forEachExpression = Container.createForEachExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(forEachExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\ttoArray: function (onResult_items, transaction) {\r\n\t\t///\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet all Person entities. &#10;\r\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        if (onResult_items instanceof $data.Array)\r\n        {\r\n            return this.toArray(function (results) {\r\n                onResult_items.length = 0;\r\n                results.forEach(function (item, idx) {\r\n                    onResult_items.push(item);\r\n                });\r\n            });\r\n        }\r\n\r\n        this._checkOperation('toArray');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var toArrayExpression = Container.createToArrayExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(toArrayExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n\t},\r\n\ttoLiveArray: function (onResult, transaction) {\r\n\t    var self = this;\r\n\t    var result = [];\r\n\r\n\t    var doAction = function (action) {\r\n\t        return function (onResult) {\r\n\t            var pHandler = new $data.PromiseHandler();\r\n\t            var callback = pHandler.createCallback(onResult);\r\n\r\n\t            var successFunc = function (res) {\r\n\t                result.length = 0;\r\n\r\n\t                var data = res;\r\n\t                $data.typeSystem.extend(result, data);\r\n\r\n\t                result.prev = doAction(function (cb) {\r\n\t                    data.prev(cb);\r\n\t                });\r\n\t                result.next = doAction(function (cb) {\r\n\t                    data.next(cb);\r\n\t                });\r\n\r\n\t                callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\r\n\t            }\r\n\r\n\t            action({\r\n\t                success: successFunc,\r\n\t                error: callback.error\r\n\t            }, transaction);\r\n\r\n\t            var promise = pHandler.getPromise();\r\n\t            $data.typeSystem.extend(result, promise);\r\n\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    result.refresh = doAction(function (cb) {\r\n\t        self.toArray(cb);\r\n\t    });\r\n\r\n\t    return result.refresh.apply(result, arguments);\r\n\t},\r\n\r\n\tsingle: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n\t\t///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n\t\t///\t\t\t\terror: function () { ... }\r\n\t\t///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('single');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(2);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var singleExpression = Container.createSingleExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(singleExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tsome: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///         Is there any person who's first name is \"George\"? &#10;\r\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('some');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var someExpression = Container.createSomeExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(someExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tevery: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tResult is true when all person are married. &#10;\r\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('every');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var everyExpression = Container.createEveryExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(everyExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    take: function (amount) {\r\n\t\t///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('take');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Take);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    skip: function (amount) {\r\n\t\t///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('skip');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n\r\n    order: function(selector) {\r\n       if (selector === '' || selector === undefined || selector === null) {\r\n           return this;\r\n       }\r\n       if(selector[0] === \"-\") {\r\n           var orderString = \"it.\" + selector.replace(\"-\",\"\");\r\n           return this.orderByDescending(orderString);\r\n       } else {\r\n           return this.orderBy(\"it.\" + selector);\r\n       }\r\n\r\n    },\r\n\r\n    orderBy: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderBy');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderBy);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    orderByDescending: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderByDescending');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderByDescending);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n\r\n    first: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('first');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var firstExpression = Container.createFirstExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(firstExpression);\r\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    find: function (keyValue, onResult, transaction) {\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\r\n\r\n        try {\r\n\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n\r\n\r\n                var parameters = [];\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var keyProp = keys[i];\r\n                    if (!(keyProp.name in keyValue)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n\r\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\r\n                if (operation) {\r\n\r\n                    var findExpression = Container.createFindExpression(this.expression, parameters);\r\n                    var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n                    try {\r\n                        var expression = preparator.Visit(findExpression);\r\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                        this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                } else {\r\n                    var predicate = '';\r\n                    var params = {}\r\n                    for (var i = 0; i < parameters.length; i++) {\r\n                        var param = parameters[i];\r\n                        params[param.name] = param.value;\r\n                        if (i > 0) predicate += ' && ';\r\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\r\n                    }\r\n\r\n                    this.single(predicate, params, cbWrapper, transaction);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    include: function (selector) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n        \r\n        if(this.entityContext && this.entityContext.storageProvider && this.entityContext.storageProvider.name === \"oData\"){\r\n            return this.include2.apply(this, arguments);\r\n        }\r\n\r\n        this._checkOperation('include');\r\n        var constExp = Container.createConstantExpression(selector, \"string\");\r\n        var takeExp = Container.createIncludeExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    include2: function (selector, thisArg) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('include');\r\n        if(typeof selector === 'string' && (selector.length < 3 || selector.substr(0, 3) !== 'it.') && !/^[^\\.]*(=>)/.test(selector)){\r\n            selector = 'it.' + selector;\r\n        }\r\n        var expression = Container.createCodeExpression(selector, thisArg);\r\n        var includeExp = Container.createIncludeExpression(this.expression, expression);\r\n        \r\n        return Container.createQueryable(this, includeExp);\r\n    },\r\n\r\n    withInlineCount: function (selector) {\r\n        this._checkOperation('withInlineCount');\r\n        var constExp = Container.createConstantExpression(selector || 'allpages', \"string\");\r\n        var inlineCountExp = Container.createInlineCountExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, inlineCountExp);\r\n    },\r\n    withCount: function (selector) {\r\n        return this.withInlineCount(selector);\r\n    },\r\n\r\n    removeAll: function (onResult, transaction) {\r\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\r\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('batchDelete');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var batchDeleteExpression = Container.createBatchDeleteExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(batchDeleteExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    _runQuery: function (onResult_items, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(this.expression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    toTraceString: function (name) {\r\n\t\t///\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\r\n        ///\t<returns type=\"$data.String\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t\t<param name=\"name\" type=\"$data.String\">\r\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.String\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tGet the trace string for Articles.toArray() &#10;\r\n        ///\t\t\tArticles.toTraceString();\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        var expression = this.expression;\r\n\r\n        if (name) {\r\n            expression = Container['create' + name + 'Expression'](expression);\r\n        } else {\r\n            expression = Container.createToArrayExpression(expression);\r\n        }\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        expression = preparator.Visit(expression);\r\n\r\n        //this.expression = expression;\r\n        var q = Container.createQueryable(this, expression)\r\n        return q.entityContext.getTraceString(q);\r\n    },\r\n\r\n    _checkOperation: function (name) {\r\n        var operation = this.entityContext.resolveSetOperations(name);\r\n        if (operation.invokable != undefined && !operation.invokable)\r\n            Guard.raise(new Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\r\n    },\r\n    defaultType: {}\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.RelatedEntityProxy\", null, null, {\r\n    constructor: function (entityKeyObject, navigationProperty, type, parent, context) {\r\n        this._entityKeyObject = entityKeyObject;\r\n        this._navigationProperty = navigationProperty;\r\n        this._type = type;\r\n        this._parent = parent;\r\n        this._context = context;\r\n    },\r\n    _entityKeyObject: { type: $data.Object },\r\n    _ctxFactory: {},\r\n    _type: {},\r\n    _navigationProperty: { type: $data.String },\r\n    _parent: { type: '$data.RelatedEntityProxy' },\r\n    _context: { type: '$data.EntityContext' },\r\n    \r\n    read: function (onResult) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n        \r\n        try {\r\n            var proxyChains = this._chainToArray();\r\n            var firstProxy = proxyChains[0];\r\n            var context = firstProxy._context;\r\n            if (!context) {\r\n                var storeToken = firstProxy._parent instanceof $data.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    context = storeToken.factory();\r\n                }\r\n            }\r\n            \r\n            if (!context) throw new Exception('ContextNotExists');\r\n            \r\n            \r\n            var entitySet = null;\r\n            var expression = null;\r\n            if (firstProxy._parent instanceof $data.Entity) {\r\n                entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\r\n                \r\n                var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\r\n                proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\r\n            } else {\r\n                entitySet = context.getEntitySetFromElementType(firstProxy._type);\r\n            }\r\n            \r\n            expression = entitySet.expression;\r\n            var returnType = null;\r\n            \r\n            for (var i = 0; i < proxyChains.length; i++) {\r\n                var item = proxyChains[i];\r\n                var keys = item._type.memberDefinitions.getKeyProperties();\r\n                \r\n                var parameters = [];\r\n                for (var j = 0; j < keys.length; j++) {\r\n                    var keyProp = keys[j];\r\n                    if (!(keyProp.name in item._entityKeyObject)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n                \r\n                \r\n                var member = undefined;\r\n                if (item._navigationProperty) {\r\n                    member = Container.createMemberInfoExpression(item._navigationProperty)\r\n                    returnType = item._navigationProperty.elementType;\r\n                }\r\n                expression = Container.createFindExpression(expression, parameters, member);\r\n            }\r\n            \r\n            var preparator = Container.createQueryExpressionCreator(context);\r\n            expression = preparator.Visit(expression);\r\n            //context.log({ event: \"EntityExpression\", data: expression });\r\n            \r\n            var queryable = Container.createQueryable(entitySet , expression);\r\n            queryable.defaultType = returnType || queryable.defaultType;\r\n            context.executeQuery(queryable, cbWrapper);\r\n\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n        \r\n        return pHandler.getPromise();\r\n    },\r\n    _chainToArray: function (result) {\r\n        result = result || [];\r\n        if (this._parent instanceof $data.RelatedEntityProxy) {\r\n            this._parent._chainToArray(result);\r\n        }\r\n        \r\n        result.push(this);\r\n        return result;\r\n    }\r\n}, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ServiceOperation', null, null, {}, {\r\n    translateDefinition: function (propertyDef, name, definedBy) {\r\n        propertyDef.serviceName = name;\r\n        var memDef = new $data.MemberDefinition(this.generateServiceOperation(propertyDef), this);\r\n        memDef.name = name;\r\n        return memDef;\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n                var memberdef;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity || this instanceof $data.EntitySet) {\r\n                    var entitySet;\r\n                    if (this instanceof $data.Entity) {\r\n                        if (this.context) {\r\n                            context = this.context;\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\r\n                            context = this.storeToken.factory();\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else {\r\n                            Guard.raise(new Exception(\"entity can't resolve context\", 'Not Found!', this));\r\n                            return;\r\n                        }\r\n                    } else if (this instanceof $data.EntitySet) {\r\n                        context = this.entityContext;\r\n                        entitySet = this;\r\n\r\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\r\n                        memberdef = $data.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\r\n                    }\r\n\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: entitySet\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    //object as parameter\r\n                    //FIX: object type parameters with the same property name as the name of the first parameter\r\n                    if (arguments[0] && typeof arguments[0] === 'object' && arguments[0].constructor === $data.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\r\n                        var argObj = arguments[0];\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\r\n                                paramConstExpression.push(Container.createConstantExpression(argObj[paramConfig.name], Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\r\n                            }\r\n                        }\r\n                    }\r\n                    //arg params\r\n                    else {\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            if (typeof arguments[i] == 'function') break;\r\n\r\n                            //TODO: check params type\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\r\n                                paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                if (!memberdef) {\r\n                    if (boundItem && boundItem.data) {\r\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\r\n                    } else {\r\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\r\n                    }\r\n                }\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (!(typeof clb === 'function' || (typeof clb === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function')))) {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = cfg.params || [];\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceAction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'POST'; //default Action method is POST\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceFunction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'GET'; //default Function method is GET\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.storageProviders = {\r\n    DbCreationType: {\r\n        Merge: 10,\r\n        DropTableIfChanged: 20,\r\n        DropTableIfChange: 20,\r\n        DropAllExistingTables: 30,\r\n        ErrorIfChange: 40,\r\n        DropDbIfChange: 50\r\n    }\r\n}\r\n\r\n$data.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\r\n$data.Class.define('$data.StorageProviderBase', null, null,\r\n{\r\n    constructor: function (schemaConfiguration, context) {\r\n        this.providerConfiguration = schemaConfiguration || {};\r\n\r\n        this.name = this.getType().name;\r\n        if ($data.RegisteredStorageProviders) {\r\n            var keys = Object.keys($data.RegisteredStorageProviders);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                if (this instanceof $data.RegisteredStorageProviders[keys[i]]) {\r\n                    this.name = keys[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    providers: {},\r\n    supportedDataTypes: { value: [], writable: false },\r\n    initializeStore: function (callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n\r\n    executeQuery: function (queryable, callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    loadRawData: function (tableName, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        callBack.error(new Exception('loadRawData is not supported', 'Invalid Operation'));\r\n    },\r\n\r\n    buildIndependentBlocks: function (changedItems) {\r\n        /// <summary>\r\n        /// Build and processes a dependency graph from the changed items,\r\n        /// and generates blocks that can be inserted to the database sequentially.\r\n        /// </summary>\r\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\r\n        var edgesTo = [];\r\n        var edgesFrom = [];\r\n\r\n        function hasOwnProperty(obj) {\r\n            /// <summary>\r\n            /// Returns true if object has own property (used for 'hashset'-like objects)\r\n            /// </summary>\r\n            /// <param name=\"obj\">Target object</param>\r\n            /// <returns>True if the object has own property</returns>\r\n            for (var p in obj) {\r\n                if (obj.hasOwnProperty(p))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\r\n        for (var i = 0; i < changedItems.length; i++) {\r\n            var current = changedItems[i];\r\n            if (!current.dependentOn || current.dependentOn.length == 0) {\r\n                // This item is independent\r\n                continue;\r\n            }\r\n\r\n            var to = null;\r\n            // Iterating over items 'current' depends on\r\n            for (var j = 0; j < current.dependentOn.length; j++) {\r\n                var currentDependency = current.dependentOn[j];\r\n                if (currentDependency.entityState == $data.EntityState.Unchanged) {\r\n                    continue;\r\n                }\r\n                to = to || {};\r\n                // Getting the index of current dependency\r\n                var ixDependendOn = -1;\r\n                for (var k = 0; k < changedItems.length; k++) {\r\n                    if (changedItems[k].data == currentDependency) {\r\n                        ixDependendOn = k;\r\n                        changedItems[k].referredBy = changedItems[k].referredBy || [];\r\n                        changedItems[k].referredBy.push(current.data)\r\n                        break;\r\n                    }\r\n                }\r\n                // Sanity check\r\n                if (ixDependendOn == -1) {\r\n                    Guard.raise(new Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\r\n                }\r\n                // Setting edge in 'to' array\r\n                to[ixDependendOn] = true;\r\n                // Setting edge in 'from' array\r\n                var from = edgesFrom[ixDependendOn] || {};\r\n                from[i] = true;\r\n                edgesFrom[ixDependendOn] = from;\r\n            }\r\n            // Persisting found edges in edgesTo array\r\n            if (to !== null)\r\n                edgesTo[i] = to;\r\n        }\r\n\r\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\r\n        var independentBlocks = [];\r\n        // Objects getting their dependency resolved in the current cycle.\r\n        var currentBlock = [];\r\n        // Filling currentBlock with initially independent objects.\r\n        for (var x = 0; x < changedItems.length; x++) {\r\n            if (!edgesTo.hasOwnProperty(x)) {\r\n                currentBlock.push(x);\r\n            }\r\n        }\r\n        while (currentBlock.length > 0) {\r\n            // Shifting currentBlock to cbix,\r\n            // and clearing currentBlock for next independent block\r\n            var cbix = [].concat(currentBlock);\r\n            currentBlock = [];\r\n            // Iterating over previous independent block, to generate the new one\r\n            for (var b = 0; b < cbix.length; b++) {\r\n                var dependentNodes = edgesFrom[cbix[b]];\r\n                if (typeof dependentNodes !== 'undefined') {\r\n                    for (var d in dependentNodes) {\r\n                        // Removing edge from 'edgesTo'\r\n                        delete edgesTo[d][cbix[b]];\r\n                        // Check if has any more dependency\r\n                        if (!hasOwnProperty(edgesTo[d])) {\r\n                            // It doesn't, so let's clean up a bit\r\n                            delete edgesTo[d];\r\n                            // and push the item to 'currentBlock'\r\n                            currentBlock.push(d);\r\n                        }\r\n                    }\r\n                }\r\n                // Clearing processed item from 'edgesFrom'\r\n                delete edgesFrom[cbix[b]];\r\n            }\r\n            // Push cbix t to independentBlocks\r\n            var cb = [];\r\n            for (var c = 0; c < cbix.length; c++) {\r\n                var item = changedItems[cbix[c]];\r\n                if (item.data.entityState != $data.EntityState.Unchanged)\r\n                    cb.push(item);\r\n            }\r\n            if (cb.length > 0)\r\n                independentBlocks.push(cb);\r\n        }\r\n        return independentBlocks;\r\n    },\r\n    getTraceString: function (queryable) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n\r\n    _buildContinuationFunction: function (context, query) {\r\n        if (Array.isArray(query.result)) {\r\n            query.result.next = this._buildPagingMethod(context, query, 'next');\r\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\r\n        }\r\n    },\r\n    _buildPagingMethod: function (context, query, mode) {\r\n        return function (onResult_items) {\r\n            var pHandler = new $data.PromiseHandler();\r\n            var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n            var continuation = new $data.Expressions.ContinuationExpressionBuilder(mode);\r\n            var continuationResult = continuation.compile(query);\r\n            if (continuationResult.expression) {\r\n                var queryable = Container.createQueryable(context, continuationResult.expression);\r\n                queryable.defaultType = query.defaultType;\r\n                context.executeQuery(queryable, cbWrapper);\r\n            } else {\r\n                cbWrapper.error(new Exception(continuationResult.message, 'Invalid Operation', continuationResult));\r\n            }\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n    },\r\n\r\n    buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) {\r\n        var buildDbType_copyPropertyDefinition = function (propertyDefinition, refProp) {\r\n            var cPropertyDef;\r\n            if (refProp) {\r\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\r\n                cPropertyDef.kind = propertyDefinition.kind;\r\n                cPropertyDef.name = propertyDefinition.name;\r\n                cPropertyDef.notMapped = false;\r\n            } else {\r\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\r\n            }\r\n\r\n            cPropertyDef.dataType = Container.resolveType(propertyDefinition.dataType);\r\n            cPropertyDef.type = cPropertyDef.dataType;\r\n            cPropertyDef.key = false;\r\n            cPropertyDef.computed = false;\r\n            return cPropertyDef;\r\n        };\r\n        var buildDbType_createConstrain = function (foreignType, dataType, propertyName, prefix, keyPropertyName) {\r\n            var constrain = new Object();\r\n            constrain[foreignType.name] = propertyName;\r\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\r\n            return constrain;\r\n        };\r\n\r\n        if (storageModel.Associations) {\r\n            storageModel.Associations.forEach(function (association) {\r\n                var addToEntityDef = false;\r\n                var foreignType = association.FromType;\r\n                var dataType = association.ToType;\r\n                var foreignPropName = association.ToPropertyName;\r\n\r\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\r\n                var keyProperties = [];\r\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\r\n                    keyProperties = [memDef.keys];\r\n                } else if (memDef && Array.isArray(memDef.keys)) {\r\n                    keyProperties = [].concat(memDef.keys);\r\n                }\r\n\r\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\r\n\r\n                if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                    foreignType = association.ToType;\r\n                    dataType = association.FromType;\r\n                    foreignPropName = association.FromPropertyName;\r\n                    addToEntityDef = true;\r\n                }\r\n\r\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) { return d.key }).forEach(function (d, i) {\r\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\r\n                    if (addToEntityDef) {\r\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n\r\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\r\n                        if (dependentMemDef) {\r\n                            dependentMemDef.isDependentProperty = true;\r\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\r\n                        }\r\n                    }\r\n                    association.ReferentialConstraint.push(constraint);\r\n                }, this);\r\n            }, this);\r\n        }\r\n        //Copy complex type properties\r\n        if (storageModel.ComplexTypes) {\r\n            storageModel.ComplexTypes.forEach(function (complexType) {\r\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\r\n\r\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\r\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\r\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\r\n                }, this);\r\n            }, this);\r\n        }\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel) {\r\n        return function (logicalEntity) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            //logicalEntity.changedProperties.forEach(function(memberDef){\r\n            //}, this);\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                if (logicalEntity[property.name] !== undefined) {\r\n                    dbInstance[property.name] = logicalEntity[property.name];\r\n                }\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                        var complexInstance = logicalEntity[association.FromPropertyName];\r\n                        if (complexInstance !== undefined) {\r\n                            association.ReferentialConstraint.forEach(function (constrain) {\r\n                                if (complexInstance !== null) {\r\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\r\n                                } else {\r\n                                    dbInstance[constrain[association.From]] = null;\r\n                                }\r\n                            }, this);\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\r\n                    if (complexInstance !== undefined) {\r\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\r\n                            if (complexInstance !== null) {\r\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\r\n                            } else {\r\n                                dbInstance[constrain[cmpType.From]] = null;\r\n                            }\r\n                        }, this);\r\n                    }\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n\r\n    bulkInsert: function (a, b, c, callback) {\r\n        callback.error(new Exception('Not Implemented'));\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\r\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\r\n            toLowerCase: { dataType: \"string\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveFieldOperation: function (operationName, expression, frameType) {\r\n        ///<summary></summary>\r\n        var result = this.supportedFieldOperations[operationName];\r\n        if (Array.isArray(result)) {\r\n            var i = 0;\r\n            for (; i < result.length; i++) {\r\n                if (result[i].allowedType === 'default' || Container.resolveType(result[i].allowedType) === Container.resolveType(expression.selector.memberDefinition.type) &&\r\n                    (frameType && result[i].allowedIn &&\r\n                        (\r\n                            (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function(type){ return frameType === Container.resolveType(type); })) ||\r\n                            (!Array.isArray(result[i].allowedIn) && (frameType === Container.resolveType(result[i].allowedIn)))\r\n                        )\r\n                    )\r\n                    ) {\r\n                    result = result[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (i === result.length) {\r\n                result = undefined;\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operationName + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operationName;\r\n        return result;\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedBinaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedUnaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            toArray: { invokable: true, allowedIn: [] }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        var result = this.supportedSetOperations[operation];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\r\n        };\r\n        var allowedIn = result.allowedIn || [];\r\n        if (frameType && allowedIn) {\r\n            if ((allowedIn instanceof Array && !allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(allowedIn instanceof Array) && frameType !== Container.resolveType(allowedIn))) {\r\n                Guard.raise(new Exception(operation + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    makePhysicalTypeDefinition: function (entityDefinition, association) {\r\n    },\r\n\r\n    _beginTran: function (tables, isWrite, callBack) {\r\n        callBack.success(new $data.Transaction());\r\n    },\r\n\r\n    getFieldUrl: function () {\r\n        return '#';\r\n    },\r\n\r\n    supportedAutoincrementKeys: {\r\n        value: { }\r\n    }\r\n},\r\n{\r\n    onRegisterProvider: { value: new $data.Event() },\r\n    registerProvider: function (name, provider) {\r\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || [];\r\n        $data.RegisteredStorageProviders[name] = provider;\r\n    },\r\n    getProvider: function (name) {\r\n        var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            console.warn(\"Provider not found: '\" + name + \"'\");\r\n        return provider;\r\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\r\n    },\r\n    isSupported: {\r\n        get: function () { return true; },\r\n        set: function () { }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.StorageProviderLoaderBase', null, null, {\r\n    isSupported: function (providerName) {\r\n        $data.Trace.log('Detecting ' + providerName + ' provider support');\r\n        var supported = true;\r\n        switch (providerName) {\r\n            case 'indexedDb':\r\n                supported = $data.__global.indexedDB || $data.__global.webkitIndexedDB || $data.__global.mozIndexedDB || ($data.__global.msIndexedDB && !(/^file:/.test($data.__global.location && $data.__global.location.href)));\r\n                break;\r\n            case 'storm':\r\n                supported = 'XMLHttpRequest' in $data.__global;\r\n                break;\r\n            case 'webSql':\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'LocalStore':\r\n                supported = 'localStorage' in $data.__global && $data.__global.localStorage ? true : false;\r\n                break;\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'mongoDB':\r\n                supported = $data.mongoDBDriver;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        $data.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\r\n        return supported;\r\n    },\r\n    scriptLoadTimeout: { type: 'int', value: 1000 },\r\n    scriptLoadInterval: { type: 'int', value: 50 },\r\n    npmModules: {\r\n        value: {\r\n            'indexedDb': 'jaydata-indexeddb',\r\n            'InMemory': 'jaydata-inmemory',\r\n            'LocalStore': 'jaydata-inmemory',\r\n            'mongoDB': 'jaydata-mongodb',\r\n            'oData': 'jaydata-odata',\r\n            'webApi': 'jaydata-webapi',\r\n            'sqLite': 'jaydata-sqlite',\r\n            'webSql': 'jaydata-sqlite',\r\n            'storm': 'jaydata-storm'\r\n        }\r\n    },\r\n    ProviderNames: {\r\n        value: {\r\n            'indexedDb': 'IndexedDb',\r\n            'InMemory': 'InMemory',\r\n            'LocalStore': 'InMemory',\r\n            'oData': 'oData',\r\n            'webApi': 'WebApi',\r\n            'sqLite': 'SqLite',\r\n            'webSql': 'SqLite',\r\n            'storm': 'Storm'\r\n        }\r\n    },\r\n    load: function (providerList, callback) {\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || {};\r\n\r\n        $data.Trace.log('Loading provider(s): ' + providerList);\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n\r\n        var self = this;\r\n        var cacheKey = providerList.join(',');\r\n        self._fallbackCache = self._fallbackCache || {};\r\n\r\n        if (self._fallbackCache[cacheKey]) {\r\n            callback.success(self._fallbackCache[cacheKey]);\r\n        } else {\r\n            this.find(providerList, {\r\n                success: function (provider, selectedProvider) {\r\n                    self._fallbackCache[cacheKey] = provider;\r\n                    callback.success.call(this, provider);\r\n                },\r\n                error: callback.error\r\n            });\r\n        }\r\n    },\r\n    find: function (providerList, callback) {\r\n        var currentProvider = providerList.shift();\r\n        var currentProvider = this.getVirtual(currentProvider);\r\n        if(Array.isArray(currentProvider)){\r\n            providerList = currentProvider;\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        while (currentProvider && !this.isSupported(currentProvider)) {\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        $data.Trace.log('First supported provider is ' + currentProvider);\r\n\r\n        if (!currentProvider){\r\n            $data.Trace.log('Provider fallback failed');\r\n            callback.error();\r\n        }\r\n\r\n        if ($data.RegisteredStorageProviders) {\r\n            $data.Trace.log('Is the ' + currentProvider + ' provider already registered?');\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback.success(provider)\r\n                return;\r\n            }else{\r\n                $data.Trace.log(currentProvider + ' provider not registered');\r\n            }\r\n        }\r\n\r\n        if (!process.browser) {\r\n            // NodeJS\r\n            $data.Trace.log('node.js detected trying to load NPM module');\r\n            this.loadNpmModule(currentProvider, providerList, callback);\r\n        } else {\r\n            $data.Trace.log('Browser detected trying to load provider');\r\n            this.loadProvider(currentProvider, providerList, callback);\r\n        }\r\n    },\r\n    loadProvider: function (currentProvider, providerList, callback) {\r\n        var self = this;\r\n        var mappedName = $data.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\r\n        $data.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\r\n        if (mappedName) {\r\n            var url = this.getUrl(mappedName);\r\n            $data.Trace.log(currentProvider + ' provider from URL: ' + url);\r\n\r\n            var loader = this.loadScript;\r\n            if (document && document.createElement) {\r\n                $data.Trace.log('document and document.createElement detected, using script element loader method');\r\n                loader = this.loadScriptElement;\r\n            }\r\n\r\n            loader.call(this, url, currentProvider, function (successful) {\r\n                var provider = $data.RegisteredStorageProviders[currentProvider];\r\n                if (successful && provider) {\r\n                    $data.Trace.log(currentProvider + ' provider successfully registered');\r\n                    callback.success(provider);\r\n                } else if (providerList.length > 0) {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\r\n                    self.find(providerList, callback);\r\n                } else {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load');\r\n                    callback.error();\r\n                }\r\n            });\r\n        }\r\n    },\r\n    getUrl: function (providerName) {\r\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\r\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\r\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';\r\n        else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';\r\n        else return 'jaydataproviders/' + providerName + 'Provider.js';\r\n    },\r\n    loadScript: function (url, currentProvider, callback) {\r\n        if (!url){\r\n            callback(false);\r\n            return;\r\n        }\r\n\r\n        function getHttpRequest() {\r\n            if ($data.__global.XMLHttpRequest)\r\n                return new XMLHttpRequest();\r\n            else if ($data.__global.ActiveXObject !== undefined)\r\n                return new ActiveXObject(\"MsXml2.XmlHttp\");\r\n            else{\r\n                $data.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\r\n                callback(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        var oXmlHttp = getHttpRequest();\r\n        oXmlHttp.onreadystatechange = function () {\r\n            $data.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\r\n            if (oXmlHttp.readyState == 4) {\r\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\r\n                    $data.Trace.log('HTTP request succeeded');\r\n                    $data.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\r\n                    eval.call($data.__global, oXmlHttp.responseText);\r\n                    if (typeof callback === 'function')\r\n                        callback(true);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                } else {\r\n                    $data.Trace.log('HTTP request status: ', oXmlHttp.status);\r\n                    if (typeof callback === 'function')\r\n                        callback(false);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                }\r\n            }\r\n        };\r\n        oXmlHttp.open('GET', url, true);\r\n        oXmlHttp.send(null);\r\n    },\r\n    loadScriptElement: function (url, currentProvider, callback) {\r\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\r\n\r\n        var script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = url;\r\n        $data.Trace.log('Appending child ' + script + ' to ' + head);\r\n        head.appendChild(script);\r\n\r\n        var loadInterval = this.scriptLoadInterval || 50;\r\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\r\n        $data.Trace.log('Script element watcher iterating ' + iteration + ' times');\r\n        function watcher() {\r\n            $data.Trace.log('Script element watcher iteration ' + iteration);\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback(true);\r\n            } else {\r\n                iteration--;\r\n                if (iteration > 0) {\r\n                    $data.Trace.log('Script element watcher next iteration');\r\n                    setTimeout(watcher, loadInterval);\r\n                } else {\r\n                    $data.Trace.log('Script element loader failed');\r\n                    callback(false);\r\n                }\r\n            }\r\n        }\r\n        setTimeout(watcher, loadInterval);\r\n    },\r\n\r\n    loadNpmModule: function (currentProvider, providerList, callback) {\r\n        var provider = null;\r\n        try {\r\n            require(this.npmModules[currentProvider]);\r\n            provider = $data.RegisteredStorageProviders[currentProvider];\r\n            $data.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\r\n        } catch (e) {\r\n            $data.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\r\n        }\r\n\r\n        if (provider) {\r\n            callback.success(provider);\r\n        } else if (providerList.length > 0) {\r\n            this.find(providerList, callback);\r\n        } else {\r\n            callback.error();\r\n        }\r\n    },\r\n\r\n    virtualProviders: {\r\n        type: $data.Array,\r\n        value: {\r\n            local: {\r\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\r\n            }\r\n        }\r\n    },\r\n    getVirtual: function(name){\r\n        if(this.virtualProviders[name])\r\n            return [].concat(this.virtualProviders[name].fallbacks);\r\n\r\n        return name;\r\n    }\r\n});\r\n\r\n$data.StorageProviderLoader = new $data.StorageProviderLoaderBase();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.modelBinder.FindProjectionVisitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function(includes){\r\n        this._includes = includes;\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.projectionExpression = this.projectionExpression || expression;\r\n        context && (context.projectionExpression = context.projectionExpression || expression);\r\n        this.Visit(expression.source, context)\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context)\r\n        if(!(expression.selector instanceof $data.Expressions.ConstantExpression)) {\r\n            var selectorContext = {};\r\n            this.Visit(expression.selector.expression, selectorContext);\r\n            \r\n            if(selectorContext.hasIncludeProjectionExpression){\r\n                var include = this._includes.filter(function(it){ return it.name === selectorContext.includePath; })[0];\r\n                if(include){\r\n                    include.projectionExpression = selectorContext.includeProjectionExpression\r\n                }\r\n                \r\n                context && (context.hasIncludeProjectionExpression = true);\r\n            }\r\n        }\r\n    },\r\n    VisitFrameOperationExpression: function(expression, context){\r\n        this.Visit(expression.source, context);\r\n        \r\n        var opDef = expression.operation.memberDefinition;\r\n        if(opDef && opDef.frameType === $data.Expressions.ProjectionExpression){\r\n            var paramCounter = 0;\r\n            var params = opDef.parameters || [{ name: \"@expression\" }];\r\n            \r\n            var args = params.map(function (item, index) {\r\n                if (item.name === \"@expression\") {\r\n                    return expression.source;\r\n                } else {\r\n                    return expression.parameters[paramCounter++]\r\n                };\r\n            });\r\n            \r\n            for (var i = 0; i < args.length; i++) {\r\n                var arg = args[i];\r\n                \r\n                if (arg instanceof $data.Expressions.ConstantExpression && arg.value instanceof $data.Queryable) {\r\n                    var preparator = Container.createQueryExpressionCreator(arg.value.entityContext);\r\n                    arg = preparator.Visit(arg.value.expression);\r\n                    \r\n                }\r\n                \r\n                var visitor = new $data.modelBinder.FindProjectionVisitor(this._inculdes);\r\n                var visitorContext = { };\r\n                var compiled = visitor.Visit(arg, visitorContext);\r\n                \r\n                if(context && visitorContext.projectionExpression){\r\n                    context.hasIncludeProjectionExpression = true;\r\n                    context.includeProjectionExpression = visitorContext.projectionExpression;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        var propName = expression.associationInfo.FromPropertyName;\r\n        \r\n        if(context) {\r\n            context.includePath = context.includePath ? (context.includePath + '.') : \"\";\r\n            context.includePath += propName;\r\n        }\r\n    }\r\n});\r\n\r\n$C('$data.modelBinder.ModelBinderConfigCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (query, includes, oDataProvider) {\r\n        this._query = query;\r\n        this._includes = includes;\r\n        this._isoDataProvider = oDataProvider || false;\r\n        this.depth = [];\r\n    },\r\n    VisitSingleExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitSomeExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFindExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitEveryExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitToArrayExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFirstExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitForEachExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitServiceOperationExpression: function (expression) {\r\n        if (expression.cfg.returnType) {\r\n            var returnType = Container.resolveType(expression.cfg.returnType);\r\n            if ((typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Queryable)) || returnType === $data.Array) {\r\n                this._defaultModelBinder(expression);\r\n            } else {\r\n                var builder = Container.createqueryBuilder();\r\n                builder.modelBinderConfig['$type'] = returnType;\r\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Entity)) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = returnType;\r\n                    builder.modelBinderConfig['$value'] = function (a, v) {\r\n                        return (expression.cfg.serviceName in v) ? v[expression.cfg.serviceName] : v.value;\r\n                    }\r\n                }\r\n                this.VisitExpression(expression, builder);\r\n                builder.resetModelBinderProperty();\r\n                this._query.modelBinderConfig = builder.modelBinderConfig;\r\n            }\r\n        }\r\n    },\r\n    VisitCountExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitBatchDeleteExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitConstantExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.type;\r\n        builder.modelBinderConfig['$value'] = expression.value;\r\n    },\r\n\r\n    VisitExpression: function (expression, builder) {\r\n        var projVisitor = Container.createFindProjectionVisitor(this._includes);\r\n        var projContext = {};\r\n        projVisitor.Visit(expression, projContext);\r\n\r\n        if (projContext.projectionExpression) {\r\n            this.Visit(projContext.projectionExpression, builder);\r\n        } else {\r\n            this.DefaultSelection(builder, this._query.defaultType, this._includes, projContext.hasIncludeProjectionExpression);\r\n        }\r\n    },\r\n    _defaultModelBinder: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        if (this._isoDataProvider) {\r\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\r\n        }\r\n        builder.modelBinderConfig['$item'] = {};\r\n        builder.selectModelBinderProperty('$item');\r\n\r\n        this.VisitExpression(expression, builder);\r\n\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    _addPropertyToModelBinderConfig: function (elementType, builder) {\r\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\r\n        if (elementType.memberDefinitions) {\r\n            elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\r\n                if ((!storageModel) || (storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name])) {\r\n\r\n                    var type = Container.resolveType(prop.dataType);\r\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\r\n                        //complex type\r\n                        builder.selectModelBinderProperty(prop.name);\r\n                        builder.modelBinderConfig['$type'] = type;\r\n                        if (this._isoDataProvider) {\r\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                        } else {\r\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                        }\r\n                        this._addPropertyToModelBinderConfig(type, builder);\r\n                        builder.popModelBinderProperty();\r\n                    } else {\r\n                        if (prop.key) {\r\n                            builder.addKeyField(prop.name);\r\n                        }\r\n                        if (prop.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                            builder.modelBinderConfig[prop.name] = { $source: '@odata.etag' }\r\n                        } else if (type === $data.Array && prop.elementType) {\r\n                            builder.selectModelBinderProperty(prop.name);\r\n                            builder.modelBinderConfig['$type'] = type;\r\n                            if (this._isoDataProvider) {\r\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                            } else {\r\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                            }\r\n                            builder.selectModelBinderProperty('$item');\r\n                            var arrayElementType = Container.resolveType(prop.elementType);\r\n                            builder.modelBinderConfig['$type'] = arrayElementType;\r\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\r\n                            builder.popModelBinderProperty();\r\n                            builder.popModelBinderProperty();\r\n                        } else {\r\n                            builder.modelBinderConfig[prop.name] = {\r\n                                $source: prop.name,\r\n                                $type: prop.type\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }, this);\r\n        } else {\r\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\r\n            if (builder._binderConfig.$type === $data.Array) {\r\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\r\n                builder.modelBinderConfig = builder._binderConfig.$item;\r\n            }\r\n\r\n\r\n        }\r\n        if (storageModel) {\r\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\r\n        }\r\n    },\r\n    _addComplexTypeProperties: function (complexTypes, builder) {\r\n        complexTypes.forEach(function (ct) {\r\n            if (ct.ToType !== $data.Array){\r\n                builder.selectModelBinderProperty(ct.FromPropertyName);\r\n                builder.modelBinderConfig['$type'] = ct.ToType;\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\r\n                }\r\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\r\n\r\n                builder.popModelBinderProperty();\r\n            }else{\r\n                var dt = ct.ToType;\r\n                var et = Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\r\n                if (dt === $data.Array && et && et.isAssignableTo && et.isAssignableTo($data.Entity)){\r\n                    config = {\r\n                        $type: $data.Array,\r\n                        $selector: 'json:' + ct.FromPropertyName,\r\n                        $item: {\r\n                            $type: et\r\n                        }\r\n                    };\r\n                    var md = et.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < md.length; i++){\r\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\r\n                    }\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\r\n                }else{\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\r\n                        $type: ct.ToType,\r\n                        $source: ct.FromPropertyName\r\n                    };\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n    DefaultSelection: function (builder, type, allIncludes, custom) {\r\n        //no projection, get all item from entitySet\r\n        builder.modelBinderConfig['$type'] = custom ? $data.Object : type;\r\n\r\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\r\n        this._addPropertyToModelBinderConfig(type, builder);\r\n        if (allIncludes) {\r\n            let excludeDeepInclude = [];\r\n            allIncludes.forEach(function (include) {\r\n                if(excludeDeepInclude.some(function(incName){ return include.name.length > incName.length && include.name.substr(0, incName.length) === incName })) {\r\n                    return;\r\n                }\r\n                this.depth.push(include.name);\r\n                \r\n                var includes = include.name.split('.');\r\n                var association = null;\r\n                var tmpStorageModel = storageModel;\r\n                var itemCount = 0;\r\n                for (var i = 0; i < includes.length; i++) {\r\n                    if (builder.modelBinderConfig.$item) {\r\n                        builder.selectModelBinderProperty('$item');\r\n                        itemCount++;\r\n                    }\r\n                    builder.selectModelBinderProperty(includes[i]);\r\n                    association = tmpStorageModel.Associations[includes[i]];\r\n                    tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\r\n                }\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\r\n                }\r\n                if (association.ToMultiplicity === '*') {\r\n                    builder.modelBinderConfig['$type'] = $data.Array;\r\n                    builder.selectModelBinderProperty('$item');\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    if(include.projectionExpression){\r\n                        excludeDeepInclude.push(include.name);\r\n                        this.Visit(include.projectionExpression, builder);\r\n                    } else {\r\n                        this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    }\r\n                    builder.popModelBinderProperty();\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    if(include.projectionExpression){\r\n                        excludeDeepInclude.push(include.name);\r\n                        this.Visit(include.projectionExpression, builder);\r\n                    } else {\r\n                        this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    }\r\n                }\r\n\r\n                for (var i = 0; i < includes.length + itemCount; i++) {\r\n                    builder.popModelBinderProperty();\r\n                }\r\n                this.depth.pop();\r\n            }, this);\r\n        }\r\n    },\r\n    VisitProjectionExpression: function (expression, builder) {\r\n        this.hasProjection = true;\r\n        this.Visit(expression.selector, builder);\r\n\r\n        if (expression.selector && expression.selector.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || $data.Object;\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, builder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n\r\n    },\r\n    VisitEntityAsProjection: function (expression, builder) {\r\n        this.mapping = '';\r\n        this.Visit(expression.expression, builder);\r\n        this.depth.push(this.mapping);\r\n        this.mapping = this.depth.join('.');\r\n        \r\n        var includes;\r\n        var currentInclude;\r\n        if (this.mapping && this._includes instanceof Array) {\r\n            includes = this._includes.filter(function (inc) {\r\n                return inc.name.indexOf(this.mapping + '.') === 0\r\n            }, this);\r\n            includes = includes.map(function (inc) {\r\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\r\n            }, this);\r\n\r\n            // if (includes.length > 0){\r\n            //     this.DefaultSelection(builder, expression.expression.entityType, includes);\r\n            //     //console.warn('WARN: include for mapped properties is not supported!');\r\n            // }\r\n            \r\n            currentInclude = this._includes.filter(function (inc) {\r\n                return inc.name === this.mapping;\r\n            }, this)[0];\r\n        }\r\n        \r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            if(currentInclude && currentInclude.projectionExpression){\r\n                let tmpIncludes = this._includes;\r\n                this._includes = includes;\r\n                let tmpDepth = this.depth;\r\n                this.depth = [];\r\n                this.Visit(currentInclude.projectionExpression, builder);\r\n                this._includes = tmpIncludes;\r\n                this.depth = tmpDepth;\r\n            } else {\r\n                this.DefaultSelection(builder, expression.expression.entityType, includes)\r\n            }\r\n        } else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            builder.modelBinderConfig.$type = $data.Array;\r\n            builder.modelBinderConfig.$item = {};\r\n            builder.selectModelBinderProperty('$item');\r\n            if(currentInclude && currentInclude.projectionExpression){\r\n                let tmpIncludes = this._includes;\r\n                this._includes = includes;\r\n                let tmpDepth = this.depth;\r\n                this.depth = [];\r\n                this.Visit(currentInclude.projectionExpression, builder);\r\n                this._includes = tmpIncludes;\r\n                this.depth = tmpDepth;\r\n            } else {\r\n                this.DefaultSelection(builder, expression.expression.elementType, includes)\r\n            }\r\n            builder.popModelBinderProperty();\r\n        }\r\n        this.depth.pop();\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\r\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\r\n            this._addPropertyToModelBinderConfig(Container.resolveType(expression.memberDefinition.type), builder);\r\n        } else {\r\n            if (!(builder.modelBinderConfig.$type && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo($data.Entity)))\r\n                builder.modelBinderConfig['$source'] = expression.memberName;\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, builder) {\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, builder);\r\n            this.Visit(expression.selector, builder);\r\n        }\r\n\r\n    },\r\n    VisitComplexTypeExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n\r\n\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\r\n            }\r\n        }\r\n    },\r\n    VisitEntityExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, builder) {\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\r\n            }\r\n        }\r\n\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Object;\r\n        expression.members.forEach(function (of) {\r\n            this.Visit(of, builder);\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, builder) {\r\n        builder.selectModelBinderProperty(expression.fieldName);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n        builder.popModelBinderProperty();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Transaction', null, null, {\r\n    constructor: function () {\r\n        this._objectId = (new Date()).getTime();\r\n        $data.Trace.log(\"create: \", this._objectId);\r\n\r\n        this.oncomplete = new $data.Event(\"oncomplete\", this);\r\n        this.onerror = new $data.Event(\"onerror\", this);\r\n    },\r\n    abort: function () {\r\n        Guard.raise(new Exception('Not Implemented', 'Not Implemented', arguments));\r\n    },\r\n\r\n    _objectId: { type: $data.Integer },\r\n    transaction: { type: $data.Object },\r\n\r\n    oncomplete: { type: $data.Event },\r\n    onerror: { type: $data.Event }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.Defaults', null, null, null, {\r\n    validators: {\r\n        value: {\r\n            required: function (value, definedValue) { return !Guard.isNullOrUndefined(value); },\r\n            customValidator: function (value, definedValue) { return Guard.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true; },\r\n\r\n            minValue: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value >= definedValue; },\r\n            maxValue: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value <= definedValue; },\r\n\r\n            minLength: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length >= definedValue; },\r\n            maxLength: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length <= definedValue; },\r\n            length: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length == definedValue; },\r\n            regex: function (value, definedValue) {\r\n                return Guard.isNullOrUndefined(value) ||\r\n                    value.match(typeof definedValue === 'string'\r\n                        ? new RegExp((definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === (definedValue.length - 1)) ? definedValue.slice(1, -1) : definedValue)\r\n                        : definedValue)\r\n            }\r\n        }\r\n    },\r\n\r\n    _getGroupValidations: function (validations) {\r\n        var validators = {};\r\n        if (Array.isArray(validations)) {\r\n            for (var i = 0; i < validations.length; i++) {\r\n                var validator = validations[i];\r\n                if (typeof this.validators[validator] === 'function') {\r\n                    validators[validator] = this.validators[validator];\r\n                }\r\n            }\r\n        }\r\n\r\n        return validators;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.Validation.EntityValidation', $data.Validation.EntityValidationBase, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n\r\n        var errors = [];\r\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\r\n        }, this);\r\n        return errors;\r\n    },\r\n    ValidateEntityField: function (entity, memberDefinition, newValue, valueNotSet) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        var errors = [];\r\n        var resolvedType = Container.resolveType(memberDefinition.dataType);\r\n        var typeName = Container.resolveName(resolvedType);\r\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\r\n\r\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo($data.Entity)) {\r\n            typeName = $data.Entity.fullName;\r\n        }\r\n\r\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\r\n        return errors;\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        var value;\r\n        if (memberDefinition[validationName] && memberDefinition[validationName].value)\r\n            value = memberDefinition[validationName].value;\r\n        else\r\n            value = memberDefinition[validationName];\r\n\r\n        if (this.convertableValidation[validationName]) {\r\n            var typeToConvert;\r\n            if (this.convertableValidation[validationName] === true) {\r\n                typeToConvert = memberDefinition.type;\r\n            } else {\r\n                typeToConvert = this.convertableValidation[validationName];\r\n            }\r\n\r\n            if (typeToConvert)\r\n                value = Container.convertTo(value, typeToConvert, memberDefinition.elementType);\r\n        }\r\n\r\n        return value;\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        var eMessage = defaultMessage;\r\n        if (typeof memberDefinition[validationName] == \"object\" && memberDefinition[validationName].message)\r\n            eMessage = memberDefinition[validationName].message;\r\n        else if (memberDefinition.errorMessage)\r\n            eMessage = memberDefinition.errorMessage;\r\n\r\n        return eMessage;\r\n    },\r\n    createValidationError: function (memberDefinition, validationName, defaultMessage) {\r\n        return new $data.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\r\n    },\r\n\r\n    convertableValidation: {\r\n        value: {\r\n            required: '$data.Boolean',\r\n            minValue: true,\r\n            maxValue: true,\r\n            minLength: '$data.Integer',\r\n            maxLength: '$data.Integer',\r\n            length: '$data.Integer'\r\n        }\r\n\r\n    },\r\n    supportedValidations: {\r\n        value: {\r\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.ObjectID': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Byte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.SByte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Decimal': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Float': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Number': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int16': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Integer': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int32': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int64': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.String': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\r\n            '$data.Date': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.DateTimeOffset': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Time': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Day': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Duration': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Boolean': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Array': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\r\n            '$data.Object': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Guid': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Blob': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\r\n            '$data.GeographyPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\r\n        }\r\n    },\r\n\r\n    fieldValidate: function (entity, memberDefinition, value, errors, validationTypeName) {\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        ///<param name=\"value\" type=\"Object\" />\r\n        ///<param name=\"errors\" type=\"Array\" />\r\n        ///<param name=\"validationTypeName\" type=\"string\" />\r\n        if (entity.entityState == $data.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0)\r\n            return;\r\n\r\n        var validatonGroup = this.supportedValidations[validationTypeName];\r\n        if (validatonGroup) {\r\n            var validations = Object.keys(validatonGroup);\r\n            validations.forEach(function (validation) {\r\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation)))\r\n                    errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\r\n            }, this);\r\n\r\n            if (validationTypeName === $data.Entity.fullName && value instanceof $data.Entity && !value.isValid()) {\r\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\r\n            }\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation.Entity = new $data.Validation.EntityValidation();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.ValidationError', null, null, {\r\n    constructor: function (message, propertyDefinition, type) {\r\n        ///<param name=\"message\" type=\"string\" />\r\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\r\n\r\n        this.Message = message;\r\n        this.PropertyDefinition = propertyDefinition;\r\n        this.Type = type;\r\n    },\r\n    Type: { dataType: 'string' },\r\n    Message: { dataType: \"string\" },\r\n    PropertyDefinition: { dataType: $data.MemberDefinition }\r\n}, null);\r\n\r\n$data.Class.define('$data.Validation.EntityValidationBase', null, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        return [];\r\n    },\r\n\r\n    ValidateEntityField: function (entity, memberDefinition) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        return [];\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation = $data.Validation || {};\r\n$data.Validation.Entity = new $data.Validation.EntityValidationBase();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem/index.js';\r\nimport expressions from './Expressions/index.js';\r\n\r\nimport EntityValidationBase from './Validation/EntityValidationBase.js';\r\nimport EntityValidation from './Validation/EntityValidation.js';\r\nimport ChangeDistributorBase from './Notifications/ChangeDistributorBase.js';\r\nimport ChangeCollectorBase from './Notifications/ChangeCollectorBase.js';\r\nimport ChangeDistributor from './Notifications/ChangeDistributor.js';\r\nimport ChangeCollector from './Notifications/ChangeCollector.js';\r\nimport Transaction from './Transaction.js';\r\nimport Access from './Access.js';\r\n//import Promise from './Promise.js';\r\nimport Entity from './Entity.js';\r\nimport Enum from './Enum.js';\r\nimport RelatedEntityProxy from './RelatedEntityProxy.js';\r\nimport EntityContext from './EntityContext.js';\r\nimport QueryProvider from './QueryProvider.js';\r\nimport ModelBinder from './ModelBinder.js';\r\nimport QueryBuilder from './QueryBuilder.js';\r\nimport Query from './Query.js';\r\nimport Queryable from './Queryable.js';\r\nimport EntitySet from './EntitySet.js';\r\nimport EntityState from './EntityState.js';\r\nimport EntityAttachModes from './EntityAttachModes.js';\r\nimport EntityStateManager from './EntityStateManager.js';\r\nimport ItemStore from './ItemStore.js';\r\nimport StorageProviderLoader from './StorageProviderLoader.js';\r\nimport StorageProviderBase from './StorageProviderBase.js';\r\nimport ServiceOperation from './ServiceOperation.js';\r\nimport EntityWrapper from './EntityWrapper.js';\r\nimport jQueryAjaxWrapper from './Ajax/jQueryAjaxWrapper.js';\r\nimport WinJSAjaxWrapper from './Ajax/WinJSAjaxWrapper.js';\r\nimport ExtJSAjaxWrapper from './Ajax/ExtJSAjaxWrapper.js';\r\nimport AjaxStub from './Ajax/AjaxStub.js';\r\nimport modelBinderConfigCompiler from './StorageProviders/modelBinderConfigCompiler.js';\r\nimport AuthenticationBase from './Authentication/AuthenticationBase.js';\r\nimport Anonymous from './Authentication/Anonymous.js';\r\nimport FacebookAuth from './Authentication/FacebookAuth.js';\r\nimport BasicAuth from './Authentication/BasicAuth.js';\r\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\r\n//import deferred from '../JayDataModules/deferred.js';\r\n//import JayStorm from './JayStorm.js';\r\n\r\nimport { PromiseHandler } from 'jaydata-promise-handler';\r\nPromiseHandler.use($data);\r\n\r\nexport default $data\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = require('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0="],"sourceRoot":"/source/"}